// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/api/visibility.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fvisibility_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fvisibility_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fvisibility_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fvisibility_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fapi_2fvisibility_2eproto;
namespace google {
namespace api {
class Visibility;
struct VisibilityDefaultTypeInternal;
extern VisibilityDefaultTypeInternal _Visibility_default_instance_;
class VisibilityRule;
struct VisibilityRuleDefaultTypeInternal;
extern VisibilityRuleDefaultTypeInternal _VisibilityRule_default_instance_;
}  // namespace api
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace api {

// ===================================================================


// -------------------------------------------------------------------

class VisibilityRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.api.VisibilityRule) */ {
 public:
  inline VisibilityRule() : VisibilityRule(nullptr) {}
  ~VisibilityRule() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisibilityRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline VisibilityRule(const VisibilityRule& from) : VisibilityRule(nullptr, from) {}
  inline VisibilityRule(VisibilityRule&& from) noexcept
      : VisibilityRule(nullptr, std::move(from)) {}
  inline VisibilityRule& operator=(const VisibilityRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityRule& operator=(VisibilityRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibilityRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisibilityRule* internal_default_instance() {
    return reinterpret_cast<const VisibilityRule*>(
        &_VisibilityRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VisibilityRule& a, VisibilityRule& b) { a.Swap(&b); }
  inline void Swap(VisibilityRule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibilityRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisibilityRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VisibilityRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisibilityRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisibilityRule& from) { VisibilityRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VisibilityRule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "google.api.VisibilityRule"; }

 protected:
  explicit VisibilityRule(::google::protobuf::Arena* arena);
  VisibilityRule(::google::protobuf::Arena* arena, const VisibilityRule& from);
  VisibilityRule(::google::protobuf::Arena* arena, VisibilityRule&& from) noexcept
      : VisibilityRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSelectorFieldNumber = 1,
    kRestrictionFieldNumber = 2,
  };
  // string selector = 1 [json_name = "selector"];
  void clear_selector() ;
  const std::string& selector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_selector(Arg_&& arg, Args_... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* value);

  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(
      const std::string& value);
  std::string* _internal_mutable_selector();

  public:
  // string restriction = 2 [json_name = "restriction"];
  void clear_restriction() ;
  const std::string& restriction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_restriction(Arg_&& arg, Args_... args);
  std::string* mutable_restriction();
  PROTOBUF_NODISCARD std::string* release_restriction();
  void set_allocated_restriction(std::string* value);

  private:
  const std::string& _internal_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_restriction(
      const std::string& value);
  std::string* _internal_mutable_restriction();

  public:
  // @@protoc_insertion_point(class_scope:google.api.VisibilityRule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VisibilityRule_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VisibilityRule& from_msg);
    ::google::protobuf::internal::ArenaStringPtr selector_;
    ::google::protobuf::internal::ArenaStringPtr restriction_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fvisibility_2eproto;
};
// -------------------------------------------------------------------

class Visibility final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.api.Visibility) */ {
 public:
  inline Visibility() : Visibility(nullptr) {}
  ~Visibility() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Visibility(
      ::google::protobuf::internal::ConstantInitialized);

  inline Visibility(const Visibility& from) : Visibility(nullptr, from) {}
  inline Visibility(Visibility&& from) noexcept
      : Visibility(nullptr, std::move(from)) {}
  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visibility& operator=(Visibility&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Visibility& default_instance() {
    return *internal_default_instance();
  }
  static inline const Visibility* internal_default_instance() {
    return reinterpret_cast<const Visibility*>(
        &_Visibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Visibility& a, Visibility& b) { a.Swap(&b); }
  inline void Swap(Visibility* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Visibility* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Visibility* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Visibility>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Visibility& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Visibility& from) { Visibility::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Visibility* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "google.api.Visibility"; }

 protected:
  explicit Visibility(::google::protobuf::Arena* arena);
  Visibility(::google::protobuf::Arena* arena, const Visibility& from);
  Visibility(::google::protobuf::Arena* arena, Visibility&& from) noexcept
      : Visibility(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .google.api.VisibilityRule rules = 1 [json_name = "rules"];
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::google::api::VisibilityRule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>* mutable_rules();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>& _internal_rules() const;
  ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>* _internal_mutable_rules();
  public:
  const ::google::api::VisibilityRule& rules(int index) const;
  ::google::api::VisibilityRule* add_rules();
  const ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>& rules() const;
  // @@protoc_insertion_point(class_scope:google.api.Visibility)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Visibility_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Visibility& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule > rules_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fvisibility_2eproto;
};

// ===================================================================



static const int kEnumVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::EnumOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    enum_visibility;
static const int kValueVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::EnumValueOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    value_visibility;
static const int kFieldVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::FieldOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    field_visibility;
static const int kMessageVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MessageOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    message_visibility;
static const int kMethodVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MethodOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    method_visibility;
static const int kApiVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::ServiceOptions, ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11,
    false>
    api_visibility;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Visibility

// repeated .google.api.VisibilityRule rules = 1 [json_name = "rules"];
inline int Visibility::_internal_rules_size() const {
  return _internal_rules().size();
}
inline int Visibility::rules_size() const {
  return _internal_rules_size();
}
inline void Visibility::clear_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rules_.Clear();
}
inline ::google::api::VisibilityRule* Visibility::mutable_rules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.api.Visibility.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>* Visibility::mutable_rules()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.api.Visibility.rules)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rules();
}
inline const ::google::api::VisibilityRule& Visibility::rules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.api.Visibility.rules)
  return _internal_rules().Get(index);
}
inline ::google::api::VisibilityRule* Visibility::add_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::api::VisibilityRule* _add = _internal_mutable_rules()->Add();
  // @@protoc_insertion_point(field_add:google.api.Visibility.rules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>& Visibility::rules() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.api.Visibility.rules)
  return _internal_rules();
}
inline const ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>&
Visibility::_internal_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rules_;
}
inline ::google::protobuf::RepeatedPtrField<::google::api::VisibilityRule>*
Visibility::_internal_mutable_rules() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rules_;
}

// -------------------------------------------------------------------

// VisibilityRule

// string selector = 1 [json_name = "selector"];
inline void VisibilityRule::clear_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& VisibilityRule::selector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.api.VisibilityRule.selector)
  return _internal_selector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisibilityRule::set_selector(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.api.VisibilityRule.selector)
}
inline std::string* VisibilityRule::mutable_selector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.VisibilityRule.selector)
  return _s;
}
inline const std::string& VisibilityRule::_internal_selector() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.selector_.Get();
}
inline void VisibilityRule::_internal_set_selector(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selector_.Set(value, GetArena());
}
inline std::string* VisibilityRule::_internal_mutable_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.selector_.Mutable( GetArena());
}
inline std::string* VisibilityRule::release_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.api.VisibilityRule.selector)
  return _impl_.selector_.Release();
}
inline void VisibilityRule::set_allocated_selector(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.selector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.selector_.IsDefault()) {
          _impl_.selector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.VisibilityRule.selector)
}

// string restriction = 2 [json_name = "restriction"];
inline void VisibilityRule::clear_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restriction_.ClearToEmpty();
}
inline const std::string& VisibilityRule::restriction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.api.VisibilityRule.restriction)
  return _internal_restriction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisibilityRule::set_restriction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restriction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.api.VisibilityRule.restriction)
}
inline std::string* VisibilityRule::mutable_restriction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_restriction();
  // @@protoc_insertion_point(field_mutable:google.api.VisibilityRule.restriction)
  return _s;
}
inline const std::string& VisibilityRule::_internal_restriction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.restriction_.Get();
}
inline void VisibilityRule::_internal_set_restriction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restriction_.Set(value, GetArena());
}
inline std::string* VisibilityRule::_internal_mutable_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.restriction_.Mutable( GetArena());
}
inline std::string* VisibilityRule::release_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.api.VisibilityRule.restriction)
  return _impl_.restriction_.Release();
}
inline void VisibilityRule::set_allocated_restriction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restriction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.restriction_.IsDefault()) {
          _impl_.restriction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.VisibilityRule.restriction)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fvisibility_2eproto_2epb_2eh
