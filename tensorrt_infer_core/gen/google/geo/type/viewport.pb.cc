// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/geo/type/viewport.proto
// Protobuf C++ Version: 5.27.2

#include "google/geo/type/viewport.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace google {
namespace geo {
namespace type {

inline constexpr Viewport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        low_{nullptr},
        high_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Viewport::Viewport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ViewportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewportDefaultTypeInternal() {}
  union {
    Viewport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewportDefaultTypeInternal _Viewport_default_instance_;
}  // namespace type
}  // namespace geo
}  // namespace google
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_google_2fgeo_2ftype_2fviewport_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_google_2fgeo_2ftype_2fviewport_2eproto = nullptr;
const ::uint32_t
    TableStruct_google_2fgeo_2ftype_2fviewport_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, _impl_.high_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::google::geo::type::Viewport)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::google::geo::type::_Viewport_default_instance_._instance,
};
const char descriptor_table_protodef_google_2fgeo_2ftype_2fviewport_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\036google/geo/type/viewport.proto\022\017google"
    ".geo.type\032\030google/type/latlng.proto\"Z\n\010V"
    "iewport\022%\n\003low\030\001 \001(\0132\023.google.type.LatLn"
    "gR\003low\022\'\n\004high\030\002 \001(\0132\023.google.type.LatLn"
    "gR\004highBo\n\023com.google.geo.typeB\rViewport"
    "ProtoP\001Z@google.golang.org/genproto/goog"
    "leapis/geo/type/viewport;viewport\242\002\004GGTP"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto_deps[1] =
    {
        &::descriptor_table_google_2ftype_2flatlng_2eproto,
};
static ::absl::once_flag descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto = {
    false,
    false,
    288,
    descriptor_table_protodef_google_2fgeo_2ftype_2fviewport_2eproto,
    "google/geo/type/viewport.proto",
    &descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto_once,
    descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_google_2fgeo_2ftype_2fviewport_2eproto::offsets,
    file_level_enum_descriptors_google_2fgeo_2ftype_2fviewport_2eproto,
    file_level_service_descriptors_google_2fgeo_2ftype_2fviewport_2eproto,
};
namespace google {
namespace geo {
namespace type {
// ===================================================================

class Viewport::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Viewport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Viewport, _impl_._has_bits_);
};

void Viewport::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_ != nullptr) _impl_.low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Viewport::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_ != nullptr) _impl_.high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Viewport::Viewport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.geo.type.Viewport)
}
inline PROTOBUF_NDEBUG_INLINE Viewport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::google::geo::type::Viewport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Viewport::Viewport(
    ::google::protobuf::Arena* arena,
    const Viewport& from)
    : ::google::protobuf::Message(arena) {
  Viewport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.low_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::type::LatLng>(
                              arena, *from._impl_.low_)
                        : nullptr;
  _impl_.high_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::type::LatLng>(
                              arena, *from._impl_.high_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:google.geo.type.Viewport)
}
inline PROTOBUF_NDEBUG_INLINE Viewport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Viewport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, low_),
           0,
           offsetof(Impl_, high_) -
               offsetof(Impl_, low_) +
               sizeof(Impl_::high_));
}
Viewport::~Viewport() {
  // @@protoc_insertion_point(destructor:google.geo.type.Viewport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Viewport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.low_;
  delete _impl_.high_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Viewport::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Viewport, _impl_._cached_size_),
              false,
          },
          &Viewport::MergeImpl,
          &Viewport::kDescriptorMethods,
          &descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Viewport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Viewport, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Viewport_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::google::geo::type::Viewport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.type.LatLng high = 2 [json_name = "high"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Viewport, _impl_.high_)}},
    // .google.type.LatLng low = 1 [json_name = "low"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Viewport, _impl_.low_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.type.LatLng low = 1 [json_name = "low"];
    {PROTOBUF_FIELD_OFFSET(Viewport, _impl_.low_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.type.LatLng high = 2 [json_name = "high"];
    {PROTOBUF_FIELD_OFFSET(Viewport, _impl_.high_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::type::LatLng>()},
    {::_pbi::TcParser::GetTable<::google::type::LatLng>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Viewport::Clear() {
// @@protoc_insertion_point(message_clear_start:google.geo.type.Viewport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.low_ != nullptr);
      _impl_.low_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.high_ != nullptr);
      _impl_.high_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Viewport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.geo.type.Viewport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.type.LatLng low = 1 [json_name = "low"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.low_, _impl_.low_->GetCachedSize(), target, stream);
  }

  // .google.type.LatLng high = 2 [json_name = "high"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.high_, _impl_.high_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.geo.type.Viewport)
  return target;
}

::size_t Viewport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.geo.type.Viewport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.type.LatLng low = 1 [json_name = "low"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.low_);
    }

    // .google.type.LatLng high = 2 [json_name = "high"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.high_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Viewport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Viewport*>(&to_msg);
  auto& from = static_cast<const Viewport&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:google.geo.type.Viewport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.low_ != nullptr);
      if (_this->_impl_.low_ == nullptr) {
        _this->_impl_.low_ =
            ::google::protobuf::Message::CopyConstruct<::google::type::LatLng>(arena, *from._impl_.low_);
      } else {
        _this->_impl_.low_->MergeFrom(*from._impl_.low_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.high_ != nullptr);
      if (_this->_impl_.high_ == nullptr) {
        _this->_impl_.high_ =
            ::google::protobuf::Message::CopyConstruct<::google::type::LatLng>(arena, *from._impl_.high_);
      } else {
        _this->_impl_.high_->MergeFrom(*from._impl_.high_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Viewport::CopyFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.geo.type.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Viewport::InternalSwap(Viewport* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Viewport, _impl_.high_)
      + sizeof(Viewport::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(Viewport, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::google::protobuf::Metadata Viewport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace geo
}  // namespace google
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
