// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/color.proto
// Protobuf C++ Version: 5.27.2

#include "google/type/color.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace google {
namespace type {

inline constexpr Color::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        alpha_{nullptr},
        red_{0},
        green_{0},
        blue_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Color::Color(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace type
}  // namespace google
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_google_2ftype_2fcolor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_google_2ftype_2fcolor_2eproto = nullptr;
const ::uint32_t
    TableStruct_google_2ftype_2fcolor_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _impl_.red_),
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _impl_.green_),
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _impl_.blue_),
        PROTOBUF_FIELD_OFFSET(::google::type::Color, _impl_.alpha_),
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::google::type::Color)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::google::type::_Color_default_instance_._instance,
};
const char descriptor_table_protodef_google_2ftype_2fcolor_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027google/type/color.proto\022\013google.type\032\036"
    "google/protobuf/wrappers.proto\"v\n\005Color\022"
    "\020\n\003red\030\001 \001(\002R\003red\022\024\n\005green\030\002 \001(\002R\005green\022"
    "\022\n\004blue\030\003 \001(\002R\004blue\0221\n\005alpha\030\004 \001(\0132\033.goo"
    "gle.protobuf.FloatValueR\005alphaB`\n\017com.go"
    "ogle.typeB\nColorProtoP\001Z6google.golang.o"
    "rg/genproto/googleapis/type/color;color\370"
    "\001\001\242\002\003GTPb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_google_2ftype_2fcolor_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::absl::once_flag descriptor_table_google_2ftype_2fcolor_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_google_2ftype_2fcolor_2eproto = {
    false,
    false,
    296,
    descriptor_table_protodef_google_2ftype_2fcolor_2eproto,
    "google/type/color.proto",
    &descriptor_table_google_2ftype_2fcolor_2eproto_once,
    descriptor_table_google_2ftype_2fcolor_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_google_2ftype_2fcolor_2eproto::offsets,
    file_level_enum_descriptors_google_2ftype_2fcolor_2eproto,
    file_level_service_descriptors_google_2ftype_2fcolor_2eproto,
};
namespace google {
namespace type {
// ===================================================================

class Color::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Color>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Color, _impl_._has_bits_);
};

void Color::clear_alpha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.alpha_ != nullptr) _impl_.alpha_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Color::Color(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.type.Color)
}
inline PROTOBUF_NDEBUG_INLINE Color::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::google::type::Color& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Color::Color(
    ::google::protobuf::Arena* arena,
    const Color& from)
    : ::google::protobuf::Message(arena) {
  Color* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.alpha_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::FloatValue>(
                              arena, *from._impl_.alpha_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, red_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, red_),
           offsetof(Impl_, blue_) -
               offsetof(Impl_, red_) +
               sizeof(Impl_::blue_));

  // @@protoc_insertion_point(copy_constructor:google.type.Color)
}
inline PROTOBUF_NDEBUG_INLINE Color::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Color::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, alpha_),
           0,
           offsetof(Impl_, blue_) -
               offsetof(Impl_, alpha_) +
               sizeof(Impl_::blue_));
}
Color::~Color() {
  // @@protoc_insertion_point(destructor:google.type.Color)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Color::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.alpha_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Color::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Color, _impl_._cached_size_),
              false,
          },
          &Color::MergeImpl,
          &Color::kDescriptorMethods,
          &descriptor_table_google_2ftype_2fcolor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Color::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Color, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Color_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::google::type::Color>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_)}},
    // float red = 1 [json_name = "red"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.red_)}},
    // float green = 2 [json_name = "green"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.green_)}},
    // float blue = 3 [json_name = "blue"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float red = 1 [json_name = "red"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.red_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float green = 2 [json_name = "green"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.green_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float blue = 3 [json_name = "blue"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::FloatValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.Color)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.alpha_ != nullptr);
    _impl_.alpha_->Clear();
  }
  ::memset(&_impl_.red_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Color::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.type.Color)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float red = 1 [json_name = "red"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_red(), target);
  }

  // float green = 2 [json_name = "green"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_green(), target);
  }

  // float blue = 3 [json_name = "blue"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_blue(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.alpha_, _impl_.alpha_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.type.Color)
  return target;
}

::size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.Color)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.alpha_);
  }

  // float red = 1 [json_name = "red"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    total_size += 5;
  }

  // float green = 2 [json_name = "green"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    total_size += 5;
  }

  // float blue = 3 [json_name = "blue"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Color::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:google.type.Color)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.alpha_ != nullptr);
    if (_this->_impl_.alpha_ == nullptr) {
      _this->_impl_.alpha_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::FloatValue>(arena, *from._impl_.alpha_);
    } else {
      _this->_impl_.alpha_->MergeFrom(*from._impl_.alpha_);
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = from._internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    _this->_impl_.red_ = from._impl_.red_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = from._internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    _this->_impl_.green_ = from._impl_.green_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = from._internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    _this->_impl_.blue_ = from._impl_.blue_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Color::InternalSwap(Color* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_)
      + sizeof(Color::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_)>(
          reinterpret_cast<char*>(&_impl_.alpha_),
          reinterpret_cast<char*>(&other->_impl_.alpha_));
}

::google::protobuf::Metadata Color::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace google
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_google_2ftype_2fcolor_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
