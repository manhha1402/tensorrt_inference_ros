// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: api/v1/error.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fv1_2ferror_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fv1_2ferror_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fv1_2ferror_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fv1_2ferror_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_api_2fv1_2ferror_2eproto;
namespace api {
namespace v1 {
class InUseByEntityError;
struct InUseByEntityErrorDefaultTypeInternal;
extern InUseByEntityErrorDefaultTypeInternal _InUseByEntityError_default_instance_;
class MustBeUniqueError;
struct MustBeUniqueErrorDefaultTypeInternal;
extern MustBeUniqueErrorDefaultTypeInternal _MustBeUniqueError_default_instance_;
class RequiredArgumentMissingError;
struct RequiredArgumentMissingErrorDefaultTypeInternal;
extern RequiredArgumentMissingErrorDefaultTypeInternal _RequiredArgumentMissingError_default_instance_;
}  // namespace v1
}  // namespace api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace api {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class RequiredArgumentMissingError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:api.v1.RequiredArgumentMissingError) */ {
 public:
  inline RequiredArgumentMissingError() : RequiredArgumentMissingError(nullptr) {}
  ~RequiredArgumentMissingError() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequiredArgumentMissingError(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequiredArgumentMissingError(const RequiredArgumentMissingError& from) : RequiredArgumentMissingError(nullptr, from) {}
  inline RequiredArgumentMissingError(RequiredArgumentMissingError&& from) noexcept
      : RequiredArgumentMissingError(nullptr, std::move(from)) {}
  inline RequiredArgumentMissingError& operator=(const RequiredArgumentMissingError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredArgumentMissingError& operator=(RequiredArgumentMissingError&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequiredArgumentMissingError& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequiredArgumentMissingError* internal_default_instance() {
    return reinterpret_cast<const RequiredArgumentMissingError*>(
        &_RequiredArgumentMissingError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RequiredArgumentMissingError& a, RequiredArgumentMissingError& b) { a.Swap(&b); }
  inline void Swap(RequiredArgumentMissingError* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredArgumentMissingError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequiredArgumentMissingError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RequiredArgumentMissingError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequiredArgumentMissingError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequiredArgumentMissingError& from) { RequiredArgumentMissingError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequiredArgumentMissingError* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "api.v1.RequiredArgumentMissingError"; }

 protected:
  explicit RequiredArgumentMissingError(::google::protobuf::Arena* arena);
  RequiredArgumentMissingError(::google::protobuf::Arena* arena, const RequiredArgumentMissingError& from);
  RequiredArgumentMissingError(::google::protobuf::Arena* arena, RequiredArgumentMissingError&& from) noexcept
      : RequiredArgumentMissingError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArgumentNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string argumentName = 1 [json_name = "argumentName"];
  void clear_argumentname() ;
  const std::string& argumentname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_argumentname(Arg_&& arg, Args_... args);
  std::string* mutable_argumentname();
  PROTOBUF_NODISCARD std::string* release_argumentname();
  void set_allocated_argumentname(std::string* value);

  private:
  const std::string& _internal_argumentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_argumentname(
      const std::string& value);
  std::string* _internal_mutable_argumentname();

  public:
  // string message = 2 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RequiredArgumentMissingError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RequiredArgumentMissingError_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequiredArgumentMissingError& from_msg);
    ::google::protobuf::internal::ArenaStringPtr argumentname_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fv1_2ferror_2eproto;
};
// -------------------------------------------------------------------

class MustBeUniqueError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:api.v1.MustBeUniqueError) */ {
 public:
  inline MustBeUniqueError() : MustBeUniqueError(nullptr) {}
  ~MustBeUniqueError() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MustBeUniqueError(
      ::google::protobuf::internal::ConstantInitialized);

  inline MustBeUniqueError(const MustBeUniqueError& from) : MustBeUniqueError(nullptr, from) {}
  inline MustBeUniqueError(MustBeUniqueError&& from) noexcept
      : MustBeUniqueError(nullptr, std::move(from)) {}
  inline MustBeUniqueError& operator=(const MustBeUniqueError& from) {
    CopyFrom(from);
    return *this;
  }
  inline MustBeUniqueError& operator=(MustBeUniqueError&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MustBeUniqueError& default_instance() {
    return *internal_default_instance();
  }
  static inline const MustBeUniqueError* internal_default_instance() {
    return reinterpret_cast<const MustBeUniqueError*>(
        &_MustBeUniqueError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MustBeUniqueError& a, MustBeUniqueError& b) { a.Swap(&b); }
  inline void Swap(MustBeUniqueError* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MustBeUniqueError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MustBeUniqueError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MustBeUniqueError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MustBeUniqueError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MustBeUniqueError& from) { MustBeUniqueError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MustBeUniqueError* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "api.v1.MustBeUniqueError"; }

 protected:
  explicit MustBeUniqueError(::google::protobuf::Arena* arena);
  MustBeUniqueError(::google::protobuf::Arena* arena, const MustBeUniqueError& from);
  MustBeUniqueError(::google::protobuf::Arena* arena, MustBeUniqueError&& from) noexcept
      : MustBeUniqueError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropertyNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string propertyName = 1 [json_name = "propertyName"];
  void clear_propertyname() ;
  const std::string& propertyname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_propertyname(Arg_&& arg, Args_... args);
  std::string* mutable_propertyname();
  PROTOBUF_NODISCARD std::string* release_propertyname();
  void set_allocated_propertyname(std::string* value);

  private:
  const std::string& _internal_propertyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_propertyname(
      const std::string& value);
  std::string* _internal_mutable_propertyname();

  public:
  // string message = 2 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.MustBeUniqueError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MustBeUniqueError_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MustBeUniqueError& from_msg);
    ::google::protobuf::internal::ArenaStringPtr propertyname_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fv1_2ferror_2eproto;
};
// -------------------------------------------------------------------

class InUseByEntityError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:api.v1.InUseByEntityError) */ {
 public:
  inline InUseByEntityError() : InUseByEntityError(nullptr) {}
  ~InUseByEntityError() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InUseByEntityError(
      ::google::protobuf::internal::ConstantInitialized);

  inline InUseByEntityError(const InUseByEntityError& from) : InUseByEntityError(nullptr, from) {}
  inline InUseByEntityError(InUseByEntityError&& from) noexcept
      : InUseByEntityError(nullptr, std::move(from)) {}
  inline InUseByEntityError& operator=(const InUseByEntityError& from) {
    CopyFrom(from);
    return *this;
  }
  inline InUseByEntityError& operator=(InUseByEntityError&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InUseByEntityError& default_instance() {
    return *internal_default_instance();
  }
  static inline const InUseByEntityError* internal_default_instance() {
    return reinterpret_cast<const InUseByEntityError*>(
        &_InUseByEntityError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(InUseByEntityError& a, InUseByEntityError& b) { a.Swap(&b); }
  inline void Swap(InUseByEntityError* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InUseByEntityError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InUseByEntityError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<InUseByEntityError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InUseByEntityError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InUseByEntityError& from) { InUseByEntityError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InUseByEntityError* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "api.v1.InUseByEntityError"; }

 protected:
  explicit InUseByEntityError(::google::protobuf::Arena* arena);
  InUseByEntityError(::google::protobuf::Arena* arena, const InUseByEntityError& from);
  InUseByEntityError(::google::protobuf::Arena* arena, InUseByEntityError&& from) noexcept
      : InUseByEntityError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityTypeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string entityType = 1 [json_name = "entityType"];
  void clear_entitytype() ;
  const std::string& entitytype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entitytype(Arg_&& arg, Args_... args);
  std::string* mutable_entitytype();
  PROTOBUF_NODISCARD std::string* release_entitytype();
  void set_allocated_entitytype(std::string* value);

  private:
  const std::string& _internal_entitytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitytype(
      const std::string& value);
  std::string* _internal_mutable_entitytype();

  public:
  // string message = 2 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.InUseByEntityError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_InUseByEntityError_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InUseByEntityError& from_msg);
    ::google::protobuf::internal::ArenaStringPtr entitytype_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fv1_2ferror_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InUseByEntityError

// string entityType = 1 [json_name = "entityType"];
inline void InUseByEntityError::clear_entitytype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entitytype_.ClearToEmpty();
}
inline const std::string& InUseByEntityError::entitytype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.InUseByEntityError.entityType)
  return _internal_entitytype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InUseByEntityError::set_entitytype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entitytype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.InUseByEntityError.entityType)
}
inline std::string* InUseByEntityError::mutable_entitytype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entitytype();
  // @@protoc_insertion_point(field_mutable:api.v1.InUseByEntityError.entityType)
  return _s;
}
inline const std::string& InUseByEntityError::_internal_entitytype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entitytype_.Get();
}
inline void InUseByEntityError::_internal_set_entitytype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entitytype_.Set(value, GetArena());
}
inline std::string* InUseByEntityError::_internal_mutable_entitytype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entitytype_.Mutable( GetArena());
}
inline std::string* InUseByEntityError::release_entitytype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.InUseByEntityError.entityType)
  return _impl_.entitytype_.Release();
}
inline void InUseByEntityError::set_allocated_entitytype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entitytype_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entitytype_.IsDefault()) {
          _impl_.entitytype_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.InUseByEntityError.entityType)
}

// string message = 2 [json_name = "message"];
inline void InUseByEntityError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& InUseByEntityError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.InUseByEntityError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InUseByEntityError::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.InUseByEntityError.message)
}
inline std::string* InUseByEntityError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:api.v1.InUseByEntityError.message)
  return _s;
}
inline const std::string& InUseByEntityError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void InUseByEntityError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* InUseByEntityError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* InUseByEntityError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.InUseByEntityError.message)
  return _impl_.message_.Release();
}
inline void InUseByEntityError::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.InUseByEntityError.message)
}

// -------------------------------------------------------------------

// MustBeUniqueError

// string propertyName = 1 [json_name = "propertyName"];
inline void MustBeUniqueError::clear_propertyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propertyname_.ClearToEmpty();
}
inline const std::string& MustBeUniqueError::propertyname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.MustBeUniqueError.propertyName)
  return _internal_propertyname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MustBeUniqueError::set_propertyname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propertyname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.MustBeUniqueError.propertyName)
}
inline std::string* MustBeUniqueError::mutable_propertyname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_propertyname();
  // @@protoc_insertion_point(field_mutable:api.v1.MustBeUniqueError.propertyName)
  return _s;
}
inline const std::string& MustBeUniqueError::_internal_propertyname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.propertyname_.Get();
}
inline void MustBeUniqueError::_internal_set_propertyname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propertyname_.Set(value, GetArena());
}
inline std::string* MustBeUniqueError::_internal_mutable_propertyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.propertyname_.Mutable( GetArena());
}
inline std::string* MustBeUniqueError::release_propertyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.MustBeUniqueError.propertyName)
  return _impl_.propertyname_.Release();
}
inline void MustBeUniqueError::set_allocated_propertyname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.propertyname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.propertyname_.IsDefault()) {
          _impl_.propertyname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.MustBeUniqueError.propertyName)
}

// string message = 2 [json_name = "message"];
inline void MustBeUniqueError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MustBeUniqueError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.MustBeUniqueError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MustBeUniqueError::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.MustBeUniqueError.message)
}
inline std::string* MustBeUniqueError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:api.v1.MustBeUniqueError.message)
  return _s;
}
inline const std::string& MustBeUniqueError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void MustBeUniqueError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MustBeUniqueError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MustBeUniqueError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.MustBeUniqueError.message)
  return _impl_.message_.Release();
}
inline void MustBeUniqueError::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.MustBeUniqueError.message)
}

// -------------------------------------------------------------------

// RequiredArgumentMissingError

// string argumentName = 1 [json_name = "argumentName"];
inline void RequiredArgumentMissingError::clear_argumentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.argumentname_.ClearToEmpty();
}
inline const std::string& RequiredArgumentMissingError::argumentname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.RequiredArgumentMissingError.argumentName)
  return _internal_argumentname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequiredArgumentMissingError::set_argumentname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.argumentname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.RequiredArgumentMissingError.argumentName)
}
inline std::string* RequiredArgumentMissingError::mutable_argumentname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_argumentname();
  // @@protoc_insertion_point(field_mutable:api.v1.RequiredArgumentMissingError.argumentName)
  return _s;
}
inline const std::string& RequiredArgumentMissingError::_internal_argumentname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.argumentname_.Get();
}
inline void RequiredArgumentMissingError::_internal_set_argumentname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.argumentname_.Set(value, GetArena());
}
inline std::string* RequiredArgumentMissingError::_internal_mutable_argumentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.argumentname_.Mutable( GetArena());
}
inline std::string* RequiredArgumentMissingError::release_argumentname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.RequiredArgumentMissingError.argumentName)
  return _impl_.argumentname_.Release();
}
inline void RequiredArgumentMissingError::set_allocated_argumentname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.argumentname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.argumentname_.IsDefault()) {
          _impl_.argumentname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.RequiredArgumentMissingError.argumentName)
}

// string message = 2 [json_name = "message"];
inline void RequiredArgumentMissingError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RequiredArgumentMissingError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:api.v1.RequiredArgumentMissingError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequiredArgumentMissingError::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:api.v1.RequiredArgumentMissingError.message)
}
inline std::string* RequiredArgumentMissingError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:api.v1.RequiredArgumentMissingError.message)
  return _s;
}
inline const std::string& RequiredArgumentMissingError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RequiredArgumentMissingError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RequiredArgumentMissingError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RequiredArgumentMissingError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:api.v1.RequiredArgumentMissingError.message)
  return _impl_.message_.Release();
}
inline void RequiredArgumentMissingError::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.RequiredArgumentMissingError.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fv1_2ferror_2eproto_2epb_2eh
