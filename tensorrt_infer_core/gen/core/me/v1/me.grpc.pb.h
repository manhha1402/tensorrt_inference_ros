// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/me/v1/me.proto
#ifndef GRPC_core_2fme_2fv1_2fme_2eproto__INCLUDED
#define GRPC_core_2fme_2fv1_2fme_2eproto__INCLUDED

#include "core/me/v1/me.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace core {
namespace me {
namespace v1 {

class MeService final {
 public:
  static constexpr char const* service_full_name() {
    return "core.me.v1.MeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::v1::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> AsyncGet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> PrepareAsyncGet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::core::me::v1::CheckPermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>> AsyncCheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>>(AsyncCheckPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>> PrepareAsyncCheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>>(PrepareAsyncCheckPermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::me::v1::GetPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>> AsyncGetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::core::v1::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> AsyncUpdate(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::core::v1::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> AsyncUpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(AsyncUpdateAvatarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>> PrepareAsyncUpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>>(PrepareAsyncUpdateAvatarRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* AsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>* AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::CheckPermissionResponse>* PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::me::v1::GetPermissionsResponse>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* AsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::User>* PrepareAsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::v1::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> AsyncGet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> PrepareAsyncGet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::core::me::v1::CheckPermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>> AsyncCheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>>(AsyncCheckPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>> PrepareAsyncCheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>>(PrepareAsyncCheckPermissionRaw(context, request, cq));
    }
    ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::me::v1::GetPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>> AsyncGetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::core::v1::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> AsyncUpdate(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::core::v1::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> AsyncUpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(AsyncUpdateAvatarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>> PrepareAsyncUpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::User>>(PrepareAsyncUpdateAvatarRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)>) override;
      void UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* AsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>* AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>* PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* AsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::User>* PrepareAsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAvatar_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response);
    virtual ::grpc::Status CheckPermission(::grpc::ServerContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response);
    virtual ::grpc::Status GetPermissions(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response);
    virtual ::grpc::Status UpdateAvatar(::grpc::ServerContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckPermission() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckPermission(::grpc::ServerContext* context, ::core::me::v1::CheckPermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::me::v1::CheckPermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::core::me::v1::GetPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::core::me::v1::UpdateMeRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAvatar(::grpc::ServerContext* context, ::core::me::v1::UpdateAvatarRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_CheckPermission<WithAsyncMethod_GetPermissions<WithAsyncMethod_Update<WithAsyncMethod_UpdateAvatar<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::core::v1::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::core::v1::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::core::v1::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckPermission() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response) { return this->CheckPermission(context, request, response); }));}
    void SetMessageAllocatorFor_CheckPermission(
        ::grpc::MessageAllocator< ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPermissions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response) { return this->GetPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissions(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::core::me::v1::UpdateMeRequest, ::core::v1::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::core::me::v1::UpdateMeRequest, ::core::v1::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::me::v1::UpdateMeRequest, ::core::v1::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::core::me::v1::UpdateAvatarRequest, ::core::v1::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response) { return this->UpdateAvatar(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAvatar(
        ::grpc::MessageAllocator< ::core::me::v1::UpdateAvatarRequest, ::core::v1::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::me::v1::UpdateAvatarRequest, ::core::v1::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAvatar(
      ::grpc::CallbackServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_CheckPermission<WithCallbackMethod_GetPermissions<WithCallbackMethod_Update<WithCallbackMethod_UpdateAvatar<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckPermission() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckPermission() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAvatar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckPermission() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckPermission(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPermissions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAvatar(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAvatar(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::core::v1::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::core::v1::User>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::core::v1::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckPermission() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse>* streamer) {
                       return this->StreamedCheckPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckPermission(::grpc::ServerContext* /*context*/, const ::core::me::v1::CheckPermissionRequest* /*request*/, ::core::me::v1::CheckPermissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::me::v1::CheckPermissionRequest,::core::me::v1::CheckPermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse>* streamer) {
                       return this->StreamedGetPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::core::me::v1::GetPermissionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::core::me::v1::GetPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::me::v1::UpdateMeRequest, ::core::v1::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::me::v1::UpdateMeRequest, ::core::v1::User>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateMeRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::me::v1::UpdateMeRequest,::core::v1::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAvatar() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::me::v1::UpdateAvatarRequest, ::core::v1::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::me::v1::UpdateAvatarRequest, ::core::v1::User>* streamer) {
                       return this->StreamedUpdateAvatar(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAvatar(::grpc::ServerContext* /*context*/, const ::core::me::v1::UpdateAvatarRequest* /*request*/, ::core::v1::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAvatar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::me::v1::UpdateAvatarRequest,::core::v1::User>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CheckPermission<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_UpdateAvatar<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CheckPermission<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_UpdateAvatar<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace me
}  // namespace core


#endif  // GRPC_core_2fme_2fv1_2fme_2eproto__INCLUDED
