// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/me/v1/me.proto

#include "core/me/v1/me.pb.h"
#include "core/me/v1/me.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core {
namespace me {
namespace v1 {

static const char* MeService_method_names[] = {
  "/core.me.v1.MeService/Get",
  "/core.me.v1.MeService/CheckPermission",
  "/core.me.v1.MeService/GetPermissions",
  "/core.me.v1.MeService/Update",
  "/core.me.v1.MeService/UpdateAvatar",
};

std::unique_ptr< MeService::Stub> MeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MeService::Stub> stub(new MeService::Stub(channel, options));
  return stub;
}

MeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(MeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckPermission_(MeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissions_(MeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(MeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAvatar_(MeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MeService::Stub::Get(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::v1::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void MeService::Stub::async::Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void MeService::Stub::async::Get(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::User, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeService::Stub::CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::core::me::v1::CheckPermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckPermission_, context, request, response);
}

void MeService::Stub::async::CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPermission_, context, request, response, std::move(f));
}

void MeService::Stub::async::CheckPermission(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>* MeService::Stub::PrepareAsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::me::v1::CheckPermissionResponse, ::core::me::v1::CheckPermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckPermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::me::v1::CheckPermissionResponse>* MeService::Stub::AsyncCheckPermissionRaw(::grpc::ClientContext* context, const ::core::me::v1::CheckPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckPermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeService::Stub::GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::core::me::v1::GetPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissions_, context, request, response);
}

void MeService::Stub::async::GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, std::move(f));
}

void MeService::Stub::async::GetPermissions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>* MeService::Stub::PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::me::v1::GetPermissionsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::me::v1::GetPermissionsResponse>* MeService::Stub::AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeService::Stub::Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::core::v1::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::me::v1::UpdateMeRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void MeService::Stub::async::Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::me::v1::UpdateMeRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void MeService::Stub::async::Update(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::User, ::core::me::v1::UpdateMeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateMeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeService::Stub::UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::core::v1::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::me::v1::UpdateAvatarRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAvatar_, context, request, response);
}

void MeService::Stub::async::UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::me::v1::UpdateAvatarRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAvatar_, context, request, response, std::move(f));
}

void MeService::Stub::async::UpdateAvatar(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAvatar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::PrepareAsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::User, ::core::me::v1::UpdateAvatarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAvatar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::User>* MeService::Stub::AsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::core::me::v1::UpdateAvatarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAvatarRaw(context, request, cq);
  result->StartCall();
  return result;
}

MeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeService::Service, ::google::protobuf::Empty, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::core::v1::User* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeService::Service, ::core::me::v1::CheckPermissionRequest, ::core::me::v1::CheckPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::me::v1::CheckPermissionRequest* req,
             ::core::me::v1::CheckPermissionResponse* resp) {
               return service->CheckPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeService::Service, ::google::protobuf::Empty, ::core::me::v1::GetPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::core::me::v1::GetPermissionsResponse* resp) {
               return service->GetPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeService::Service, ::core::me::v1::UpdateMeRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::me::v1::UpdateMeRequest* req,
             ::core::v1::User* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeService::Service, ::core::me::v1::UpdateAvatarRequest, ::core::v1::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::me::v1::UpdateAvatarRequest* req,
             ::core::v1::User* resp) {
               return service->UpdateAvatar(ctx, req, resp);
             }, this)));
}

MeService::Service::~Service() {
}

::grpc::Status MeService::Service::Get(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::core::v1::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeService::Service::CheckPermission(::grpc::ServerContext* context, const ::core::me::v1::CheckPermissionRequest* request, ::core::me::v1::CheckPermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeService::Service::GetPermissions(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::core::me::v1::GetPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeService::Service::Update(::grpc::ServerContext* context, const ::core::me::v1::UpdateMeRequest* request, ::core::v1::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeService::Service::UpdateAvatar(::grpc::ServerContext* context, const ::core::me::v1::UpdateAvatarRequest* request, ::core::v1::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core
}  // namespace me
}  // namespace v1

