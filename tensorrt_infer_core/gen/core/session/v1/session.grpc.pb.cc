// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/session/v1/session.proto

#include "core/session/v1/session.pb.h"
#include "core/session/v1/session.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core {
namespace session {
namespace v1 {

static const char* SessionService_method_names[] = {
  "/core.session.v1.SessionService/GetUserSession",
  "/core.session.v1.SessionService/CreateUserSession",
  "/core.session.v1.SessionService/UpdateUserSession",
  "/core.session.v1.SessionService/DeleteUserSession",
};

std::unique_ptr< SessionService::Stub> SessionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SessionService::Stub> stub(new SessionService::Stub(channel, options));
  return stub;
}

SessionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUserSession_(SessionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateUserSession_(SessionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUserSession_(SessionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUserSession_(SessionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SessionService::Stub::GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::core::session::v1::UserSession* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserSession_, context, request, response);
}

void SessionService::Stub::async::GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::PrepareAsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::session::v1::UserSession, ::core::session::v1::GetUserSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::AsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::core::session::v1::UserSession* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUserSession_, context, request, response);
}

void SessionService::Stub::async::CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUserSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUserSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::PrepareAsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::session::v1::UserSession, ::core::session::v1::CreateUserSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUserSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::AsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUserSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::core::session::v1::UserSession* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUserSession_, context, request, response);
}

void SessionService::Stub::async::UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::PrepareAsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::session::v1::UserSession, ::core::session::v1::UpdateUserSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUserSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* SessionService::Stub::AsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUserSession_, context, request, response);
}

void SessionService::Stub::async::DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUserSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUserSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SessionService::Stub::PrepareAsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::core::session::v1::DeleteUserSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUserSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SessionService::Stub::AsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

SessionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::session::v1::GetUserSessionRequest* req,
             ::core::session::v1::UserSession* resp) {
               return service->GetUserSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::session::v1::CreateUserSessionRequest* req,
             ::core::session::v1::UserSession* resp) {
               return service->CreateUserSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::session::v1::UpdateUserSessionRequest* req,
             ::core::session::v1::UserSession* resp) {
               return service->UpdateUserSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::session::v1::DeleteUserSessionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteUserSession(ctx, req, resp);
             }, this)));
}

SessionService::Service::~Service() {
}

::grpc::Status SessionService::Service::GetUserSession(::grpc::ServerContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::CreateUserSession(::grpc::ServerContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::UpdateUserSession(::grpc::ServerContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::DeleteUserSession(::grpc::ServerContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core
}  // namespace session
}  // namespace v1

