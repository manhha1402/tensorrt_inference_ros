// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/session/v1/session.proto
#ifndef GRPC_core_2fsession_2fv1_2fsession_2eproto__INCLUDED
#define GRPC_core_2fsession_2fv1_2fsession_2eproto__INCLUDED

#include "core/session/v1/session.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace core {
namespace session {
namespace v1 {

class SessionService final {
 public:
  static constexpr char const* service_full_name() {
    return "core.session.v1.SessionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::core::session::v1::UserSession* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> AsyncGetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(AsyncGetUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> PrepareAsyncGetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(PrepareAsyncGetUserSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::core::session::v1::UserSession* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> AsyncCreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(AsyncCreateUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> PrepareAsyncCreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(PrepareAsyncCreateUserSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::core::session::v1::UserSession* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> AsyncUpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(AsyncUpdateUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>> PrepareAsyncUpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>>(PrepareAsyncUpdateUserSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteUserSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* AsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* PrepareAsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* AsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* PrepareAsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* AsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::session::v1::UserSession>* PrepareAsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::core::session::v1::UserSession* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> AsyncGetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(AsyncGetUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> PrepareAsyncGetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(PrepareAsyncGetUserSessionRaw(context, request, cq));
    }
    ::grpc::Status CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::core::session::v1::UserSession* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> AsyncCreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(AsyncCreateUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> PrepareAsyncCreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(PrepareAsyncCreateUserSessionRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::core::session::v1::UserSession* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> AsyncUpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(AsyncUpdateUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>> PrepareAsyncUpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>>(PrepareAsyncUpdateUserSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteUserSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteUserSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) override;
      void GetUserSession(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) override;
      void CreateUserSession(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserSession(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteUserSession(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* AsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* PrepareAsyncGetUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::GetUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* AsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* PrepareAsyncCreateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::CreateUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* AsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::session::v1::UserSession>* PrepareAsyncUpdateUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::UpdateUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteUserSessionRaw(::grpc::ClientContext* context, const ::core::session::v1::DeleteUserSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserSession_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUserSession_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUserSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetUserSession(::grpc::ServerContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response);
    virtual ::grpc::Status CreateUserSession(::grpc::ServerContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response);
    virtual ::grpc::Status UpdateUserSession(::grpc::ServerContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response);
    virtual ::grpc::Status DeleteUserSession(::grpc::ServerContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserSession(::grpc::ServerContext* context, ::core::session::v1::GetUserSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::session::v1::UserSession>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUserSession(::grpc::ServerContext* context, ::core::session::v1::CreateUserSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::session::v1::UserSession>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserSession(::grpc::ServerContext* context, ::core::session::v1::UpdateUserSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::session::v1::UserSession>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserSession(::grpc::ServerContext* context, ::core::session::v1::DeleteUserSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUserSession<WithAsyncMethod_CreateUserSession<WithAsyncMethod_UpdateUserSession<WithAsyncMethod_DeleteUserSession<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::session::v1::GetUserSessionRequest* request, ::core::session::v1::UserSession* response) { return this->GetUserSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserSession(
        ::grpc::MessageAllocator< ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::session::v1::CreateUserSessionRequest* request, ::core::session::v1::UserSession* response) { return this->CreateUserSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateUserSession(
        ::grpc::MessageAllocator< ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::session::v1::UpdateUserSessionRequest* request, ::core::session::v1::UserSession* response) { return this->UpdateUserSession(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserSession(
        ::grpc::MessageAllocator< ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::session::v1::DeleteUserSessionRequest* request, ::google::protobuf::Empty* response) { return this->DeleteUserSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUserSession(
        ::grpc::MessageAllocator< ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetUserSession<WithCallbackMethod_CreateUserSession<WithCallbackMethod_UpdateUserSession<WithCallbackMethod_DeleteUserSession<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUserSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateUserSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUserSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUserSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::session::v1::GetUserSessionRequest, ::core::session::v1::UserSession>* streamer) {
                       return this->StreamedGetUserSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::GetUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::session::v1::GetUserSessionRequest,::core::session::v1::UserSession>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUserSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::session::v1::CreateUserSessionRequest, ::core::session::v1::UserSession>* streamer) {
                       return this->StreamedCreateUserSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::CreateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUserSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::session::v1::CreateUserSessionRequest,::core::session::v1::UserSession>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::session::v1::UpdateUserSessionRequest, ::core::session::v1::UserSession>* streamer) {
                       return this->StreamedUpdateUserSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::UpdateUserSessionRequest* /*request*/, ::core::session::v1::UserSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::session::v1::UpdateUserSessionRequest,::core::session::v1::UserSession>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUserSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUserSession() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::session::v1::DeleteUserSessionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteUserSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUserSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUserSession(::grpc::ServerContext* /*context*/, const ::core::session::v1::DeleteUserSessionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUserSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::session::v1::DeleteUserSessionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUserSession<WithStreamedUnaryMethod_CreateUserSession<WithStreamedUnaryMethod_UpdateUserSession<WithStreamedUnaryMethod_DeleteUserSession<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUserSession<WithStreamedUnaryMethod_CreateUserSession<WithStreamedUnaryMethod_UpdateUserSession<WithStreamedUnaryMethod_DeleteUserSession<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace session
}  // namespace core


#endif  // GRPC_core_2fsession_2fv1_2fsession_2eproto__INCLUDED
