// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/v1/employee.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2femployee_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2femployee_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "api/v1/base.pb.h"
#include "api/v1/generators.pb.h"
#include "api/v1/permissions.pb.h"
#include "buf/validate/validate.pb.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_core_2fv1_2femployee_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fv1_2femployee_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_core_2fv1_2femployee_2eproto;
namespace core {
namespace v1 {
class Employee;
struct EmployeeDefaultTypeInternal;
extern EmployeeDefaultTypeInternal _Employee_default_instance_;
class GetMyEmployeeRecordResponse;
struct GetMyEmployeeRecordResponseDefaultTypeInternal;
extern GetMyEmployeeRecordResponseDefaultTypeInternal _GetMyEmployeeRecordResponse_default_instance_;
class ListEmployeeResponse;
struct ListEmployeeResponseDefaultTypeInternal;
extern ListEmployeeResponseDefaultTypeInternal _ListEmployeeResponse_default_instance_;
class SaveEmployeeRequest;
struct SaveEmployeeRequestDefaultTypeInternal;
extern SaveEmployeeRequestDefaultTypeInternal _SaveEmployeeRequest_default_instance_;
}  // namespace v1
}  // namespace core
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace core {
namespace v1 {
enum Gender : int {
  EG_UNKNOWN = 0,
  EG_FEMALE = 1,
  EG_MALE = 2,
  EG_OTHER = 3,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Gender_IsValid(int value);
extern const uint32_t Gender_internal_data_[];
constexpr Gender Gender_MIN = static_cast<Gender>(0);
constexpr Gender Gender_MAX = static_cast<Gender>(3);
constexpr int Gender_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Gender_descriptor();
template <typename T>
const std::string& Gender_Name(T value) {
  static_assert(std::is_same<T, Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Gender_Name(static_cast<Gender>(value));
}
template <>
inline const std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gender_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Gender_Parse(absl::string_view name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
      Gender_descriptor(), name, value);
}
enum JobStatus : int {
  JS_UNKNOWN = 0,
  JS_EMPLOYED = 1,
  JS_UNEMPLOYED = 2,
  JS_RETIRED = 3,
  JS_PARENTAL_LEAVE = 4,
  JobStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JobStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JobStatus_IsValid(int value);
extern const uint32_t JobStatus_internal_data_[];
constexpr JobStatus JobStatus_MIN = static_cast<JobStatus>(0);
constexpr JobStatus JobStatus_MAX = static_cast<JobStatus>(4);
constexpr int JobStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JobStatus_descriptor();
template <typename T>
const std::string& JobStatus_Name(T value) {
  static_assert(std::is_same<T, JobStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JobStatus_Name().");
  return JobStatus_Name(static_cast<JobStatus>(value));
}
template <>
inline const std::string& JobStatus_Name(JobStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JobStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JobStatus_Parse(absl::string_view name, JobStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobStatus>(
      JobStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SaveEmployeeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.SaveEmployeeRequest) */ {
 public:
  inline SaveEmployeeRequest() : SaveEmployeeRequest(nullptr) {}
  ~SaveEmployeeRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaveEmployeeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaveEmployeeRequest(const SaveEmployeeRequest& from) : SaveEmployeeRequest(nullptr, from) {}
  inline SaveEmployeeRequest(SaveEmployeeRequest&& from) noexcept
      : SaveEmployeeRequest(nullptr, std::move(from)) {}
  inline SaveEmployeeRequest& operator=(const SaveEmployeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveEmployeeRequest& operator=(SaveEmployeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveEmployeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveEmployeeRequest* internal_default_instance() {
    return reinterpret_cast<const SaveEmployeeRequest*>(
        &_SaveEmployeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SaveEmployeeRequest& a, SaveEmployeeRequest& b) { a.Swap(&b); }
  inline void Swap(SaveEmployeeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveEmployeeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveEmployeeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SaveEmployeeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SaveEmployeeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SaveEmployeeRequest& from) { SaveEmployeeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SaveEmployeeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.SaveEmployeeRequest"; }

 protected:
  explicit SaveEmployeeRequest(::google::protobuf::Arena* arena);
  SaveEmployeeRequest(::google::protobuf::Arena* arena, const SaveEmployeeRequest& from);
  SaveEmployeeRequest(::google::protobuf::Arena* arena, SaveEmployeeRequest&& from) noexcept
      : SaveEmployeeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kCodeFieldNumber = 4,
    kFullNameFieldNumber = 5,
    kDepartmentIdFieldNumber = 7,
    kPositionIdFieldNumber = 9,
    kFactoryIdFieldNumber = 11,
    kSocialInsuranceNumberFieldNumber = 13,
    kSocialInsuranceBookNumberFieldNumber = 14,
    kSocialInsuranceIssueCityIdFieldNumber = 16,
    kBankIdFieldNumber = 19,
    kBankAccountNumberFieldNumber = 21,
    kBankAccountHolderNameFieldNumber = 22,
    kBankCityIdFieldNumber = 23,
    kHealthInsuranceNumberFieldNumber = 25,
    kMedicalRegisterPlaceFieldNumber = 28,
    kMedicalRegisterCityIdFieldNumber = 29,
    kPhoneNumberFieldNumber = 31,
    kResidenceCityIdFieldNumber = 32,
    kResidenceDistrictIdFieldNumber = 34,
    kResidenceCommuneIdFieldNumber = 36,
    kResidenceAddressFieldNumber = 38,
    kNationalityCountryIdFieldNumber = 39,
    kEthnicityIdFieldNumber = 40,
    kBirthCityIdFieldNumber = 42,
    kBirthDistrictIdFieldNumber = 44,
    kBirthCommuneIdFieldNumber = 46,
    kBirthAddressFieldNumber = 48,
    kGuardianFieldNumber = 49,
    kIdentificationCardNumberFieldNumber = 50,
    kIdentificationCardIssuePlaceFieldNumber = 52,
    kSubjectFieldNumber = 53,
    kEmailFieldNumber = 54,
    kEducationalLevelFieldNumber = 55,
    kShiftIdFieldNumber = 74,
    kImageFieldNumber = 76,
    kDateOfBirthFieldNumber = 6,
    kSocialInsuranceIssueDateFieldNumber = 15,
    kHealthInsuranceIssueDateFieldNumber = 26,
    kHealthInsuranceExpireDateFieldNumber = 27,
    kGenderFieldNumber = 41,
    kIsInSocialInsuranceFieldNumber = 18,
    kIsIncludeApprenticeIncomeFieldNumber = 59,
    kIsIncludeExcessIncomeFieldNumber = 60,
    kIdentificationCardIssueDateFieldNumber = 51,
    kJobStatusFieldNumber = 56,
    kContributionRatePercentageFieldNumber = 58,
    kPositionStartDateFieldNumber = 61,
    kPositionEndDateFieldNumber = 62,
    kDateOfJoiningFactoryFieldNumber = 63,
    kAvailableAnnualDayOffsFieldNumber = 64,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2 [json_name = "userId"];
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // optional string code = 4 [json_name = "code"];
  bool has_code() const;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string fullName = 5 [json_name = "fullName"];
  void clear_fullname() ;
  const std::string& fullname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* value);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // string departmentId = 7 [json_name = "departmentId"];
  void clear_departmentid() ;
  const std::string& departmentid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_departmentid(Arg_&& arg, Args_... args);
  std::string* mutable_departmentid();
  PROTOBUF_NODISCARD std::string* release_departmentid();
  void set_allocated_departmentid(std::string* value);

  private:
  const std::string& _internal_departmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departmentid(
      const std::string& value);
  std::string* _internal_mutable_departmentid();

  public:
  // string positionId = 9 [json_name = "positionId"];
  void clear_positionid() ;
  const std::string& positionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positionid(Arg_&& arg, Args_... args);
  std::string* mutable_positionid();
  PROTOBUF_NODISCARD std::string* release_positionid();
  void set_allocated_positionid(std::string* value);

  private:
  const std::string& _internal_positionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positionid(
      const std::string& value);
  std::string* _internal_mutable_positionid();

  public:
  // string factoryId = 11 [json_name = "factoryId"];
  void clear_factoryid() ;
  const std::string& factoryid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_factoryid(Arg_&& arg, Args_... args);
  std::string* mutable_factoryid();
  PROTOBUF_NODISCARD std::string* release_factoryid();
  void set_allocated_factoryid(std::string* value);

  private:
  const std::string& _internal_factoryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factoryid(
      const std::string& value);
  std::string* _internal_mutable_factoryid();

  public:
  // optional string socialInsuranceNumber = 13 [json_name = "socialInsuranceNumber"];
  bool has_socialinsurancenumber() const;
  void clear_socialinsurancenumber() ;
  const std::string& socialinsurancenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsurancenumber(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsurancenumber();
  PROTOBUF_NODISCARD std::string* release_socialinsurancenumber();
  void set_allocated_socialinsurancenumber(std::string* value);

  private:
  const std::string& _internal_socialinsurancenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsurancenumber(
      const std::string& value);
  std::string* _internal_mutable_socialinsurancenumber();

  public:
  // optional string socialInsuranceBookNumber = 14 [json_name = "socialInsuranceBookNumber"];
  bool has_socialinsurancebooknumber() const;
  void clear_socialinsurancebooknumber() ;
  const std::string& socialinsurancebooknumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsurancebooknumber(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsurancebooknumber();
  PROTOBUF_NODISCARD std::string* release_socialinsurancebooknumber();
  void set_allocated_socialinsurancebooknumber(std::string* value);

  private:
  const std::string& _internal_socialinsurancebooknumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsurancebooknumber(
      const std::string& value);
  std::string* _internal_mutable_socialinsurancebooknumber();

  public:
  // optional string socialInsuranceIssueCityId = 16 [json_name = "socialInsuranceIssueCityId"];
  bool has_socialinsuranceissuecityid() const;
  void clear_socialinsuranceissuecityid() ;
  const std::string& socialinsuranceissuecityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsuranceissuecityid(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsuranceissuecityid();
  PROTOBUF_NODISCARD std::string* release_socialinsuranceissuecityid();
  void set_allocated_socialinsuranceissuecityid(std::string* value);

  private:
  const std::string& _internal_socialinsuranceissuecityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsuranceissuecityid(
      const std::string& value);
  std::string* _internal_mutable_socialinsuranceissuecityid();

  public:
  // optional string bankId = 19 [json_name = "bankId"];
  bool has_bankid() const;
  void clear_bankid() ;
  const std::string& bankid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankid(Arg_&& arg, Args_... args);
  std::string* mutable_bankid();
  PROTOBUF_NODISCARD std::string* release_bankid();
  void set_allocated_bankid(std::string* value);

  private:
  const std::string& _internal_bankid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankid(
      const std::string& value);
  std::string* _internal_mutable_bankid();

  public:
  // optional string bankAccountNumber = 21 [json_name = "bankAccountNumber"];
  bool has_bankaccountnumber() const;
  void clear_bankaccountnumber() ;
  const std::string& bankaccountnumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankaccountnumber(Arg_&& arg, Args_... args);
  std::string* mutable_bankaccountnumber();
  PROTOBUF_NODISCARD std::string* release_bankaccountnumber();
  void set_allocated_bankaccountnumber(std::string* value);

  private:
  const std::string& _internal_bankaccountnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankaccountnumber(
      const std::string& value);
  std::string* _internal_mutable_bankaccountnumber();

  public:
  // optional string bankAccountHolderName = 22 [json_name = "bankAccountHolderName"];
  bool has_bankaccountholdername() const;
  void clear_bankaccountholdername() ;
  const std::string& bankaccountholdername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankaccountholdername(Arg_&& arg, Args_... args);
  std::string* mutable_bankaccountholdername();
  PROTOBUF_NODISCARD std::string* release_bankaccountholdername();
  void set_allocated_bankaccountholdername(std::string* value);

  private:
  const std::string& _internal_bankaccountholdername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankaccountholdername(
      const std::string& value);
  std::string* _internal_mutable_bankaccountholdername();

  public:
  // optional string bankCityId = 23 [json_name = "bankCityId"];
  bool has_bankcityid() const;
  void clear_bankcityid() ;
  const std::string& bankcityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankcityid(Arg_&& arg, Args_... args);
  std::string* mutable_bankcityid();
  PROTOBUF_NODISCARD std::string* release_bankcityid();
  void set_allocated_bankcityid(std::string* value);

  private:
  const std::string& _internal_bankcityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankcityid(
      const std::string& value);
  std::string* _internal_mutable_bankcityid();

  public:
  // optional string healthInsuranceNumber = 25 [json_name = "healthInsuranceNumber"];
  bool has_healthinsurancenumber() const;
  void clear_healthinsurancenumber() ;
  const std::string& healthinsurancenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_healthinsurancenumber(Arg_&& arg, Args_... args);
  std::string* mutable_healthinsurancenumber();
  PROTOBUF_NODISCARD std::string* release_healthinsurancenumber();
  void set_allocated_healthinsurancenumber(std::string* value);

  private:
  const std::string& _internal_healthinsurancenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_healthinsurancenumber(
      const std::string& value);
  std::string* _internal_mutable_healthinsurancenumber();

  public:
  // optional string medicalRegisterPlace = 28 [json_name = "medicalRegisterPlace"];
  bool has_medicalregisterplace() const;
  void clear_medicalregisterplace() ;
  const std::string& medicalregisterplace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medicalregisterplace(Arg_&& arg, Args_... args);
  std::string* mutable_medicalregisterplace();
  PROTOBUF_NODISCARD std::string* release_medicalregisterplace();
  void set_allocated_medicalregisterplace(std::string* value);

  private:
  const std::string& _internal_medicalregisterplace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medicalregisterplace(
      const std::string& value);
  std::string* _internal_mutable_medicalregisterplace();

  public:
  // optional string medicalRegisterCityId = 29 [json_name = "medicalRegisterCityId"];
  bool has_medicalregistercityid() const;
  void clear_medicalregistercityid() ;
  const std::string& medicalregistercityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medicalregistercityid(Arg_&& arg, Args_... args);
  std::string* mutable_medicalregistercityid();
  PROTOBUF_NODISCARD std::string* release_medicalregistercityid();
  void set_allocated_medicalregistercityid(std::string* value);

  private:
  const std::string& _internal_medicalregistercityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medicalregistercityid(
      const std::string& value);
  std::string* _internal_mutable_medicalregistercityid();

  public:
  // string phoneNumber = 31 [json_name = "phoneNumber"];
  void clear_phonenumber() ;
  const std::string& phonenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenumber(Arg_&& arg, Args_... args);
  std::string* mutable_phonenumber();
  PROTOBUF_NODISCARD std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* value);

  private:
  const std::string& _internal_phonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenumber(
      const std::string& value);
  std::string* _internal_mutable_phonenumber();

  public:
  // string residenceCityId = 32 [json_name = "residenceCityId"];
  void clear_residencecityid() ;
  const std::string& residencecityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecityid(Arg_&& arg, Args_... args);
  std::string* mutable_residencecityid();
  PROTOBUF_NODISCARD std::string* release_residencecityid();
  void set_allocated_residencecityid(std::string* value);

  private:
  const std::string& _internal_residencecityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecityid(
      const std::string& value);
  std::string* _internal_mutable_residencecityid();

  public:
  // string residenceDistrictId = 34 [json_name = "residenceDistrictId"];
  void clear_residencedistrictid() ;
  const std::string& residencedistrictid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencedistrictid(Arg_&& arg, Args_... args);
  std::string* mutable_residencedistrictid();
  PROTOBUF_NODISCARD std::string* release_residencedistrictid();
  void set_allocated_residencedistrictid(std::string* value);

  private:
  const std::string& _internal_residencedistrictid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencedistrictid(
      const std::string& value);
  std::string* _internal_mutable_residencedistrictid();

  public:
  // string residenceCommuneId = 36 [json_name = "residenceCommuneId"];
  void clear_residencecommuneid() ;
  const std::string& residencecommuneid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecommuneid(Arg_&& arg, Args_... args);
  std::string* mutable_residencecommuneid();
  PROTOBUF_NODISCARD std::string* release_residencecommuneid();
  void set_allocated_residencecommuneid(std::string* value);

  private:
  const std::string& _internal_residencecommuneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecommuneid(
      const std::string& value);
  std::string* _internal_mutable_residencecommuneid();

  public:
  // string residenceAddress = 38 [json_name = "residenceAddress"];
  void clear_residenceaddress() ;
  const std::string& residenceaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residenceaddress(Arg_&& arg, Args_... args);
  std::string* mutable_residenceaddress();
  PROTOBUF_NODISCARD std::string* release_residenceaddress();
  void set_allocated_residenceaddress(std::string* value);

  private:
  const std::string& _internal_residenceaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residenceaddress(
      const std::string& value);
  std::string* _internal_mutable_residenceaddress();

  public:
  // string nationalityCountryId = 39 [json_name = "nationalityCountryId"];
  void clear_nationalitycountryid() ;
  const std::string& nationalitycountryid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nationalitycountryid(Arg_&& arg, Args_... args);
  std::string* mutable_nationalitycountryid();
  PROTOBUF_NODISCARD std::string* release_nationalitycountryid();
  void set_allocated_nationalitycountryid(std::string* value);

  private:
  const std::string& _internal_nationalitycountryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nationalitycountryid(
      const std::string& value);
  std::string* _internal_mutable_nationalitycountryid();

  public:
  // string ethnicityId = 40 [json_name = "ethnicityId"];
  void clear_ethnicityid() ;
  const std::string& ethnicityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ethnicityid(Arg_&& arg, Args_... args);
  std::string* mutable_ethnicityid();
  PROTOBUF_NODISCARD std::string* release_ethnicityid();
  void set_allocated_ethnicityid(std::string* value);

  private:
  const std::string& _internal_ethnicityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethnicityid(
      const std::string& value);
  std::string* _internal_mutable_ethnicityid();

  public:
  // string birthCityId = 42 [json_name = "birthCityId"];
  void clear_birthcityid() ;
  const std::string& birthcityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcityid(Arg_&& arg, Args_... args);
  std::string* mutable_birthcityid();
  PROTOBUF_NODISCARD std::string* release_birthcityid();
  void set_allocated_birthcityid(std::string* value);

  private:
  const std::string& _internal_birthcityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcityid(
      const std::string& value);
  std::string* _internal_mutable_birthcityid();

  public:
  // string birthDistrictId = 44 [json_name = "birthDistrictId"];
  void clear_birthdistrictid() ;
  const std::string& birthdistrictid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthdistrictid(Arg_&& arg, Args_... args);
  std::string* mutable_birthdistrictid();
  PROTOBUF_NODISCARD std::string* release_birthdistrictid();
  void set_allocated_birthdistrictid(std::string* value);

  private:
  const std::string& _internal_birthdistrictid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthdistrictid(
      const std::string& value);
  std::string* _internal_mutable_birthdistrictid();

  public:
  // string birthCommuneId = 46 [json_name = "birthCommuneId"];
  void clear_birthcommuneid() ;
  const std::string& birthcommuneid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcommuneid(Arg_&& arg, Args_... args);
  std::string* mutable_birthcommuneid();
  PROTOBUF_NODISCARD std::string* release_birthcommuneid();
  void set_allocated_birthcommuneid(std::string* value);

  private:
  const std::string& _internal_birthcommuneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcommuneid(
      const std::string& value);
  std::string* _internal_mutable_birthcommuneid();

  public:
  // string birthAddress = 48 [json_name = "birthAddress"];
  void clear_birthaddress() ;
  const std::string& birthaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthaddress(Arg_&& arg, Args_... args);
  std::string* mutable_birthaddress();
  PROTOBUF_NODISCARD std::string* release_birthaddress();
  void set_allocated_birthaddress(std::string* value);

  private:
  const std::string& _internal_birthaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthaddress(
      const std::string& value);
  std::string* _internal_mutable_birthaddress();

  public:
  // optional string guardian = 49 [json_name = "guardian"];
  bool has_guardian() const;
  void clear_guardian() ;
  const std::string& guardian() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_guardian(Arg_&& arg, Args_... args);
  std::string* mutable_guardian();
  PROTOBUF_NODISCARD std::string* release_guardian();
  void set_allocated_guardian(std::string* value);

  private:
  const std::string& _internal_guardian() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guardian(
      const std::string& value);
  std::string* _internal_mutable_guardian();

  public:
  // string identificationCardNumber = 50 [json_name = "identificationCardNumber"];
  void clear_identificationcardnumber() ;
  const std::string& identificationcardnumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identificationcardnumber(Arg_&& arg, Args_... args);
  std::string* mutable_identificationcardnumber();
  PROTOBUF_NODISCARD std::string* release_identificationcardnumber();
  void set_allocated_identificationcardnumber(std::string* value);

  private:
  const std::string& _internal_identificationcardnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identificationcardnumber(
      const std::string& value);
  std::string* _internal_mutable_identificationcardnumber();

  public:
  // string identificationCardIssuePlace = 52 [json_name = "identificationCardIssuePlace"];
  void clear_identificationcardissueplace() ;
  const std::string& identificationcardissueplace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identificationcardissueplace(Arg_&& arg, Args_... args);
  std::string* mutable_identificationcardissueplace();
  PROTOBUF_NODISCARD std::string* release_identificationcardissueplace();
  void set_allocated_identificationcardissueplace(std::string* value);

  private:
  const std::string& _internal_identificationcardissueplace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identificationcardissueplace(
      const std::string& value);
  std::string* _internal_mutable_identificationcardissueplace();

  public:
  // optional string subject = 53 [json_name = "subject"];
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // optional string email = 54 [json_name = "email"];
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string educationalLevel = 55 [json_name = "educationalLevel"];
  bool has_educationallevel() const;
  void clear_educationallevel() ;
  const std::string& educationallevel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_educationallevel(Arg_&& arg, Args_... args);
  std::string* mutable_educationallevel();
  PROTOBUF_NODISCARD std::string* release_educationallevel();
  void set_allocated_educationallevel(std::string* value);

  private:
  const std::string& _internal_educationallevel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_educationallevel(
      const std::string& value);
  std::string* _internal_mutable_educationallevel();

  public:
  // string shiftId = 74 [json_name = "shiftId"];
  void clear_shiftid() ;
  const std::string& shiftid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shiftid(Arg_&& arg, Args_... args);
  std::string* mutable_shiftid();
  PROTOBUF_NODISCARD std::string* release_shiftid();
  void set_allocated_shiftid(std::string* value);

  private:
  const std::string& _internal_shiftid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shiftid(
      const std::string& value);
  std::string* _internal_mutable_shiftid();

  public:
  // string image = 76 [json_name = "image"];
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // int64 dateOfBirth = 6 [json_name = "dateOfBirth"];
  void clear_dateofbirth() ;
  ::int64_t dateofbirth() const;
  void set_dateofbirth(::int64_t value);

  private:
  ::int64_t _internal_dateofbirth() const;
  void _internal_set_dateofbirth(::int64_t value);

  public:
  // optional int64 socialInsuranceIssueDate = 15 [json_name = "socialInsuranceIssueDate"];
  bool has_socialinsuranceissuedate() const;
  void clear_socialinsuranceissuedate() ;
  ::int64_t socialinsuranceissuedate() const;
  void set_socialinsuranceissuedate(::int64_t value);

  private:
  ::int64_t _internal_socialinsuranceissuedate() const;
  void _internal_set_socialinsuranceissuedate(::int64_t value);

  public:
  // optional int64 healthInsuranceIssueDate = 26 [json_name = "healthInsuranceIssueDate"];
  bool has_healthinsuranceissuedate() const;
  void clear_healthinsuranceissuedate() ;
  ::int64_t healthinsuranceissuedate() const;
  void set_healthinsuranceissuedate(::int64_t value);

  private:
  ::int64_t _internal_healthinsuranceissuedate() const;
  void _internal_set_healthinsuranceissuedate(::int64_t value);

  public:
  // optional int64 healthInsuranceExpireDate = 27 [json_name = "healthInsuranceExpireDate"];
  bool has_healthinsuranceexpiredate() const;
  void clear_healthinsuranceexpiredate() ;
  ::int64_t healthinsuranceexpiredate() const;
  void set_healthinsuranceexpiredate(::int64_t value);

  private:
  ::int64_t _internal_healthinsuranceexpiredate() const;
  void _internal_set_healthinsuranceexpiredate(::int64_t value);

  public:
  // .core.v1.Gender gender = 41 [json_name = "gender"];
  void clear_gender() ;
  ::core::v1::Gender gender() const;
  void set_gender(::core::v1::Gender value);

  private:
  ::core::v1::Gender _internal_gender() const;
  void _internal_set_gender(::core::v1::Gender value);

  public:
  // optional bool isInSocialInsurance = 18 [json_name = "isInSocialInsurance"];
  bool has_isinsocialinsurance() const;
  void clear_isinsocialinsurance() ;
  bool isinsocialinsurance() const;
  void set_isinsocialinsurance(bool value);

  private:
  bool _internal_isinsocialinsurance() const;
  void _internal_set_isinsocialinsurance(bool value);

  public:
  // optional bool isIncludeApprenticeIncome = 59 [json_name = "isIncludeApprenticeIncome"];
  bool has_isincludeapprenticeincome() const;
  void clear_isincludeapprenticeincome() ;
  bool isincludeapprenticeincome() const;
  void set_isincludeapprenticeincome(bool value);

  private:
  bool _internal_isincludeapprenticeincome() const;
  void _internal_set_isincludeapprenticeincome(bool value);

  public:
  // optional bool isIncludeExcessIncome = 60 [json_name = "isIncludeExcessIncome"];
  bool has_isincludeexcessincome() const;
  void clear_isincludeexcessincome() ;
  bool isincludeexcessincome() const;
  void set_isincludeexcessincome(bool value);

  private:
  bool _internal_isincludeexcessincome() const;
  void _internal_set_isincludeexcessincome(bool value);

  public:
  // int64 identificationCardIssueDate = 51 [json_name = "identificationCardIssueDate"];
  void clear_identificationcardissuedate() ;
  ::int64_t identificationcardissuedate() const;
  void set_identificationcardissuedate(::int64_t value);

  private:
  ::int64_t _internal_identificationcardissuedate() const;
  void _internal_set_identificationcardissuedate(::int64_t value);

  public:
  // optional .core.v1.JobStatus jobStatus = 56 [json_name = "jobStatus"];
  bool has_jobstatus() const;
  void clear_jobstatus() ;
  ::core::v1::JobStatus jobstatus() const;
  void set_jobstatus(::core::v1::JobStatus value);

  private:
  ::core::v1::JobStatus _internal_jobstatus() const;
  void _internal_set_jobstatus(::core::v1::JobStatus value);

  public:
  // optional int32 contributionRatePercentage = 58 [json_name = "contributionRatePercentage"];
  bool has_contributionratepercentage() const;
  void clear_contributionratepercentage() ;
  ::int32_t contributionratepercentage() const;
  void set_contributionratepercentage(::int32_t value);

  private:
  ::int32_t _internal_contributionratepercentage() const;
  void _internal_set_contributionratepercentage(::int32_t value);

  public:
  // int64 positionStartDate = 61 [json_name = "positionStartDate"];
  void clear_positionstartdate() ;
  ::int64_t positionstartdate() const;
  void set_positionstartdate(::int64_t value);

  private:
  ::int64_t _internal_positionstartdate() const;
  void _internal_set_positionstartdate(::int64_t value);

  public:
  // optional int64 positionEndDate = 62 [json_name = "positionEndDate"];
  bool has_positionenddate() const;
  void clear_positionenddate() ;
  ::int64_t positionenddate() const;
  void set_positionenddate(::int64_t value);

  private:
  ::int64_t _internal_positionenddate() const;
  void _internal_set_positionenddate(::int64_t value);

  public:
  // int64 dateOfJoiningFactory = 63 [json_name = "dateOfJoiningFactory"];
  void clear_dateofjoiningfactory() ;
  ::int64_t dateofjoiningfactory() const;
  void set_dateofjoiningfactory(::int64_t value);

  private:
  ::int64_t _internal_dateofjoiningfactory() const;
  void _internal_set_dateofjoiningfactory(::int64_t value);

  public:
  // optional int32 availableAnnualDayOffs = 64 [json_name = "availableAnnualDayOffs"];
  bool has_availableannualdayoffs() const;
  void clear_availableannualdayoffs() ;
  ::int32_t availableannualdayoffs() const;
  void set_availableannualdayoffs(::int32_t value);

  private:
  ::int32_t _internal_availableannualdayoffs() const;
  void _internal_set_availableannualdayoffs(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.v1.SaveEmployeeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 51, 0,
      585, 11>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SaveEmployeeRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaveEmployeeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr fullname_;
    ::google::protobuf::internal::ArenaStringPtr departmentid_;
    ::google::protobuf::internal::ArenaStringPtr positionid_;
    ::google::protobuf::internal::ArenaStringPtr factoryid_;
    ::google::protobuf::internal::ArenaStringPtr socialinsurancenumber_;
    ::google::protobuf::internal::ArenaStringPtr socialinsurancebooknumber_;
    ::google::protobuf::internal::ArenaStringPtr socialinsuranceissuecityid_;
    ::google::protobuf::internal::ArenaStringPtr bankid_;
    ::google::protobuf::internal::ArenaStringPtr bankaccountnumber_;
    ::google::protobuf::internal::ArenaStringPtr bankaccountholdername_;
    ::google::protobuf::internal::ArenaStringPtr bankcityid_;
    ::google::protobuf::internal::ArenaStringPtr healthinsurancenumber_;
    ::google::protobuf::internal::ArenaStringPtr medicalregisterplace_;
    ::google::protobuf::internal::ArenaStringPtr medicalregistercityid_;
    ::google::protobuf::internal::ArenaStringPtr phonenumber_;
    ::google::protobuf::internal::ArenaStringPtr residencecityid_;
    ::google::protobuf::internal::ArenaStringPtr residencedistrictid_;
    ::google::protobuf::internal::ArenaStringPtr residencecommuneid_;
    ::google::protobuf::internal::ArenaStringPtr residenceaddress_;
    ::google::protobuf::internal::ArenaStringPtr nationalitycountryid_;
    ::google::protobuf::internal::ArenaStringPtr ethnicityid_;
    ::google::protobuf::internal::ArenaStringPtr birthcityid_;
    ::google::protobuf::internal::ArenaStringPtr birthdistrictid_;
    ::google::protobuf::internal::ArenaStringPtr birthcommuneid_;
    ::google::protobuf::internal::ArenaStringPtr birthaddress_;
    ::google::protobuf::internal::ArenaStringPtr guardian_;
    ::google::protobuf::internal::ArenaStringPtr identificationcardnumber_;
    ::google::protobuf::internal::ArenaStringPtr identificationcardissueplace_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr educationallevel_;
    ::google::protobuf::internal::ArenaStringPtr shiftid_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::int64_t dateofbirth_;
    ::int64_t socialinsuranceissuedate_;
    ::int64_t healthinsuranceissuedate_;
    ::int64_t healthinsuranceexpiredate_;
    int gender_;
    bool isinsocialinsurance_;
    bool isincludeapprenticeincome_;
    bool isincludeexcessincome_;
    ::int64_t identificationcardissuedate_;
    int jobstatus_;
    ::int32_t contributionratepercentage_;
    ::int64_t positionstartdate_;
    ::int64_t positionenddate_;
    ::int64_t dateofjoiningfactory_;
    ::int32_t availableannualdayoffs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2femployee_2eproto;
};
// -------------------------------------------------------------------

class GetMyEmployeeRecordResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.GetMyEmployeeRecordResponse) */ {
 public:
  inline GetMyEmployeeRecordResponse() : GetMyEmployeeRecordResponse(nullptr) {}
  ~GetMyEmployeeRecordResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetMyEmployeeRecordResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetMyEmployeeRecordResponse(const GetMyEmployeeRecordResponse& from) : GetMyEmployeeRecordResponse(nullptr, from) {}
  inline GetMyEmployeeRecordResponse(GetMyEmployeeRecordResponse&& from) noexcept
      : GetMyEmployeeRecordResponse(nullptr, std::move(from)) {}
  inline GetMyEmployeeRecordResponse& operator=(const GetMyEmployeeRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMyEmployeeRecordResponse& operator=(GetMyEmployeeRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMyEmployeeRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMyEmployeeRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetMyEmployeeRecordResponse*>(
        &_GetMyEmployeeRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GetMyEmployeeRecordResponse& a, GetMyEmployeeRecordResponse& b) { a.Swap(&b); }
  inline void Swap(GetMyEmployeeRecordResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMyEmployeeRecordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMyEmployeeRecordResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetMyEmployeeRecordResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetMyEmployeeRecordResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetMyEmployeeRecordResponse& from) { GetMyEmployeeRecordResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetMyEmployeeRecordResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.GetMyEmployeeRecordResponse"; }

 protected:
  explicit GetMyEmployeeRecordResponse(::google::protobuf::Arena* arena);
  GetMyEmployeeRecordResponse(::google::protobuf::Arena* arena, const GetMyEmployeeRecordResponse& from);
  GetMyEmployeeRecordResponse(::google::protobuf::Arena* arena, GetMyEmployeeRecordResponse&& from) noexcept
      : GetMyEmployeeRecordResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kFullNameFieldNumber = 3,
    kNumberOfInOutRecordFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2 [json_name = "userId"];
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string fullName = 3 [json_name = "fullName"];
  void clear_fullname() ;
  const std::string& fullname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* value);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // optional int32 numberOfInOutRecord = 4 [json_name = "numberOfInOutRecord"];
  bool has_numberofinoutrecord() const;
  void clear_numberofinoutrecord() ;
  ::int32_t numberofinoutrecord() const;
  void set_numberofinoutrecord(::int32_t value);

  private:
  ::int32_t _internal_numberofinoutrecord() const;
  void _internal_set_numberofinoutrecord(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.v1.GetMyEmployeeRecordResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetMyEmployeeRecordResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetMyEmployeeRecordResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr fullname_;
    ::int32_t numberofinoutrecord_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2femployee_2eproto;
};
// -------------------------------------------------------------------

class Employee final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.Employee) */ {
 public:
  inline Employee() : Employee(nullptr) {}
  ~Employee() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Employee(
      ::google::protobuf::internal::ConstantInitialized);

  inline Employee(const Employee& from) : Employee(nullptr, from) {}
  inline Employee(Employee&& from) noexcept
      : Employee(nullptr, std::move(from)) {}
  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Employee& operator=(Employee&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Employee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Employee* internal_default_instance() {
    return reinterpret_cast<const Employee*>(
        &_Employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Employee& a, Employee& b) { a.Swap(&b); }
  inline void Swap(Employee* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Employee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Employee* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Employee>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Employee& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Employee& from) { Employee::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Employee* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.Employee"; }

 protected:
  explicit Employee(::google::protobuf::Arena* arena);
  Employee(::google::protobuf::Arena* arena, const Employee& from);
  Employee(::google::protobuf::Arena* arena, Employee&& from) noexcept
      : Employee(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kUserLabelFieldNumber = 3,
    kCodeFieldNumber = 4,
    kFullNameFieldNumber = 5,
    kDepartmentIdFieldNumber = 7,
    kDepartmentLabelFieldNumber = 8,
    kPositionIdFieldNumber = 9,
    kPositionLabelFieldNumber = 10,
    kFactoryIdFieldNumber = 11,
    kFactoryLabelFieldNumber = 12,
    kSocialInsuranceNumberFieldNumber = 13,
    kSocialInsuranceBookNumberFieldNumber = 14,
    kSocialInsuranceIssueCityIdFieldNumber = 16,
    kSocialInsuranceIssueCityLabelFieldNumber = 17,
    kBankIdFieldNumber = 19,
    kBankLabelFieldNumber = 20,
    kBankAccountNumberFieldNumber = 21,
    kBankAccountHolderNameFieldNumber = 22,
    kBankCityIdFieldNumber = 23,
    kBankCityLabelFieldNumber = 24,
    kHealthInsuranceNumberFieldNumber = 25,
    kMedicalRegisterPlaceFieldNumber = 28,
    kMedicalRegisterCityIdFieldNumber = 29,
    kMedicalRegisterCityLabelFieldNumber = 30,
    kPhoneNumberFieldNumber = 31,
    kResidenceCityIdFieldNumber = 32,
    kResidenceCityLabelFieldNumber = 33,
    kResidenceDistrictIdFieldNumber = 34,
    kResidenceDistrictLabelFieldNumber = 35,
    kResidenceCommuneIdFieldNumber = 36,
    kResidenceCommuneLabelFieldNumber = 37,
    kResidenceAddressFieldNumber = 38,
    kNationalityCountryIdFieldNumber = 39,
    kEthnicityIdFieldNumber = 40,
    kBirthCityIdFieldNumber = 42,
    kBirthCityLabelFieldNumber = 43,
    kBirthDistrictIdFieldNumber = 44,
    kBirthDistrictLabelFieldNumber = 45,
    kBirthCommuneIdFieldNumber = 46,
    kBirthCommuneLabelFieldNumber = 47,
    kBirthAddressFieldNumber = 48,
    kGuardianFieldNumber = 49,
    kIdentificationCardNumberFieldNumber = 50,
    kIdentificationCardIssuePlaceFieldNumber = 52,
    kSubjectFieldNumber = 53,
    kEmailFieldNumber = 54,
    kEducationalLevelFieldNumber = 55,
    kShiftIdFieldNumber = 74,
    kShiftLabelFieldNumber = 75,
    kImageFieldNumber = 76,
    kCreatedByFieldNumber = 101,
    kCreatedByLabelFieldNumber = 102,
    kUpdatedByFieldNumber = 104,
    kUpdatedByLabelFieldNumber = 105,
    kDeletedByFieldNumber = 107,
    kDeletedByLabelFieldNumber = 108,
    kDateOfBirthFieldNumber = 6,
    kSocialInsuranceIssueDateFieldNumber = 15,
    kHealthInsuranceIssueDateFieldNumber = 26,
    kHealthInsuranceExpireDateFieldNumber = 27,
    kGenderFieldNumber = 41,
    kIsInSocialInsuranceFieldNumber = 18,
    kIsIncludeApprenticeIncomeFieldNumber = 59,
    kIsIncludeExcessIncomeFieldNumber = 60,
    kIdentificationCardIssueDateFieldNumber = 51,
    kJobStatusFieldNumber = 56,
    kContributionRatePercentageFieldNumber = 58,
    kPositionStartDateFieldNumber = 61,
    kPositionEndDateFieldNumber = 62,
    kDateOfJoiningFactoryFieldNumber = 63,
    kCreatedAtFieldNumber = 100,
    kUpdatedAtFieldNumber = 103,
    kDeletedAtFieldNumber = 106,
    kAvailableAnnualDayOffsFieldNumber = 64,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2 [json_name = "userId", (.api.v1.ts_grid_opts) = {
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // optional string userLabel = 3 [json_name = "userLabel"];
  bool has_userlabel() const;
  void clear_userlabel() ;
  const std::string& userlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userlabel(Arg_&& arg, Args_... args);
  std::string* mutable_userlabel();
  PROTOBUF_NODISCARD std::string* release_userlabel();
  void set_allocated_userlabel(std::string* value);

  private:
  const std::string& _internal_userlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userlabel(
      const std::string& value);
  std::string* _internal_mutable_userlabel();

  public:
  // string code = 4 [json_name = "code"];
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* value);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string fullName = 5 [json_name = "fullName", (.api.v1.ts_grid_opts) = {
  void clear_fullname() ;
  const std::string& fullname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* value);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // string departmentId = 7 [json_name = "departmentId", (.api.v1.ts_grid_opts) = {
  void clear_departmentid() ;
  const std::string& departmentid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_departmentid(Arg_&& arg, Args_... args);
  std::string* mutable_departmentid();
  PROTOBUF_NODISCARD std::string* release_departmentid();
  void set_allocated_departmentid(std::string* value);

  private:
  const std::string& _internal_departmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departmentid(
      const std::string& value);
  std::string* _internal_mutable_departmentid();

  public:
  // optional string departmentLabel = 8 [json_name = "departmentLabel"];
  bool has_departmentlabel() const;
  void clear_departmentlabel() ;
  const std::string& departmentlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_departmentlabel(Arg_&& arg, Args_... args);
  std::string* mutable_departmentlabel();
  PROTOBUF_NODISCARD std::string* release_departmentlabel();
  void set_allocated_departmentlabel(std::string* value);

  private:
  const std::string& _internal_departmentlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departmentlabel(
      const std::string& value);
  std::string* _internal_mutable_departmentlabel();

  public:
  // string positionId = 9 [json_name = "positionId", (.api.v1.ts_grid_opts) = {
  void clear_positionid() ;
  const std::string& positionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positionid(Arg_&& arg, Args_... args);
  std::string* mutable_positionid();
  PROTOBUF_NODISCARD std::string* release_positionid();
  void set_allocated_positionid(std::string* value);

  private:
  const std::string& _internal_positionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positionid(
      const std::string& value);
  std::string* _internal_mutable_positionid();

  public:
  // optional string positionLabel = 10 [json_name = "positionLabel"];
  bool has_positionlabel() const;
  void clear_positionlabel() ;
  const std::string& positionlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positionlabel(Arg_&& arg, Args_... args);
  std::string* mutable_positionlabel();
  PROTOBUF_NODISCARD std::string* release_positionlabel();
  void set_allocated_positionlabel(std::string* value);

  private:
  const std::string& _internal_positionlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positionlabel(
      const std::string& value);
  std::string* _internal_mutable_positionlabel();

  public:
  // string factoryId = 11 [json_name = "factoryId", (.api.v1.ts_grid_opts) = {
  void clear_factoryid() ;
  const std::string& factoryid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_factoryid(Arg_&& arg, Args_... args);
  std::string* mutable_factoryid();
  PROTOBUF_NODISCARD std::string* release_factoryid();
  void set_allocated_factoryid(std::string* value);

  private:
  const std::string& _internal_factoryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factoryid(
      const std::string& value);
  std::string* _internal_mutable_factoryid();

  public:
  // optional string factoryLabel = 12 [json_name = "factoryLabel"];
  bool has_factorylabel() const;
  void clear_factorylabel() ;
  const std::string& factorylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_factorylabel(Arg_&& arg, Args_... args);
  std::string* mutable_factorylabel();
  PROTOBUF_NODISCARD std::string* release_factorylabel();
  void set_allocated_factorylabel(std::string* value);

  private:
  const std::string& _internal_factorylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factorylabel(
      const std::string& value);
  std::string* _internal_mutable_factorylabel();

  public:
  // optional string socialInsuranceNumber = 13 [json_name = "socialInsuranceNumber"];
  bool has_socialinsurancenumber() const;
  void clear_socialinsurancenumber() ;
  const std::string& socialinsurancenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsurancenumber(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsurancenumber();
  PROTOBUF_NODISCARD std::string* release_socialinsurancenumber();
  void set_allocated_socialinsurancenumber(std::string* value);

  private:
  const std::string& _internal_socialinsurancenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsurancenumber(
      const std::string& value);
  std::string* _internal_mutable_socialinsurancenumber();

  public:
  // optional string socialInsuranceBookNumber = 14 [json_name = "socialInsuranceBookNumber"];
  bool has_socialinsurancebooknumber() const;
  void clear_socialinsurancebooknumber() ;
  const std::string& socialinsurancebooknumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsurancebooknumber(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsurancebooknumber();
  PROTOBUF_NODISCARD std::string* release_socialinsurancebooknumber();
  void set_allocated_socialinsurancebooknumber(std::string* value);

  private:
  const std::string& _internal_socialinsurancebooknumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsurancebooknumber(
      const std::string& value);
  std::string* _internal_mutable_socialinsurancebooknumber();

  public:
  // optional string socialInsuranceIssueCityId = 16 [json_name = "socialInsuranceIssueCityId", (.api.v1.ts_grid_opts) = {
  bool has_socialinsuranceissuecityid() const;
  void clear_socialinsuranceissuecityid() ;
  const std::string& socialinsuranceissuecityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsuranceissuecityid(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsuranceissuecityid();
  PROTOBUF_NODISCARD std::string* release_socialinsuranceissuecityid();
  void set_allocated_socialinsuranceissuecityid(std::string* value);

  private:
  const std::string& _internal_socialinsuranceissuecityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsuranceissuecityid(
      const std::string& value);
  std::string* _internal_mutable_socialinsuranceissuecityid();

  public:
  // optional string socialInsuranceIssueCityLabel = 17 [json_name = "socialInsuranceIssueCityLabel"];
  bool has_socialinsuranceissuecitylabel() const;
  void clear_socialinsuranceissuecitylabel() ;
  const std::string& socialinsuranceissuecitylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_socialinsuranceissuecitylabel(Arg_&& arg, Args_... args);
  std::string* mutable_socialinsuranceissuecitylabel();
  PROTOBUF_NODISCARD std::string* release_socialinsuranceissuecitylabel();
  void set_allocated_socialinsuranceissuecitylabel(std::string* value);

  private:
  const std::string& _internal_socialinsuranceissuecitylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socialinsuranceissuecitylabel(
      const std::string& value);
  std::string* _internal_mutable_socialinsuranceissuecitylabel();

  public:
  // optional string bankId = 19 [json_name = "bankId", (.api.v1.ts_grid_opts) = {
  bool has_bankid() const;
  void clear_bankid() ;
  const std::string& bankid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankid(Arg_&& arg, Args_... args);
  std::string* mutable_bankid();
  PROTOBUF_NODISCARD std::string* release_bankid();
  void set_allocated_bankid(std::string* value);

  private:
  const std::string& _internal_bankid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankid(
      const std::string& value);
  std::string* _internal_mutable_bankid();

  public:
  // optional string bankLabel = 20 [json_name = "bankLabel"];
  bool has_banklabel() const;
  void clear_banklabel() ;
  const std::string& banklabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_banklabel(Arg_&& arg, Args_... args);
  std::string* mutable_banklabel();
  PROTOBUF_NODISCARD std::string* release_banklabel();
  void set_allocated_banklabel(std::string* value);

  private:
  const std::string& _internal_banklabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_banklabel(
      const std::string& value);
  std::string* _internal_mutable_banklabel();

  public:
  // optional string bankAccountNumber = 21 [json_name = "bankAccountNumber"];
  bool has_bankaccountnumber() const;
  void clear_bankaccountnumber() ;
  const std::string& bankaccountnumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankaccountnumber(Arg_&& arg, Args_... args);
  std::string* mutable_bankaccountnumber();
  PROTOBUF_NODISCARD std::string* release_bankaccountnumber();
  void set_allocated_bankaccountnumber(std::string* value);

  private:
  const std::string& _internal_bankaccountnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankaccountnumber(
      const std::string& value);
  std::string* _internal_mutable_bankaccountnumber();

  public:
  // optional string bankAccountHolderName = 22 [json_name = "bankAccountHolderName"];
  bool has_bankaccountholdername() const;
  void clear_bankaccountholdername() ;
  const std::string& bankaccountholdername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankaccountholdername(Arg_&& arg, Args_... args);
  std::string* mutable_bankaccountholdername();
  PROTOBUF_NODISCARD std::string* release_bankaccountholdername();
  void set_allocated_bankaccountholdername(std::string* value);

  private:
  const std::string& _internal_bankaccountholdername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankaccountholdername(
      const std::string& value);
  std::string* _internal_mutable_bankaccountholdername();

  public:
  // optional string bankCityId = 23 [json_name = "bankCityId", (.api.v1.ts_grid_opts) = {
  bool has_bankcityid() const;
  void clear_bankcityid() ;
  const std::string& bankcityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankcityid(Arg_&& arg, Args_... args);
  std::string* mutable_bankcityid();
  PROTOBUF_NODISCARD std::string* release_bankcityid();
  void set_allocated_bankcityid(std::string* value);

  private:
  const std::string& _internal_bankcityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankcityid(
      const std::string& value);
  std::string* _internal_mutable_bankcityid();

  public:
  // optional string bankCityLabel = 24 [json_name = "bankCityLabel"];
  bool has_bankcitylabel() const;
  void clear_bankcitylabel() ;
  const std::string& bankcitylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bankcitylabel(Arg_&& arg, Args_... args);
  std::string* mutable_bankcitylabel();
  PROTOBUF_NODISCARD std::string* release_bankcitylabel();
  void set_allocated_bankcitylabel(std::string* value);

  private:
  const std::string& _internal_bankcitylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bankcitylabel(
      const std::string& value);
  std::string* _internal_mutable_bankcitylabel();

  public:
  // optional string healthInsuranceNumber = 25 [json_name = "healthInsuranceNumber"];
  bool has_healthinsurancenumber() const;
  void clear_healthinsurancenumber() ;
  const std::string& healthinsurancenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_healthinsurancenumber(Arg_&& arg, Args_... args);
  std::string* mutable_healthinsurancenumber();
  PROTOBUF_NODISCARD std::string* release_healthinsurancenumber();
  void set_allocated_healthinsurancenumber(std::string* value);

  private:
  const std::string& _internal_healthinsurancenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_healthinsurancenumber(
      const std::string& value);
  std::string* _internal_mutable_healthinsurancenumber();

  public:
  // optional string medicalRegisterPlace = 28 [json_name = "medicalRegisterPlace"];
  bool has_medicalregisterplace() const;
  void clear_medicalregisterplace() ;
  const std::string& medicalregisterplace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medicalregisterplace(Arg_&& arg, Args_... args);
  std::string* mutable_medicalregisterplace();
  PROTOBUF_NODISCARD std::string* release_medicalregisterplace();
  void set_allocated_medicalregisterplace(std::string* value);

  private:
  const std::string& _internal_medicalregisterplace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medicalregisterplace(
      const std::string& value);
  std::string* _internal_mutable_medicalregisterplace();

  public:
  // optional string medicalRegisterCityId = 29 [json_name = "medicalRegisterCityId", (.api.v1.ts_grid_opts) = {
  bool has_medicalregistercityid() const;
  void clear_medicalregistercityid() ;
  const std::string& medicalregistercityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medicalregistercityid(Arg_&& arg, Args_... args);
  std::string* mutable_medicalregistercityid();
  PROTOBUF_NODISCARD std::string* release_medicalregistercityid();
  void set_allocated_medicalregistercityid(std::string* value);

  private:
  const std::string& _internal_medicalregistercityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medicalregistercityid(
      const std::string& value);
  std::string* _internal_mutable_medicalregistercityid();

  public:
  // optional string medicalRegisterCityLabel = 30 [json_name = "medicalRegisterCityLabel"];
  bool has_medicalregistercitylabel() const;
  void clear_medicalregistercitylabel() ;
  const std::string& medicalregistercitylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medicalregistercitylabel(Arg_&& arg, Args_... args);
  std::string* mutable_medicalregistercitylabel();
  PROTOBUF_NODISCARD std::string* release_medicalregistercitylabel();
  void set_allocated_medicalregistercitylabel(std::string* value);

  private:
  const std::string& _internal_medicalregistercitylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medicalregistercitylabel(
      const std::string& value);
  std::string* _internal_mutable_medicalregistercitylabel();

  public:
  // string phoneNumber = 31 [json_name = "phoneNumber"];
  void clear_phonenumber() ;
  const std::string& phonenumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenumber(Arg_&& arg, Args_... args);
  std::string* mutable_phonenumber();
  PROTOBUF_NODISCARD std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* value);

  private:
  const std::string& _internal_phonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenumber(
      const std::string& value);
  std::string* _internal_mutable_phonenumber();

  public:
  // string residenceCityId = 32 [json_name = "residenceCityId", (.api.v1.ts_grid_opts) = {
  void clear_residencecityid() ;
  const std::string& residencecityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecityid(Arg_&& arg, Args_... args);
  std::string* mutable_residencecityid();
  PROTOBUF_NODISCARD std::string* release_residencecityid();
  void set_allocated_residencecityid(std::string* value);

  private:
  const std::string& _internal_residencecityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecityid(
      const std::string& value);
  std::string* _internal_mutable_residencecityid();

  public:
  // optional string residenceCityLabel = 33 [json_name = "residenceCityLabel"];
  bool has_residencecitylabel() const;
  void clear_residencecitylabel() ;
  const std::string& residencecitylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecitylabel(Arg_&& arg, Args_... args);
  std::string* mutable_residencecitylabel();
  PROTOBUF_NODISCARD std::string* release_residencecitylabel();
  void set_allocated_residencecitylabel(std::string* value);

  private:
  const std::string& _internal_residencecitylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecitylabel(
      const std::string& value);
  std::string* _internal_mutable_residencecitylabel();

  public:
  // string residenceDistrictId = 34 [json_name = "residenceDistrictId", (.api.v1.ts_grid_opts) = {
  void clear_residencedistrictid() ;
  const std::string& residencedistrictid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencedistrictid(Arg_&& arg, Args_... args);
  std::string* mutable_residencedistrictid();
  PROTOBUF_NODISCARD std::string* release_residencedistrictid();
  void set_allocated_residencedistrictid(std::string* value);

  private:
  const std::string& _internal_residencedistrictid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencedistrictid(
      const std::string& value);
  std::string* _internal_mutable_residencedistrictid();

  public:
  // optional string residenceDistrictLabel = 35 [json_name = "residenceDistrictLabel"];
  bool has_residencedistrictlabel() const;
  void clear_residencedistrictlabel() ;
  const std::string& residencedistrictlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencedistrictlabel(Arg_&& arg, Args_... args);
  std::string* mutable_residencedistrictlabel();
  PROTOBUF_NODISCARD std::string* release_residencedistrictlabel();
  void set_allocated_residencedistrictlabel(std::string* value);

  private:
  const std::string& _internal_residencedistrictlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencedistrictlabel(
      const std::string& value);
  std::string* _internal_mutable_residencedistrictlabel();

  public:
  // string residenceCommuneId = 36 [json_name = "residenceCommuneId", (.api.v1.ts_grid_opts) = {
  void clear_residencecommuneid() ;
  const std::string& residencecommuneid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecommuneid(Arg_&& arg, Args_... args);
  std::string* mutable_residencecommuneid();
  PROTOBUF_NODISCARD std::string* release_residencecommuneid();
  void set_allocated_residencecommuneid(std::string* value);

  private:
  const std::string& _internal_residencecommuneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecommuneid(
      const std::string& value);
  std::string* _internal_mutable_residencecommuneid();

  public:
  // optional string residenceCommuneLabel = 37 [json_name = "residenceCommuneLabel"];
  bool has_residencecommunelabel() const;
  void clear_residencecommunelabel() ;
  const std::string& residencecommunelabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residencecommunelabel(Arg_&& arg, Args_... args);
  std::string* mutable_residencecommunelabel();
  PROTOBUF_NODISCARD std::string* release_residencecommunelabel();
  void set_allocated_residencecommunelabel(std::string* value);

  private:
  const std::string& _internal_residencecommunelabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residencecommunelabel(
      const std::string& value);
  std::string* _internal_mutable_residencecommunelabel();

  public:
  // string residenceAddress = 38 [json_name = "residenceAddress"];
  void clear_residenceaddress() ;
  const std::string& residenceaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_residenceaddress(Arg_&& arg, Args_... args);
  std::string* mutable_residenceaddress();
  PROTOBUF_NODISCARD std::string* release_residenceaddress();
  void set_allocated_residenceaddress(std::string* value);

  private:
  const std::string& _internal_residenceaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_residenceaddress(
      const std::string& value);
  std::string* _internal_mutable_residenceaddress();

  public:
  // string nationalityCountryId = 39 [json_name = "nationalityCountryId", (.api.v1.ts_grid_opts) = {
  void clear_nationalitycountryid() ;
  const std::string& nationalitycountryid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nationalitycountryid(Arg_&& arg, Args_... args);
  std::string* mutable_nationalitycountryid();
  PROTOBUF_NODISCARD std::string* release_nationalitycountryid();
  void set_allocated_nationalitycountryid(std::string* value);

  private:
  const std::string& _internal_nationalitycountryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nationalitycountryid(
      const std::string& value);
  std::string* _internal_mutable_nationalitycountryid();

  public:
  // string ethnicityId = 40 [json_name = "ethnicityId", (.api.v1.ts_grid_opts) = {
  void clear_ethnicityid() ;
  const std::string& ethnicityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ethnicityid(Arg_&& arg, Args_... args);
  std::string* mutable_ethnicityid();
  PROTOBUF_NODISCARD std::string* release_ethnicityid();
  void set_allocated_ethnicityid(std::string* value);

  private:
  const std::string& _internal_ethnicityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethnicityid(
      const std::string& value);
  std::string* _internal_mutable_ethnicityid();

  public:
  // string birthCityId = 42 [json_name = "birthCityId", (.api.v1.ts_grid_opts) = {
  void clear_birthcityid() ;
  const std::string& birthcityid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcityid(Arg_&& arg, Args_... args);
  std::string* mutable_birthcityid();
  PROTOBUF_NODISCARD std::string* release_birthcityid();
  void set_allocated_birthcityid(std::string* value);

  private:
  const std::string& _internal_birthcityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcityid(
      const std::string& value);
  std::string* _internal_mutable_birthcityid();

  public:
  // optional string birthCityLabel = 43 [json_name = "birthCityLabel"];
  bool has_birthcitylabel() const;
  void clear_birthcitylabel() ;
  const std::string& birthcitylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcitylabel(Arg_&& arg, Args_... args);
  std::string* mutable_birthcitylabel();
  PROTOBUF_NODISCARD std::string* release_birthcitylabel();
  void set_allocated_birthcitylabel(std::string* value);

  private:
  const std::string& _internal_birthcitylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcitylabel(
      const std::string& value);
  std::string* _internal_mutable_birthcitylabel();

  public:
  // string birthDistrictId = 44 [json_name = "birthDistrictId", (.api.v1.ts_grid_opts) = {
  void clear_birthdistrictid() ;
  const std::string& birthdistrictid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthdistrictid(Arg_&& arg, Args_... args);
  std::string* mutable_birthdistrictid();
  PROTOBUF_NODISCARD std::string* release_birthdistrictid();
  void set_allocated_birthdistrictid(std::string* value);

  private:
  const std::string& _internal_birthdistrictid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthdistrictid(
      const std::string& value);
  std::string* _internal_mutable_birthdistrictid();

  public:
  // optional string birthDistrictLabel = 45 [json_name = "birthDistrictLabel"];
  bool has_birthdistrictlabel() const;
  void clear_birthdistrictlabel() ;
  const std::string& birthdistrictlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthdistrictlabel(Arg_&& arg, Args_... args);
  std::string* mutable_birthdistrictlabel();
  PROTOBUF_NODISCARD std::string* release_birthdistrictlabel();
  void set_allocated_birthdistrictlabel(std::string* value);

  private:
  const std::string& _internal_birthdistrictlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthdistrictlabel(
      const std::string& value);
  std::string* _internal_mutable_birthdistrictlabel();

  public:
  // string birthCommuneId = 46 [json_name = "birthCommuneId", (.api.v1.ts_grid_opts) = {
  void clear_birthcommuneid() ;
  const std::string& birthcommuneid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcommuneid(Arg_&& arg, Args_... args);
  std::string* mutable_birthcommuneid();
  PROTOBUF_NODISCARD std::string* release_birthcommuneid();
  void set_allocated_birthcommuneid(std::string* value);

  private:
  const std::string& _internal_birthcommuneid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcommuneid(
      const std::string& value);
  std::string* _internal_mutable_birthcommuneid();

  public:
  // optional string birthCommuneLabel = 47 [json_name = "birthCommuneLabel"];
  bool has_birthcommunelabel() const;
  void clear_birthcommunelabel() ;
  const std::string& birthcommunelabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthcommunelabel(Arg_&& arg, Args_... args);
  std::string* mutable_birthcommunelabel();
  PROTOBUF_NODISCARD std::string* release_birthcommunelabel();
  void set_allocated_birthcommunelabel(std::string* value);

  private:
  const std::string& _internal_birthcommunelabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthcommunelabel(
      const std::string& value);
  std::string* _internal_mutable_birthcommunelabel();

  public:
  // string birthAddress = 48 [json_name = "birthAddress"];
  void clear_birthaddress() ;
  const std::string& birthaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_birthaddress(Arg_&& arg, Args_... args);
  std::string* mutable_birthaddress();
  PROTOBUF_NODISCARD std::string* release_birthaddress();
  void set_allocated_birthaddress(std::string* value);

  private:
  const std::string& _internal_birthaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthaddress(
      const std::string& value);
  std::string* _internal_mutable_birthaddress();

  public:
  // optional string guardian = 49 [json_name = "guardian"];
  bool has_guardian() const;
  void clear_guardian() ;
  const std::string& guardian() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_guardian(Arg_&& arg, Args_... args);
  std::string* mutable_guardian();
  PROTOBUF_NODISCARD std::string* release_guardian();
  void set_allocated_guardian(std::string* value);

  private:
  const std::string& _internal_guardian() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guardian(
      const std::string& value);
  std::string* _internal_mutable_guardian();

  public:
  // string identificationCardNumber = 50 [json_name = "identificationCardNumber"];
  void clear_identificationcardnumber() ;
  const std::string& identificationcardnumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identificationcardnumber(Arg_&& arg, Args_... args);
  std::string* mutable_identificationcardnumber();
  PROTOBUF_NODISCARD std::string* release_identificationcardnumber();
  void set_allocated_identificationcardnumber(std::string* value);

  private:
  const std::string& _internal_identificationcardnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identificationcardnumber(
      const std::string& value);
  std::string* _internal_mutable_identificationcardnumber();

  public:
  // string identificationCardIssuePlace = 52 [json_name = "identificationCardIssuePlace"];
  void clear_identificationcardissueplace() ;
  const std::string& identificationcardissueplace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identificationcardissueplace(Arg_&& arg, Args_... args);
  std::string* mutable_identificationcardissueplace();
  PROTOBUF_NODISCARD std::string* release_identificationcardissueplace();
  void set_allocated_identificationcardissueplace(std::string* value);

  private:
  const std::string& _internal_identificationcardissueplace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identificationcardissueplace(
      const std::string& value);
  std::string* _internal_mutable_identificationcardissueplace();

  public:
  // optional string subject = 53 [json_name = "subject"];
  bool has_subject() const;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // optional string email = 54 [json_name = "email"];
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string educationalLevel = 55 [json_name = "educationalLevel"];
  bool has_educationallevel() const;
  void clear_educationallevel() ;
  const std::string& educationallevel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_educationallevel(Arg_&& arg, Args_... args);
  std::string* mutable_educationallevel();
  PROTOBUF_NODISCARD std::string* release_educationallevel();
  void set_allocated_educationallevel(std::string* value);

  private:
  const std::string& _internal_educationallevel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_educationallevel(
      const std::string& value);
  std::string* _internal_mutable_educationallevel();

  public:
  // string shiftId = 74 [json_name = "shiftId", (.api.v1.ts_grid_opts) = {
  void clear_shiftid() ;
  const std::string& shiftid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shiftid(Arg_&& arg, Args_... args);
  std::string* mutable_shiftid();
  PROTOBUF_NODISCARD std::string* release_shiftid();
  void set_allocated_shiftid(std::string* value);

  private:
  const std::string& _internal_shiftid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shiftid(
      const std::string& value);
  std::string* _internal_mutable_shiftid();

  public:
  // optional string shiftLabel = 75 [json_name = "shiftLabel"];
  bool has_shiftlabel() const;
  void clear_shiftlabel() ;
  const std::string& shiftlabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shiftlabel(Arg_&& arg, Args_... args);
  std::string* mutable_shiftlabel();
  PROTOBUF_NODISCARD std::string* release_shiftlabel();
  void set_allocated_shiftlabel(std::string* value);

  private:
  const std::string& _internal_shiftlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shiftlabel(
      const std::string& value);
  std::string* _internal_mutable_shiftlabel();

  public:
  // string image = 76 [json_name = "image", (.api.v1.ts_grid_opts) = {
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // string createdBy = 101 [json_name = "createdBy"];
  void clear_createdby() ;
  const std::string& createdby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_createdby(Arg_&& arg, Args_... args);
  std::string* mutable_createdby();
  PROTOBUF_NODISCARD std::string* release_createdby();
  void set_allocated_createdby(std::string* value);

  private:
  const std::string& _internal_createdby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdby(
      const std::string& value);
  std::string* _internal_mutable_createdby();

  public:
  // optional string createdByLabel = 102 [json_name = "createdByLabel"];
  bool has_createdbylabel() const;
  void clear_createdbylabel() ;
  const std::string& createdbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_createdbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_createdbylabel();
  PROTOBUF_NODISCARD std::string* release_createdbylabel();
  void set_allocated_createdbylabel(std::string* value);

  private:
  const std::string& _internal_createdbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdbylabel(
      const std::string& value);
  std::string* _internal_mutable_createdbylabel();

  public:
  // optional string updatedBy = 104 [json_name = "updatedBy"];
  bool has_updatedby() const;
  void clear_updatedby() ;
  const std::string& updatedby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updatedby(Arg_&& arg, Args_... args);
  std::string* mutable_updatedby();
  PROTOBUF_NODISCARD std::string* release_updatedby();
  void set_allocated_updatedby(std::string* value);

  private:
  const std::string& _internal_updatedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedby(
      const std::string& value);
  std::string* _internal_mutable_updatedby();

  public:
  // optional string updatedByLabel = 105 [json_name = "updatedByLabel"];
  bool has_updatedbylabel() const;
  void clear_updatedbylabel() ;
  const std::string& updatedbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updatedbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_updatedbylabel();
  PROTOBUF_NODISCARD std::string* release_updatedbylabel();
  void set_allocated_updatedbylabel(std::string* value);

  private:
  const std::string& _internal_updatedbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedbylabel(
      const std::string& value);
  std::string* _internal_mutable_updatedbylabel();

  public:
  // optional string deletedBy = 107 [json_name = "deletedBy"];
  bool has_deletedby() const;
  void clear_deletedby() ;
  const std::string& deletedby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deletedby(Arg_&& arg, Args_... args);
  std::string* mutable_deletedby();
  PROTOBUF_NODISCARD std::string* release_deletedby();
  void set_allocated_deletedby(std::string* value);

  private:
  const std::string& _internal_deletedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletedby(
      const std::string& value);
  std::string* _internal_mutable_deletedby();

  public:
  // optional string deletedByLabel = 108 [json_name = "deletedByLabel"];
  bool has_deletedbylabel() const;
  void clear_deletedbylabel() ;
  const std::string& deletedbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deletedbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_deletedbylabel();
  PROTOBUF_NODISCARD std::string* release_deletedbylabel();
  void set_allocated_deletedbylabel(std::string* value);

  private:
  const std::string& _internal_deletedbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletedbylabel(
      const std::string& value);
  std::string* _internal_mutable_deletedbylabel();

  public:
  // int64 dateOfBirth = 6 [json_name = "dateOfBirth"];
  void clear_dateofbirth() ;
  ::int64_t dateofbirth() const;
  void set_dateofbirth(::int64_t value);

  private:
  ::int64_t _internal_dateofbirth() const;
  void _internal_set_dateofbirth(::int64_t value);

  public:
  // optional int64 socialInsuranceIssueDate = 15 [json_name = "socialInsuranceIssueDate"];
  bool has_socialinsuranceissuedate() const;
  void clear_socialinsuranceissuedate() ;
  ::int64_t socialinsuranceissuedate() const;
  void set_socialinsuranceissuedate(::int64_t value);

  private:
  ::int64_t _internal_socialinsuranceissuedate() const;
  void _internal_set_socialinsuranceissuedate(::int64_t value);

  public:
  // optional int64 healthInsuranceIssueDate = 26 [json_name = "healthInsuranceIssueDate"];
  bool has_healthinsuranceissuedate() const;
  void clear_healthinsuranceissuedate() ;
  ::int64_t healthinsuranceissuedate() const;
  void set_healthinsuranceissuedate(::int64_t value);

  private:
  ::int64_t _internal_healthinsuranceissuedate() const;
  void _internal_set_healthinsuranceissuedate(::int64_t value);

  public:
  // optional int64 healthInsuranceExpireDate = 27 [json_name = "healthInsuranceExpireDate"];
  bool has_healthinsuranceexpiredate() const;
  void clear_healthinsuranceexpiredate() ;
  ::int64_t healthinsuranceexpiredate() const;
  void set_healthinsuranceexpiredate(::int64_t value);

  private:
  ::int64_t _internal_healthinsuranceexpiredate() const;
  void _internal_set_healthinsuranceexpiredate(::int64_t value);

  public:
  // .core.v1.Gender gender = 41 [json_name = "gender"];
  void clear_gender() ;
  ::core::v1::Gender gender() const;
  void set_gender(::core::v1::Gender value);

  private:
  ::core::v1::Gender _internal_gender() const;
  void _internal_set_gender(::core::v1::Gender value);

  public:
  // optional bool isInSocialInsurance = 18 [json_name = "isInSocialInsurance"];
  bool has_isinsocialinsurance() const;
  void clear_isinsocialinsurance() ;
  bool isinsocialinsurance() const;
  void set_isinsocialinsurance(bool value);

  private:
  bool _internal_isinsocialinsurance() const;
  void _internal_set_isinsocialinsurance(bool value);

  public:
  // optional bool isIncludeApprenticeIncome = 59 [json_name = "isIncludeApprenticeIncome"];
  bool has_isincludeapprenticeincome() const;
  void clear_isincludeapprenticeincome() ;
  bool isincludeapprenticeincome() const;
  void set_isincludeapprenticeincome(bool value);

  private:
  bool _internal_isincludeapprenticeincome() const;
  void _internal_set_isincludeapprenticeincome(bool value);

  public:
  // optional bool isIncludeExcessIncome = 60 [json_name = "isIncludeExcessIncome"];
  bool has_isincludeexcessincome() const;
  void clear_isincludeexcessincome() ;
  bool isincludeexcessincome() const;
  void set_isincludeexcessincome(bool value);

  private:
  bool _internal_isincludeexcessincome() const;
  void _internal_set_isincludeexcessincome(bool value);

  public:
  // int64 identificationCardIssueDate = 51 [json_name = "identificationCardIssueDate"];
  void clear_identificationcardissuedate() ;
  ::int64_t identificationcardissuedate() const;
  void set_identificationcardissuedate(::int64_t value);

  private:
  ::int64_t _internal_identificationcardissuedate() const;
  void _internal_set_identificationcardissuedate(::int64_t value);

  public:
  // optional .core.v1.JobStatus jobStatus = 56 [json_name = "jobStatus"];
  bool has_jobstatus() const;
  void clear_jobstatus() ;
  ::core::v1::JobStatus jobstatus() const;
  void set_jobstatus(::core::v1::JobStatus value);

  private:
  ::core::v1::JobStatus _internal_jobstatus() const;
  void _internal_set_jobstatus(::core::v1::JobStatus value);

  public:
  // optional int32 contributionRatePercentage = 58 [json_name = "contributionRatePercentage"];
  bool has_contributionratepercentage() const;
  void clear_contributionratepercentage() ;
  ::int32_t contributionratepercentage() const;
  void set_contributionratepercentage(::int32_t value);

  private:
  ::int32_t _internal_contributionratepercentage() const;
  void _internal_set_contributionratepercentage(::int32_t value);

  public:
  // int64 positionStartDate = 61 [json_name = "positionStartDate"];
  void clear_positionstartdate() ;
  ::int64_t positionstartdate() const;
  void set_positionstartdate(::int64_t value);

  private:
  ::int64_t _internal_positionstartdate() const;
  void _internal_set_positionstartdate(::int64_t value);

  public:
  // optional int64 positionEndDate = 62 [json_name = "positionEndDate"];
  bool has_positionenddate() const;
  void clear_positionenddate() ;
  ::int64_t positionenddate() const;
  void set_positionenddate(::int64_t value);

  private:
  ::int64_t _internal_positionenddate() const;
  void _internal_set_positionenddate(::int64_t value);

  public:
  // int64 dateOfJoiningFactory = 63 [json_name = "dateOfJoiningFactory"];
  void clear_dateofjoiningfactory() ;
  ::int64_t dateofjoiningfactory() const;
  void set_dateofjoiningfactory(::int64_t value);

  private:
  ::int64_t _internal_dateofjoiningfactory() const;
  void _internal_set_dateofjoiningfactory(::int64_t value);

  public:
  // int64 createdAt = 100 [json_name = "createdAt"];
  void clear_createdat() ;
  ::int64_t createdat() const;
  void set_createdat(::int64_t value);

  private:
  ::int64_t _internal_createdat() const;
  void _internal_set_createdat(::int64_t value);

  public:
  // optional int64 updatedAt = 103 [json_name = "updatedAt"];
  bool has_updatedat() const;
  void clear_updatedat() ;
  ::int64_t updatedat() const;
  void set_updatedat(::int64_t value);

  private:
  ::int64_t _internal_updatedat() const;
  void _internal_set_updatedat(::int64_t value);

  public:
  // optional int64 deletedAt = 106 [json_name = "deletedAt"];
  bool has_deletedat() const;
  void clear_deletedat() ;
  ::int64_t deletedat() const;
  void set_deletedat(::int64_t value);

  private:
  ::int64_t _internal_deletedat() const;
  void _internal_set_deletedat(::int64_t value);

  public:
  // optional int32 availableAnnualDayOffs = 64 [json_name = "availableAnnualDayOffs"];
  bool has_availableannualdayoffs() const;
  void clear_availableannualdayoffs() ;
  ::int32_t availableannualdayoffs() const;
  void set_availableannualdayoffs(::int32_t value);

  private:
  ::int32_t _internal_availableannualdayoffs() const;
  void _internal_set_availableannualdayoffs(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.v1.Employee)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 75, 0,
      911, 15>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Employee_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Employee& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr userlabel_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr fullname_;
    ::google::protobuf::internal::ArenaStringPtr departmentid_;
    ::google::protobuf::internal::ArenaStringPtr departmentlabel_;
    ::google::protobuf::internal::ArenaStringPtr positionid_;
    ::google::protobuf::internal::ArenaStringPtr positionlabel_;
    ::google::protobuf::internal::ArenaStringPtr factoryid_;
    ::google::protobuf::internal::ArenaStringPtr factorylabel_;
    ::google::protobuf::internal::ArenaStringPtr socialinsurancenumber_;
    ::google::protobuf::internal::ArenaStringPtr socialinsurancebooknumber_;
    ::google::protobuf::internal::ArenaStringPtr socialinsuranceissuecityid_;
    ::google::protobuf::internal::ArenaStringPtr socialinsuranceissuecitylabel_;
    ::google::protobuf::internal::ArenaStringPtr bankid_;
    ::google::protobuf::internal::ArenaStringPtr banklabel_;
    ::google::protobuf::internal::ArenaStringPtr bankaccountnumber_;
    ::google::protobuf::internal::ArenaStringPtr bankaccountholdername_;
    ::google::protobuf::internal::ArenaStringPtr bankcityid_;
    ::google::protobuf::internal::ArenaStringPtr bankcitylabel_;
    ::google::protobuf::internal::ArenaStringPtr healthinsurancenumber_;
    ::google::protobuf::internal::ArenaStringPtr medicalregisterplace_;
    ::google::protobuf::internal::ArenaStringPtr medicalregistercityid_;
    ::google::protobuf::internal::ArenaStringPtr medicalregistercitylabel_;
    ::google::protobuf::internal::ArenaStringPtr phonenumber_;
    ::google::protobuf::internal::ArenaStringPtr residencecityid_;
    ::google::protobuf::internal::ArenaStringPtr residencecitylabel_;
    ::google::protobuf::internal::ArenaStringPtr residencedistrictid_;
    ::google::protobuf::internal::ArenaStringPtr residencedistrictlabel_;
    ::google::protobuf::internal::ArenaStringPtr residencecommuneid_;
    ::google::protobuf::internal::ArenaStringPtr residencecommunelabel_;
    ::google::protobuf::internal::ArenaStringPtr residenceaddress_;
    ::google::protobuf::internal::ArenaStringPtr nationalitycountryid_;
    ::google::protobuf::internal::ArenaStringPtr ethnicityid_;
    ::google::protobuf::internal::ArenaStringPtr birthcityid_;
    ::google::protobuf::internal::ArenaStringPtr birthcitylabel_;
    ::google::protobuf::internal::ArenaStringPtr birthdistrictid_;
    ::google::protobuf::internal::ArenaStringPtr birthdistrictlabel_;
    ::google::protobuf::internal::ArenaStringPtr birthcommuneid_;
    ::google::protobuf::internal::ArenaStringPtr birthcommunelabel_;
    ::google::protobuf::internal::ArenaStringPtr birthaddress_;
    ::google::protobuf::internal::ArenaStringPtr guardian_;
    ::google::protobuf::internal::ArenaStringPtr identificationcardnumber_;
    ::google::protobuf::internal::ArenaStringPtr identificationcardissueplace_;
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr educationallevel_;
    ::google::protobuf::internal::ArenaStringPtr shiftid_;
    ::google::protobuf::internal::ArenaStringPtr shiftlabel_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::google::protobuf::internal::ArenaStringPtr createdby_;
    ::google::protobuf::internal::ArenaStringPtr createdbylabel_;
    ::google::protobuf::internal::ArenaStringPtr updatedby_;
    ::google::protobuf::internal::ArenaStringPtr updatedbylabel_;
    ::google::protobuf::internal::ArenaStringPtr deletedby_;
    ::google::protobuf::internal::ArenaStringPtr deletedbylabel_;
    ::int64_t dateofbirth_;
    ::int64_t socialinsuranceissuedate_;
    ::int64_t healthinsuranceissuedate_;
    ::int64_t healthinsuranceexpiredate_;
    int gender_;
    bool isinsocialinsurance_;
    bool isincludeapprenticeincome_;
    bool isincludeexcessincome_;
    ::int64_t identificationcardissuedate_;
    int jobstatus_;
    ::int32_t contributionratepercentage_;
    ::int64_t positionstartdate_;
    ::int64_t positionenddate_;
    ::int64_t dateofjoiningfactory_;
    ::int64_t createdat_;
    ::int64_t updatedat_;
    ::int64_t deletedat_;
    ::int32_t availableannualdayoffs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2femployee_2eproto;
};
// -------------------------------------------------------------------

class ListEmployeeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.ListEmployeeResponse) */ {
 public:
  inline ListEmployeeResponse() : ListEmployeeResponse(nullptr) {}
  ~ListEmployeeResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListEmployeeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListEmployeeResponse(const ListEmployeeResponse& from) : ListEmployeeResponse(nullptr, from) {}
  inline ListEmployeeResponse(ListEmployeeResponse&& from) noexcept
      : ListEmployeeResponse(nullptr, std::move(from)) {}
  inline ListEmployeeResponse& operator=(const ListEmployeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEmployeeResponse& operator=(ListEmployeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEmployeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEmployeeResponse* internal_default_instance() {
    return reinterpret_cast<const ListEmployeeResponse*>(
        &_ListEmployeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListEmployeeResponse& a, ListEmployeeResponse& b) { a.Swap(&b); }
  inline void Swap(ListEmployeeResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEmployeeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEmployeeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ListEmployeeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListEmployeeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListEmployeeResponse& from) { ListEmployeeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListEmployeeResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.ListEmployeeResponse"; }

 protected:
  explicit ListEmployeeResponse(::google::protobuf::Arena* arena);
  ListEmployeeResponse(::google::protobuf::Arena* arena, const ListEmployeeResponse& from);
  ListEmployeeResponse(::google::protobuf::Arena* arena, ListEmployeeResponse&& from) noexcept
      : ListEmployeeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .core.v1.Employee items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::core::v1::Employee* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::core::v1::Employee>* mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::core::v1::Employee>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::core::v1::Employee>* _internal_mutable_items();
  public:
  const ::core::v1::Employee& items(int index) const;
  ::core::v1::Employee* add_items();
  const ::google::protobuf::RepeatedPtrField<::core::v1::Employee>& items() const;
  // .api.v1.PaginationResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::api::v1::PaginationResponse& pagination() const;
  PROTOBUF_NODISCARD ::api::v1::PaginationResponse* release_pagination();
  ::api::v1::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::api::v1::PaginationResponse* value);
  void unsafe_arena_set_allocated_pagination(::api::v1::PaginationResponse* value);
  ::api::v1::PaginationResponse* unsafe_arena_release_pagination();

  private:
  const ::api::v1::PaginationResponse& _internal_pagination() const;
  ::api::v1::PaginationResponse* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:core.v1.ListEmployeeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListEmployeeResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListEmployeeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::core::v1::Employee > items_;
    ::api::v1::PaginationResponse* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2femployee_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Employee

// string id = 1 [json_name = "id"];
inline void Employee::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Employee::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.id)
}
inline std::string* Employee::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.id)
  return _s;
}
inline const std::string& Employee::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Employee::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Employee::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.id)
  return _impl_.id_.Release();
}
inline void Employee::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.id)
}

// string userId = 2 [json_name = "userId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Employee::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.userId)
}
inline std::string* Employee::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.userId)
  return _s;
}
inline const std::string& Employee::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void Employee::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* Employee::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.userId)
  return _impl_.userid_.Release();
}
inline void Employee::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.userId)
}

// optional string userLabel = 3 [json_name = "userLabel"];
inline bool Employee::has_userlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Employee::clear_userlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Employee::userlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.userLabel)
  return _internal_userlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_userlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.userLabel)
}
inline std::string* Employee::mutable_userlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.userLabel)
  return _s;
}
inline const std::string& Employee::_internal_userlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userlabel_.Get();
}
inline void Employee::_internal_set_userlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.userlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_userlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.userlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_userlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.userLabel)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.userlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_userlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userlabel_.IsDefault()) {
          _impl_.userlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.userLabel)
}

// string code = 4 [json_name = "code"];
inline void Employee::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Employee::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.code)
}
inline std::string* Employee::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.code)
  return _s;
}
inline const std::string& Employee::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_.Get();
}
inline void Employee::_internal_set_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* Employee::release_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.code)
  return _impl_.code_.Release();
}
inline void Employee::set_allocated_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.code)
}

// string fullName = 5 [json_name = "fullName", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& Employee::fullname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.fullName)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.fullName)
}
inline std::string* Employee::mutable_fullname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.fullName)
  return _s;
}
inline const std::string& Employee::_internal_fullname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fullname_.Get();
}
inline void Employee::_internal_set_fullname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fullname_.Mutable( GetArena());
}
inline std::string* Employee::release_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.fullName)
  return _impl_.fullname_.Release();
}
inline void Employee::set_allocated_fullname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.fullName)
}

// int64 dateOfBirth = 6 [json_name = "dateOfBirth"];
inline void Employee::clear_dateofbirth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofbirth_ = ::int64_t{0};
}
inline ::int64_t Employee::dateofbirth() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.dateOfBirth)
  return _internal_dateofbirth();
}
inline void Employee::set_dateofbirth(::int64_t value) {
  _internal_set_dateofbirth(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.dateOfBirth)
}
inline ::int64_t Employee::_internal_dateofbirth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofbirth_;
}
inline void Employee::_internal_set_dateofbirth(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofbirth_ = value;
}

// string departmentId = 7 [json_name = "departmentId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.ClearToEmpty();
}
inline const std::string& Employee::departmentid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.departmentId)
  return _internal_departmentid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_departmentid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.departmentId)
}
inline std::string* Employee::mutable_departmentid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_departmentid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.departmentId)
  return _s;
}
inline const std::string& Employee::_internal_departmentid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.departmentid_.Get();
}
inline void Employee::_internal_set_departmentid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.departmentid_.Mutable( GetArena());
}
inline std::string* Employee::release_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.departmentId)
  return _impl_.departmentid_.Release();
}
inline void Employee::set_allocated_departmentid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.departmentid_.IsDefault()) {
          _impl_.departmentid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.departmentId)
}

// optional string departmentLabel = 8 [json_name = "departmentLabel"];
inline bool Employee::has_departmentlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Employee::clear_departmentlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Employee::departmentlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.departmentLabel)
  return _internal_departmentlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_departmentlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.departmentlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.departmentLabel)
}
inline std::string* Employee::mutable_departmentlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_departmentlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.departmentLabel)
  return _s;
}
inline const std::string& Employee::_internal_departmentlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.departmentlabel_.Get();
}
inline void Employee::_internal_set_departmentlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.departmentlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_departmentlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.departmentlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_departmentlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.departmentLabel)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.departmentlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.departmentlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_departmentlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.departmentlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.departmentlabel_.IsDefault()) {
          _impl_.departmentlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.departmentLabel)
}

// string positionId = 9 [json_name = "positionId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.ClearToEmpty();
}
inline const std::string& Employee::positionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.positionId)
  return _internal_positionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_positionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.positionId)
}
inline std::string* Employee::mutable_positionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positionid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.positionId)
  return _s;
}
inline const std::string& Employee::_internal_positionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionid_.Get();
}
inline void Employee::_internal_set_positionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.positionid_.Mutable( GetArena());
}
inline std::string* Employee::release_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.positionId)
  return _impl_.positionid_.Release();
}
inline void Employee::set_allocated_positionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.positionid_.IsDefault()) {
          _impl_.positionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.positionId)
}

// optional string positionLabel = 10 [json_name = "positionLabel"];
inline bool Employee::has_positionlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Employee::clear_positionlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Employee::positionlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.positionLabel)
  return _internal_positionlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_positionlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.positionlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.positionLabel)
}
inline std::string* Employee::mutable_positionlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positionlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.positionLabel)
  return _s;
}
inline const std::string& Employee::_internal_positionlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionlabel_.Get();
}
inline void Employee::_internal_set_positionlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.positionlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_positionlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.positionlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_positionlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.positionLabel)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.positionlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.positionlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_positionlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.positionlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.positionlabel_.IsDefault()) {
          _impl_.positionlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.positionLabel)
}

// string factoryId = 11 [json_name = "factoryId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.ClearToEmpty();
}
inline const std::string& Employee::factoryid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.factoryId)
  return _internal_factoryid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_factoryid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.factoryId)
}
inline std::string* Employee::mutable_factoryid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_factoryid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.factoryId)
  return _s;
}
inline const std::string& Employee::_internal_factoryid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.factoryid_.Get();
}
inline void Employee::_internal_set_factoryid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.factoryid_.Mutable( GetArena());
}
inline std::string* Employee::release_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.factoryId)
  return _impl_.factoryid_.Release();
}
inline void Employee::set_allocated_factoryid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.factoryid_.IsDefault()) {
          _impl_.factoryid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.factoryId)
}

// optional string factoryLabel = 12 [json_name = "factoryLabel"];
inline bool Employee::has_factorylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Employee::clear_factorylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factorylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Employee::factorylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.factoryLabel)
  return _internal_factorylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_factorylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.factorylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.factoryLabel)
}
inline std::string* Employee::mutable_factorylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_factorylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.factoryLabel)
  return _s;
}
inline const std::string& Employee::_internal_factorylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.factorylabel_.Get();
}
inline void Employee::_internal_set_factorylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.factorylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_factorylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.factorylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_factorylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.factoryLabel)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.factorylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.factorylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_factorylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.factorylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.factorylabel_.IsDefault()) {
          _impl_.factorylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.factoryLabel)
}

// optional string socialInsuranceNumber = 13 [json_name = "socialInsuranceNumber"];
inline bool Employee::has_socialinsurancenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Employee::clear_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsurancenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Employee::socialinsurancenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.socialInsuranceNumber)
  return _internal_socialinsurancenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_socialinsurancenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.socialinsurancenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.socialInsuranceNumber)
}
inline std::string* Employee::mutable_socialinsurancenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsurancenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.socialInsuranceNumber)
  return _s;
}
inline const std::string& Employee::_internal_socialinsurancenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsurancenumber_.Get();
}
inline void Employee::_internal_set_socialinsurancenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.socialinsurancenumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.socialinsurancenumber_.Mutable( GetArena());
}
inline std::string* Employee::release_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.socialInsuranceNumber)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.socialinsurancenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsurancenumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_socialinsurancenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.socialinsurancenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsurancenumber_.IsDefault()) {
          _impl_.socialinsurancenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.socialInsuranceNumber)
}

// optional string socialInsuranceBookNumber = 14 [json_name = "socialInsuranceBookNumber"];
inline bool Employee::has_socialinsurancebooknumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Employee::clear_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsurancebooknumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Employee::socialinsurancebooknumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.socialInsuranceBookNumber)
  return _internal_socialinsurancebooknumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_socialinsurancebooknumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.socialinsurancebooknumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.socialInsuranceBookNumber)
}
inline std::string* Employee::mutable_socialinsurancebooknumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsurancebooknumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.socialInsuranceBookNumber)
  return _s;
}
inline const std::string& Employee::_internal_socialinsurancebooknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsurancebooknumber_.Get();
}
inline void Employee::_internal_set_socialinsurancebooknumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.socialinsurancebooknumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.socialinsurancebooknumber_.Mutable( GetArena());
}
inline std::string* Employee::release_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.socialInsuranceBookNumber)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.socialinsurancebooknumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsurancebooknumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_socialinsurancebooknumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.socialinsurancebooknumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsurancebooknumber_.IsDefault()) {
          _impl_.socialinsurancebooknumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.socialInsuranceBookNumber)
}

// optional int64 socialInsuranceIssueDate = 15 [json_name = "socialInsuranceIssueDate"];
inline bool Employee::has_socialinsuranceissuedate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Employee::clear_socialinsuranceissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuedate_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::int64_t Employee::socialinsuranceissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.socialInsuranceIssueDate)
  return _internal_socialinsuranceissuedate();
}
inline void Employee::set_socialinsuranceissuedate(::int64_t value) {
  _internal_set_socialinsuranceissuedate(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.socialInsuranceIssueDate)
}
inline ::int64_t Employee::_internal_socialinsuranceissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsuranceissuedate_;
}
inline void Employee::_internal_set_socialinsuranceissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuedate_ = value;
}

// optional string socialInsuranceIssueCityId = 16 [json_name = "socialInsuranceIssueCityId", (.api.v1.ts_grid_opts) = {
inline bool Employee::has_socialinsuranceissuecityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Employee::clear_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuecityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Employee::socialinsuranceissuecityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.socialInsuranceIssueCityId)
  return _internal_socialinsuranceissuecityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_socialinsuranceissuecityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.socialinsuranceissuecityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.socialInsuranceIssueCityId)
}
inline std::string* Employee::mutable_socialinsuranceissuecityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsuranceissuecityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.socialInsuranceIssueCityId)
  return _s;
}
inline const std::string& Employee::_internal_socialinsuranceissuecityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsuranceissuecityid_.Get();
}
inline void Employee::_internal_set_socialinsuranceissuecityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.socialinsuranceissuecityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.socialinsuranceissuecityid_.Mutable( GetArena());
}
inline std::string* Employee::release_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.socialInsuranceIssueCityId)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.socialinsuranceissuecityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsuranceissuecityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_socialinsuranceissuecityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.socialinsuranceissuecityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsuranceissuecityid_.IsDefault()) {
          _impl_.socialinsuranceissuecityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.socialInsuranceIssueCityId)
}

// optional string socialInsuranceIssueCityLabel = 17 [json_name = "socialInsuranceIssueCityLabel"];
inline bool Employee::has_socialinsuranceissuecitylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Employee::clear_socialinsuranceissuecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuecitylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Employee::socialinsuranceissuecitylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.socialInsuranceIssueCityLabel)
  return _internal_socialinsuranceissuecitylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_socialinsuranceissuecitylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.socialinsuranceissuecitylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.socialInsuranceIssueCityLabel)
}
inline std::string* Employee::mutable_socialinsuranceissuecitylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsuranceissuecitylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.socialInsuranceIssueCityLabel)
  return _s;
}
inline const std::string& Employee::_internal_socialinsuranceissuecitylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsuranceissuecitylabel_.Get();
}
inline void Employee::_internal_set_socialinsuranceissuecitylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.socialinsuranceissuecitylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_socialinsuranceissuecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.socialinsuranceissuecitylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_socialinsuranceissuecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.socialInsuranceIssueCityLabel)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.socialinsuranceissuecitylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsuranceissuecitylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_socialinsuranceissuecitylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.socialinsuranceissuecitylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsuranceissuecitylabel_.IsDefault()) {
          _impl_.socialinsuranceissuecitylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.socialInsuranceIssueCityLabel)
}

// optional bool isInSocialInsurance = 18 [json_name = "isInSocialInsurance"];
inline bool Employee::has_isinsocialinsurance() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Employee::clear_isinsocialinsurance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isinsocialinsurance_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool Employee::isinsocialinsurance() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.isInSocialInsurance)
  return _internal_isinsocialinsurance();
}
inline void Employee::set_isinsocialinsurance(bool value) {
  _internal_set_isinsocialinsurance(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.isInSocialInsurance)
}
inline bool Employee::_internal_isinsocialinsurance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isinsocialinsurance_;
}
inline void Employee::_internal_set_isinsocialinsurance(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isinsocialinsurance_ = value;
}

// optional string bankId = 19 [json_name = "bankId", (.api.v1.ts_grid_opts) = {
inline bool Employee::has_bankid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Employee::clear_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Employee::bankid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankId)
  return _internal_bankid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_bankid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bankid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankId)
}
inline std::string* Employee::mutable_bankid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankId)
  return _s;
}
inline const std::string& Employee::_internal_bankid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankid_.Get();
}
inline void Employee::_internal_set_bankid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bankid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.bankid_.Mutable( GetArena());
}
inline std::string* Employee::release_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankId)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.bankid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_bankid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.bankid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankid_.IsDefault()) {
          _impl_.bankid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankId)
}

// optional string bankLabel = 20 [json_name = "bankLabel"];
inline bool Employee::has_banklabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Employee::clear_banklabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.banklabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Employee::banklabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankLabel)
  return _internal_banklabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_banklabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.banklabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankLabel)
}
inline std::string* Employee::mutable_banklabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_banklabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankLabel)
  return _s;
}
inline const std::string& Employee::_internal_banklabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.banklabel_.Get();
}
inline void Employee::_internal_set_banklabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.banklabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_banklabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.banklabel_.Mutable( GetArena());
}
inline std::string* Employee::release_banklabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankLabel)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.banklabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.banklabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_banklabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.banklabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.banklabel_.IsDefault()) {
          _impl_.banklabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankLabel)
}

// optional string bankAccountNumber = 21 [json_name = "bankAccountNumber"];
inline bool Employee::has_bankaccountnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Employee::clear_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankaccountnumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Employee::bankaccountnumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankAccountNumber)
  return _internal_bankaccountnumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_bankaccountnumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bankaccountnumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankAccountNumber)
}
inline std::string* Employee::mutable_bankaccountnumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankaccountnumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankAccountNumber)
  return _s;
}
inline const std::string& Employee::_internal_bankaccountnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankaccountnumber_.Get();
}
inline void Employee::_internal_set_bankaccountnumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bankaccountnumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.bankaccountnumber_.Mutable( GetArena());
}
inline std::string* Employee::release_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankAccountNumber)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.bankaccountnumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankaccountnumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_bankaccountnumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.bankaccountnumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankaccountnumber_.IsDefault()) {
          _impl_.bankaccountnumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankAccountNumber)
}

// optional string bankAccountHolderName = 22 [json_name = "bankAccountHolderName"];
inline bool Employee::has_bankaccountholdername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Employee::clear_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankaccountholdername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Employee::bankaccountholdername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankAccountHolderName)
  return _internal_bankaccountholdername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_bankaccountholdername(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bankaccountholdername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankAccountHolderName)
}
inline std::string* Employee::mutable_bankaccountholdername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankaccountholdername();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankAccountHolderName)
  return _s;
}
inline const std::string& Employee::_internal_bankaccountholdername() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankaccountholdername_.Get();
}
inline void Employee::_internal_set_bankaccountholdername(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bankaccountholdername_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.bankaccountholdername_.Mutable( GetArena());
}
inline std::string* Employee::release_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankAccountHolderName)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.bankaccountholdername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankaccountholdername_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_bankaccountholdername(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.bankaccountholdername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankaccountholdername_.IsDefault()) {
          _impl_.bankaccountholdername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankAccountHolderName)
}

// optional string bankCityId = 23 [json_name = "bankCityId", (.api.v1.ts_grid_opts) = {
inline bool Employee::has_bankcityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Employee::clear_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankcityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Employee::bankcityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankCityId)
  return _internal_bankcityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_bankcityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bankcityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankCityId)
}
inline std::string* Employee::mutable_bankcityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankcityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankCityId)
  return _s;
}
inline const std::string& Employee::_internal_bankcityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankcityid_.Get();
}
inline void Employee::_internal_set_bankcityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bankcityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.bankcityid_.Mutable( GetArena());
}
inline std::string* Employee::release_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankCityId)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.bankcityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankcityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_bankcityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.bankcityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankcityid_.IsDefault()) {
          _impl_.bankcityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankCityId)
}

// optional string bankCityLabel = 24 [json_name = "bankCityLabel"];
inline bool Employee::has_bankcitylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Employee::clear_bankcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankcitylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Employee::bankcitylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.bankCityLabel)
  return _internal_bankcitylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_bankcitylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bankcitylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.bankCityLabel)
}
inline std::string* Employee::mutable_bankcitylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankcitylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.bankCityLabel)
  return _s;
}
inline const std::string& Employee::_internal_bankcitylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankcitylabel_.Get();
}
inline void Employee::_internal_set_bankcitylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bankcitylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_bankcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.bankcitylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_bankcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.bankCityLabel)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.bankcitylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankcitylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_bankcitylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.bankcitylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankcitylabel_.IsDefault()) {
          _impl_.bankcitylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.bankCityLabel)
}

// optional string healthInsuranceNumber = 25 [json_name = "healthInsuranceNumber"];
inline bool Employee::has_healthinsurancenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Employee::clear_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsurancenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Employee::healthinsurancenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.healthInsuranceNumber)
  return _internal_healthinsurancenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_healthinsurancenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.healthinsurancenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.healthInsuranceNumber)
}
inline std::string* Employee::mutable_healthinsurancenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_healthinsurancenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.healthInsuranceNumber)
  return _s;
}
inline const std::string& Employee::_internal_healthinsurancenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsurancenumber_.Get();
}
inline void Employee::_internal_set_healthinsurancenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.healthinsurancenumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.healthinsurancenumber_.Mutable( GetArena());
}
inline std::string* Employee::release_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.healthInsuranceNumber)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.healthinsurancenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.healthinsurancenumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_healthinsurancenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.healthinsurancenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.healthinsurancenumber_.IsDefault()) {
          _impl_.healthinsurancenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.healthInsuranceNumber)
}

// optional int64 healthInsuranceIssueDate = 26 [json_name = "healthInsuranceIssueDate"];
inline bool Employee::has_healthinsuranceissuedate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Employee::clear_healthinsuranceissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceissuedate_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::int64_t Employee::healthinsuranceissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.healthInsuranceIssueDate)
  return _internal_healthinsuranceissuedate();
}
inline void Employee::set_healthinsuranceissuedate(::int64_t value) {
  _internal_set_healthinsuranceissuedate(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.healthInsuranceIssueDate)
}
inline ::int64_t Employee::_internal_healthinsuranceissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsuranceissuedate_;
}
inline void Employee::_internal_set_healthinsuranceissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceissuedate_ = value;
}

// optional int64 healthInsuranceExpireDate = 27 [json_name = "healthInsuranceExpireDate"];
inline bool Employee::has_healthinsuranceexpiredate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Employee::clear_healthinsuranceexpiredate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceexpiredate_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::int64_t Employee::healthinsuranceexpiredate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.healthInsuranceExpireDate)
  return _internal_healthinsuranceexpiredate();
}
inline void Employee::set_healthinsuranceexpiredate(::int64_t value) {
  _internal_set_healthinsuranceexpiredate(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.healthInsuranceExpireDate)
}
inline ::int64_t Employee::_internal_healthinsuranceexpiredate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsuranceexpiredate_;
}
inline void Employee::_internal_set_healthinsuranceexpiredate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceexpiredate_ = value;
}

// optional string medicalRegisterPlace = 28 [json_name = "medicalRegisterPlace"];
inline bool Employee::has_medicalregisterplace() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Employee::clear_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.medicalregisterplace_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Employee::medicalregisterplace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.medicalRegisterPlace)
  return _internal_medicalregisterplace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_medicalregisterplace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.medicalregisterplace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.medicalRegisterPlace)
}
inline std::string* Employee::mutable_medicalregisterplace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medicalregisterplace();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.medicalRegisterPlace)
  return _s;
}
inline const std::string& Employee::_internal_medicalregisterplace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.medicalregisterplace_.Get();
}
inline void Employee::_internal_set_medicalregisterplace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.medicalregisterplace_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.medicalregisterplace_.Mutable( GetArena());
}
inline std::string* Employee::release_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.medicalRegisterPlace)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.medicalregisterplace_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medicalregisterplace_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_medicalregisterplace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.medicalregisterplace_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medicalregisterplace_.IsDefault()) {
          _impl_.medicalregisterplace_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.medicalRegisterPlace)
}

// optional string medicalRegisterCityId = 29 [json_name = "medicalRegisterCityId", (.api.v1.ts_grid_opts) = {
inline bool Employee::has_medicalregistercityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Employee::clear_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.medicalregistercityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Employee::medicalregistercityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.medicalRegisterCityId)
  return _internal_medicalregistercityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_medicalregistercityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.medicalregistercityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.medicalRegisterCityId)
}
inline std::string* Employee::mutable_medicalregistercityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medicalregistercityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.medicalRegisterCityId)
  return _s;
}
inline const std::string& Employee::_internal_medicalregistercityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.medicalregistercityid_.Get();
}
inline void Employee::_internal_set_medicalregistercityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.medicalregistercityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.medicalregistercityid_.Mutable( GetArena());
}
inline std::string* Employee::release_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.medicalRegisterCityId)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.medicalregistercityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medicalregistercityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_medicalregistercityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.medicalregistercityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medicalregistercityid_.IsDefault()) {
          _impl_.medicalregistercityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.medicalRegisterCityId)
}

// optional string medicalRegisterCityLabel = 30 [json_name = "medicalRegisterCityLabel"];
inline bool Employee::has_medicalregistercitylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Employee::clear_medicalregistercitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.medicalregistercitylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Employee::medicalregistercitylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.medicalRegisterCityLabel)
  return _internal_medicalregistercitylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_medicalregistercitylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.medicalregistercitylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.medicalRegisterCityLabel)
}
inline std::string* Employee::mutable_medicalregistercitylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medicalregistercitylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.medicalRegisterCityLabel)
  return _s;
}
inline const std::string& Employee::_internal_medicalregistercitylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.medicalregistercitylabel_.Get();
}
inline void Employee::_internal_set_medicalregistercitylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.medicalregistercitylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_medicalregistercitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.medicalregistercitylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_medicalregistercitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.medicalRegisterCityLabel)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.medicalregistercitylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medicalregistercitylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_medicalregistercitylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.medicalregistercitylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medicalregistercitylabel_.IsDefault()) {
          _impl_.medicalregistercitylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.medicalRegisterCityLabel)
}

// string phoneNumber = 31 [json_name = "phoneNumber"];
inline void Employee::clear_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.ClearToEmpty();
}
inline const std::string& Employee::phonenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.phoneNumber)
  return _internal_phonenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_phonenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.phoneNumber)
}
inline std::string* Employee::mutable_phonenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.phoneNumber)
  return _s;
}
inline const std::string& Employee::_internal_phonenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phonenumber_.Get();
}
inline void Employee::_internal_set_phonenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.phonenumber_.Mutable( GetArena());
}
inline std::string* Employee::release_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.phoneNumber)
  return _impl_.phonenumber_.Release();
}
inline void Employee::set_allocated_phonenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenumber_.IsDefault()) {
          _impl_.phonenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.phoneNumber)
}

// string residenceCityId = 32 [json_name = "residenceCityId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.ClearToEmpty();
}
inline const std::string& Employee::residencecityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceCityId)
  return _internal_residencecityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencecityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceCityId)
}
inline std::string* Employee::mutable_residencecityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceCityId)
  return _s;
}
inline const std::string& Employee::_internal_residencecityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecityid_.Get();
}
inline void Employee::_internal_set_residencecityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencecityid_.Mutable( GetArena());
}
inline std::string* Employee::release_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceCityId)
  return _impl_.residencecityid_.Release();
}
inline void Employee::set_allocated_residencecityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecityid_.IsDefault()) {
          _impl_.residencecityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceCityId)
}

// optional string residenceCityLabel = 33 [json_name = "residenceCityLabel"];
inline bool Employee::has_residencecitylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Employee::clear_residencecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecitylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Employee::residencecitylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceCityLabel)
  return _internal_residencecitylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencecitylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.residencecitylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceCityLabel)
}
inline std::string* Employee::mutable_residencecitylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecitylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceCityLabel)
  return _s;
}
inline const std::string& Employee::_internal_residencecitylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecitylabel_.Get();
}
inline void Employee::_internal_set_residencecitylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.residencecitylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.residencecitylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_residencecitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceCityLabel)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.residencecitylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.residencecitylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_residencecitylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.residencecitylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecitylabel_.IsDefault()) {
          _impl_.residencecitylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceCityLabel)
}

// string residenceDistrictId = 34 [json_name = "residenceDistrictId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.ClearToEmpty();
}
inline const std::string& Employee::residencedistrictid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceDistrictId)
  return _internal_residencedistrictid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencedistrictid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceDistrictId)
}
inline std::string* Employee::mutable_residencedistrictid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencedistrictid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceDistrictId)
  return _s;
}
inline const std::string& Employee::_internal_residencedistrictid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencedistrictid_.Get();
}
inline void Employee::_internal_set_residencedistrictid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencedistrictid_.Mutable( GetArena());
}
inline std::string* Employee::release_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceDistrictId)
  return _impl_.residencedistrictid_.Release();
}
inline void Employee::set_allocated_residencedistrictid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencedistrictid_.IsDefault()) {
          _impl_.residencedistrictid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceDistrictId)
}

// optional string residenceDistrictLabel = 35 [json_name = "residenceDistrictLabel"];
inline bool Employee::has_residencedistrictlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Employee::clear_residencedistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Employee::residencedistrictlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceDistrictLabel)
  return _internal_residencedistrictlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencedistrictlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.residencedistrictlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceDistrictLabel)
}
inline std::string* Employee::mutable_residencedistrictlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencedistrictlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceDistrictLabel)
  return _s;
}
inline const std::string& Employee::_internal_residencedistrictlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencedistrictlabel_.Get();
}
inline void Employee::_internal_set_residencedistrictlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.residencedistrictlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencedistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.residencedistrictlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_residencedistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceDistrictLabel)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.residencedistrictlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.residencedistrictlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_residencedistrictlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.residencedistrictlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencedistrictlabel_.IsDefault()) {
          _impl_.residencedistrictlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceDistrictLabel)
}

// string residenceCommuneId = 36 [json_name = "residenceCommuneId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.ClearToEmpty();
}
inline const std::string& Employee::residencecommuneid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceCommuneId)
  return _internal_residencecommuneid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencecommuneid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceCommuneId)
}
inline std::string* Employee::mutable_residencecommuneid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecommuneid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceCommuneId)
  return _s;
}
inline const std::string& Employee::_internal_residencecommuneid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecommuneid_.Get();
}
inline void Employee::_internal_set_residencecommuneid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencecommuneid_.Mutable( GetArena());
}
inline std::string* Employee::release_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceCommuneId)
  return _impl_.residencecommuneid_.Release();
}
inline void Employee::set_allocated_residencecommuneid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecommuneid_.IsDefault()) {
          _impl_.residencecommuneid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceCommuneId)
}

// optional string residenceCommuneLabel = 37 [json_name = "residenceCommuneLabel"];
inline bool Employee::has_residencecommunelabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Employee::clear_residencecommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommunelabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const std::string& Employee::residencecommunelabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceCommuneLabel)
  return _internal_residencecommunelabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residencecommunelabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.residencecommunelabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceCommuneLabel)
}
inline std::string* Employee::mutable_residencecommunelabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecommunelabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceCommuneLabel)
  return _s;
}
inline const std::string& Employee::_internal_residencecommunelabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecommunelabel_.Get();
}
inline void Employee::_internal_set_residencecommunelabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.residencecommunelabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residencecommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.residencecommunelabel_.Mutable( GetArena());
}
inline std::string* Employee::release_residencecommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceCommuneLabel)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.residencecommunelabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.residencecommunelabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_residencecommunelabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.residencecommunelabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecommunelabel_.IsDefault()) {
          _impl_.residencecommunelabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceCommuneLabel)
}

// string residenceAddress = 38 [json_name = "residenceAddress"];
inline void Employee::clear_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.ClearToEmpty();
}
inline const std::string& Employee::residenceaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.residenceAddress)
  return _internal_residenceaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_residenceaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.residenceAddress)
}
inline std::string* Employee::mutable_residenceaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residenceaddress();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.residenceAddress)
  return _s;
}
inline const std::string& Employee::_internal_residenceaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residenceaddress_.Get();
}
inline void Employee::_internal_set_residenceaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residenceaddress_.Mutable( GetArena());
}
inline std::string* Employee::release_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.residenceAddress)
  return _impl_.residenceaddress_.Release();
}
inline void Employee::set_allocated_residenceaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residenceaddress_.IsDefault()) {
          _impl_.residenceaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.residenceAddress)
}

// string nationalityCountryId = 39 [json_name = "nationalityCountryId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.ClearToEmpty();
}
inline const std::string& Employee::nationalitycountryid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.nationalityCountryId)
  return _internal_nationalitycountryid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_nationalitycountryid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.nationalityCountryId)
}
inline std::string* Employee::mutable_nationalitycountryid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nationalitycountryid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.nationalityCountryId)
  return _s;
}
inline const std::string& Employee::_internal_nationalitycountryid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nationalitycountryid_.Get();
}
inline void Employee::_internal_set_nationalitycountryid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nationalitycountryid_.Mutable( GetArena());
}
inline std::string* Employee::release_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.nationalityCountryId)
  return _impl_.nationalitycountryid_.Release();
}
inline void Employee::set_allocated_nationalitycountryid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nationalitycountryid_.IsDefault()) {
          _impl_.nationalitycountryid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.nationalityCountryId)
}

// string ethnicityId = 40 [json_name = "ethnicityId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.ClearToEmpty();
}
inline const std::string& Employee::ethnicityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.ethnicityId)
  return _internal_ethnicityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_ethnicityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.ethnicityId)
}
inline std::string* Employee::mutable_ethnicityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ethnicityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.ethnicityId)
  return _s;
}
inline const std::string& Employee::_internal_ethnicityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ethnicityid_.Get();
}
inline void Employee::_internal_set_ethnicityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ethnicityid_.Mutable( GetArena());
}
inline std::string* Employee::release_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.ethnicityId)
  return _impl_.ethnicityid_.Release();
}
inline void Employee::set_allocated_ethnicityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ethnicityid_.IsDefault()) {
          _impl_.ethnicityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.ethnicityId)
}

// .core.v1.Gender gender = 41 [json_name = "gender"];
inline void Employee::clear_gender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = 0;
}
inline ::core::v1::Gender Employee::gender() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.gender)
  return _internal_gender();
}
inline void Employee::set_gender(::core::v1::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.gender)
}
inline ::core::v1::Gender Employee::_internal_gender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::core::v1::Gender>(_impl_.gender_);
}
inline void Employee::_internal_set_gender(::core::v1::Gender value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = value;
}

// string birthCityId = 42 [json_name = "birthCityId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.ClearToEmpty();
}
inline const std::string& Employee::birthcityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthCityId)
  return _internal_birthcityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthcityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthCityId)
}
inline std::string* Employee::mutable_birthcityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcityid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthCityId)
  return _s;
}
inline const std::string& Employee::_internal_birthcityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcityid_.Get();
}
inline void Employee::_internal_set_birthcityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthcityid_.Mutable( GetArena());
}
inline std::string* Employee::release_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthCityId)
  return _impl_.birthcityid_.Release();
}
inline void Employee::set_allocated_birthcityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcityid_.IsDefault()) {
          _impl_.birthcityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthCityId)
}

// optional string birthCityLabel = 43 [json_name = "birthCityLabel"];
inline bool Employee::has_birthcitylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Employee::clear_birthcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcitylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const std::string& Employee::birthcitylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthCityLabel)
  return _internal_birthcitylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthcitylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.birthcitylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthCityLabel)
}
inline std::string* Employee::mutable_birthcitylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcitylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthCityLabel)
  return _s;
}
inline const std::string& Employee::_internal_birthcitylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcitylabel_.Get();
}
inline void Employee::_internal_set_birthcitylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.birthcitylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.birthcitylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_birthcitylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthCityLabel)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.birthcitylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.birthcitylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_birthcitylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.birthcitylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcitylabel_.IsDefault()) {
          _impl_.birthcitylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthCityLabel)
}

// string birthDistrictId = 44 [json_name = "birthDistrictId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.ClearToEmpty();
}
inline const std::string& Employee::birthdistrictid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthDistrictId)
  return _internal_birthdistrictid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthdistrictid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthDistrictId)
}
inline std::string* Employee::mutable_birthdistrictid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthdistrictid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthDistrictId)
  return _s;
}
inline const std::string& Employee::_internal_birthdistrictid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthdistrictid_.Get();
}
inline void Employee::_internal_set_birthdistrictid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthdistrictid_.Mutable( GetArena());
}
inline std::string* Employee::release_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthDistrictId)
  return _impl_.birthdistrictid_.Release();
}
inline void Employee::set_allocated_birthdistrictid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthdistrictid_.IsDefault()) {
          _impl_.birthdistrictid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthDistrictId)
}

// optional string birthDistrictLabel = 45 [json_name = "birthDistrictLabel"];
inline bool Employee::has_birthdistrictlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Employee::clear_birthdistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const std::string& Employee::birthdistrictlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthDistrictLabel)
  return _internal_birthdistrictlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthdistrictlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.birthdistrictlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthDistrictLabel)
}
inline std::string* Employee::mutable_birthdistrictlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthdistrictlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthDistrictLabel)
  return _s;
}
inline const std::string& Employee::_internal_birthdistrictlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthdistrictlabel_.Get();
}
inline void Employee::_internal_set_birthdistrictlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.birthdistrictlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthdistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.birthdistrictlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_birthdistrictlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthDistrictLabel)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.birthdistrictlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.birthdistrictlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_birthdistrictlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.birthdistrictlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthdistrictlabel_.IsDefault()) {
          _impl_.birthdistrictlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthDistrictLabel)
}

// string birthCommuneId = 46 [json_name = "birthCommuneId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.ClearToEmpty();
}
inline const std::string& Employee::birthcommuneid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthCommuneId)
  return _internal_birthcommuneid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthcommuneid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthCommuneId)
}
inline std::string* Employee::mutable_birthcommuneid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcommuneid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthCommuneId)
  return _s;
}
inline const std::string& Employee::_internal_birthcommuneid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcommuneid_.Get();
}
inline void Employee::_internal_set_birthcommuneid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthcommuneid_.Mutable( GetArena());
}
inline std::string* Employee::release_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthCommuneId)
  return _impl_.birthcommuneid_.Release();
}
inline void Employee::set_allocated_birthcommuneid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcommuneid_.IsDefault()) {
          _impl_.birthcommuneid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthCommuneId)
}

// optional string birthCommuneLabel = 47 [json_name = "birthCommuneLabel"];
inline bool Employee::has_birthcommunelabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Employee::clear_birthcommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommunelabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const std::string& Employee::birthcommunelabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthCommuneLabel)
  return _internal_birthcommunelabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthcommunelabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.birthcommunelabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthCommuneLabel)
}
inline std::string* Employee::mutable_birthcommunelabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcommunelabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthCommuneLabel)
  return _s;
}
inline const std::string& Employee::_internal_birthcommunelabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcommunelabel_.Get();
}
inline void Employee::_internal_set_birthcommunelabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.birthcommunelabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthcommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  return _impl_.birthcommunelabel_.Mutable( GetArena());
}
inline std::string* Employee::release_birthcommunelabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthCommuneLabel)
  if ((_impl_._has_bits_[0] & 0x00800000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00800000u;
  auto* released = _impl_.birthcommunelabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.birthcommunelabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_birthcommunelabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.birthcommunelabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcommunelabel_.IsDefault()) {
          _impl_.birthcommunelabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthCommuneLabel)
}

// string birthAddress = 48 [json_name = "birthAddress"];
inline void Employee::clear_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.ClearToEmpty();
}
inline const std::string& Employee::birthaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.birthAddress)
  return _internal_birthaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_birthaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.birthAddress)
}
inline std::string* Employee::mutable_birthaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthaddress();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.birthAddress)
  return _s;
}
inline const std::string& Employee::_internal_birthaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthaddress_.Get();
}
inline void Employee::_internal_set_birthaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthaddress_.Mutable( GetArena());
}
inline std::string* Employee::release_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.birthAddress)
  return _impl_.birthaddress_.Release();
}
inline void Employee::set_allocated_birthaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthaddress_.IsDefault()) {
          _impl_.birthaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.birthAddress)
}

// optional string guardian = 49 [json_name = "guardian"];
inline bool Employee::has_guardian() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Employee::clear_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guardian_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const std::string& Employee::guardian() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.guardian)
  return _internal_guardian();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_guardian(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.guardian_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.guardian)
}
inline std::string* Employee::mutable_guardian() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_guardian();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.guardian)
  return _s;
}
inline const std::string& Employee::_internal_guardian() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.guardian_.Get();
}
inline void Employee::_internal_set_guardian(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.guardian_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  return _impl_.guardian_.Mutable( GetArena());
}
inline std::string* Employee::release_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.guardian)
  if ((_impl_._has_bits_[0] & 0x01000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x01000000u;
  auto* released = _impl_.guardian_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guardian_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_guardian(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.guardian_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.guardian_.IsDefault()) {
          _impl_.guardian_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.guardian)
}

// string identificationCardNumber = 50 [json_name = "identificationCardNumber"];
inline void Employee::clear_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.ClearToEmpty();
}
inline const std::string& Employee::identificationcardnumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.identificationCardNumber)
  return _internal_identificationcardnumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_identificationcardnumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.identificationCardNumber)
}
inline std::string* Employee::mutable_identificationcardnumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identificationcardnumber();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.identificationCardNumber)
  return _s;
}
inline const std::string& Employee::_internal_identificationcardnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardnumber_.Get();
}
inline void Employee::_internal_set_identificationcardnumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identificationcardnumber_.Mutable( GetArena());
}
inline std::string* Employee::release_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.identificationCardNumber)
  return _impl_.identificationcardnumber_.Release();
}
inline void Employee::set_allocated_identificationcardnumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identificationcardnumber_.IsDefault()) {
          _impl_.identificationcardnumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.identificationCardNumber)
}

// int64 identificationCardIssueDate = 51 [json_name = "identificationCardIssueDate"];
inline void Employee::clear_identificationcardissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissuedate_ = ::int64_t{0};
}
inline ::int64_t Employee::identificationcardissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.identificationCardIssueDate)
  return _internal_identificationcardissuedate();
}
inline void Employee::set_identificationcardissuedate(::int64_t value) {
  _internal_set_identificationcardissuedate(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.identificationCardIssueDate)
}
inline ::int64_t Employee::_internal_identificationcardissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardissuedate_;
}
inline void Employee::_internal_set_identificationcardissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissuedate_ = value;
}

// string identificationCardIssuePlace = 52 [json_name = "identificationCardIssuePlace"];
inline void Employee::clear_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.ClearToEmpty();
}
inline const std::string& Employee::identificationcardissueplace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.identificationCardIssuePlace)
  return _internal_identificationcardissueplace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_identificationcardissueplace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.identificationCardIssuePlace)
}
inline std::string* Employee::mutable_identificationcardissueplace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identificationcardissueplace();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.identificationCardIssuePlace)
  return _s;
}
inline const std::string& Employee::_internal_identificationcardissueplace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardissueplace_.Get();
}
inline void Employee::_internal_set_identificationcardissueplace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identificationcardissueplace_.Mutable( GetArena());
}
inline std::string* Employee::release_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.identificationCardIssuePlace)
  return _impl_.identificationcardissueplace_.Release();
}
inline void Employee::set_allocated_identificationcardissueplace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identificationcardissueplace_.IsDefault()) {
          _impl_.identificationcardissueplace_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.identificationCardIssuePlace)
}

// optional string subject = 53 [json_name = "subject"];
inline bool Employee::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Employee::clear_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const std::string& Employee::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_subject(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.subject)
}
inline std::string* Employee::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.subject)
  return _s;
}
inline const std::string& Employee::_internal_subject() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subject_.Get();
}
inline void Employee::_internal_set_subject(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* Employee::release_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.subject)
  if ((_impl_._has_bits_[0] & 0x02000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x02000000u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_subject(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.subject)
}

// optional string email = 54 [json_name = "email"];
inline bool Employee::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Employee::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const std::string& Employee::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.email)
}
inline std::string* Employee::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.email)
  return _s;
}
inline const std::string& Employee::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void Employee::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* Employee::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.email)
  if ((_impl_._has_bits_[0] & 0x04000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x04000000u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.email)
}

// optional string educationalLevel = 55 [json_name = "educationalLevel"];
inline bool Employee::has_educationallevel() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Employee::clear_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.educationallevel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const std::string& Employee::educationallevel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.educationalLevel)
  return _internal_educationallevel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_educationallevel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.educationallevel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.educationalLevel)
}
inline std::string* Employee::mutable_educationallevel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_educationallevel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.educationalLevel)
  return _s;
}
inline const std::string& Employee::_internal_educationallevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.educationallevel_.Get();
}
inline void Employee::_internal_set_educationallevel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.educationallevel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  return _impl_.educationallevel_.Mutable( GetArena());
}
inline std::string* Employee::release_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.educationalLevel)
  if ((_impl_._has_bits_[0] & 0x08000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x08000000u;
  auto* released = _impl_.educationallevel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.educationallevel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_educationallevel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.educationallevel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.educationallevel_.IsDefault()) {
          _impl_.educationallevel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.educationalLevel)
}

// optional .core.v1.JobStatus jobStatus = 56 [json_name = "jobStatus"];
inline bool Employee::has_jobstatus() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Employee::clear_jobstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobstatus_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::core::v1::JobStatus Employee::jobstatus() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.jobStatus)
  return _internal_jobstatus();
}
inline void Employee::set_jobstatus(::core::v1::JobStatus value) {
  _internal_set_jobstatus(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.jobStatus)
}
inline ::core::v1::JobStatus Employee::_internal_jobstatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::core::v1::JobStatus>(_impl_.jobstatus_);
}
inline void Employee::_internal_set_jobstatus(::core::v1::JobStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobstatus_ = value;
}

// optional int32 contributionRatePercentage = 58 [json_name = "contributionRatePercentage"];
inline bool Employee::has_contributionratepercentage() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Employee::clear_contributionratepercentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributionratepercentage_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int32_t Employee::contributionratepercentage() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.contributionRatePercentage)
  return _internal_contributionratepercentage();
}
inline void Employee::set_contributionratepercentage(::int32_t value) {
  _internal_set_contributionratepercentage(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.contributionRatePercentage)
}
inline ::int32_t Employee::_internal_contributionratepercentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributionratepercentage_;
}
inline void Employee::_internal_set_contributionratepercentage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributionratepercentage_ = value;
}

// optional bool isIncludeApprenticeIncome = 59 [json_name = "isIncludeApprenticeIncome"];
inline bool Employee::has_isincludeapprenticeincome() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Employee::clear_isincludeapprenticeincome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeapprenticeincome_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool Employee::isincludeapprenticeincome() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.isIncludeApprenticeIncome)
  return _internal_isincludeapprenticeincome();
}
inline void Employee::set_isincludeapprenticeincome(bool value) {
  _internal_set_isincludeapprenticeincome(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.isIncludeApprenticeIncome)
}
inline bool Employee::_internal_isincludeapprenticeincome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isincludeapprenticeincome_;
}
inline void Employee::_internal_set_isincludeapprenticeincome(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeapprenticeincome_ = value;
}

// optional bool isIncludeExcessIncome = 60 [json_name = "isIncludeExcessIncome"];
inline bool Employee::has_isincludeexcessincome() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Employee::clear_isincludeexcessincome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeexcessincome_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool Employee::isincludeexcessincome() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.isIncludeExcessIncome)
  return _internal_isincludeexcessincome();
}
inline void Employee::set_isincludeexcessincome(bool value) {
  _internal_set_isincludeexcessincome(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.isIncludeExcessIncome)
}
inline bool Employee::_internal_isincludeexcessincome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isincludeexcessincome_;
}
inline void Employee::_internal_set_isincludeexcessincome(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeexcessincome_ = value;
}

// int64 positionStartDate = 61 [json_name = "positionStartDate"];
inline void Employee::clear_positionstartdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionstartdate_ = ::int64_t{0};
}
inline ::int64_t Employee::positionstartdate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.positionStartDate)
  return _internal_positionstartdate();
}
inline void Employee::set_positionstartdate(::int64_t value) {
  _internal_set_positionstartdate(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.positionStartDate)
}
inline ::int64_t Employee::_internal_positionstartdate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionstartdate_;
}
inline void Employee::_internal_set_positionstartdate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionstartdate_ = value;
}

// optional int64 positionEndDate = 62 [json_name = "positionEndDate"];
inline bool Employee::has_positionenddate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Employee::clear_positionenddate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionenddate_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::int64_t Employee::positionenddate() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.positionEndDate)
  return _internal_positionenddate();
}
inline void Employee::set_positionenddate(::int64_t value) {
  _internal_set_positionenddate(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.positionEndDate)
}
inline ::int64_t Employee::_internal_positionenddate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionenddate_;
}
inline void Employee::_internal_set_positionenddate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionenddate_ = value;
}

// int64 dateOfJoiningFactory = 63 [json_name = "dateOfJoiningFactory"];
inline void Employee::clear_dateofjoiningfactory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofjoiningfactory_ = ::int64_t{0};
}
inline ::int64_t Employee::dateofjoiningfactory() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.dateOfJoiningFactory)
  return _internal_dateofjoiningfactory();
}
inline void Employee::set_dateofjoiningfactory(::int64_t value) {
  _internal_set_dateofjoiningfactory(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.dateOfJoiningFactory)
}
inline ::int64_t Employee::_internal_dateofjoiningfactory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofjoiningfactory_;
}
inline void Employee::_internal_set_dateofjoiningfactory(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofjoiningfactory_ = value;
}

// optional int32 availableAnnualDayOffs = 64 [json_name = "availableAnnualDayOffs"];
inline bool Employee::has_availableannualdayoffs() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Employee::clear_availableannualdayoffs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.availableannualdayoffs_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int32_t Employee::availableannualdayoffs() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.availableAnnualDayOffs)
  return _internal_availableannualdayoffs();
}
inline void Employee::set_availableannualdayoffs(::int32_t value) {
  _internal_set_availableannualdayoffs(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.availableAnnualDayOffs)
}
inline ::int32_t Employee::_internal_availableannualdayoffs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.availableannualdayoffs_;
}
inline void Employee::_internal_set_availableannualdayoffs(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.availableannualdayoffs_ = value;
}

// string shiftId = 74 [json_name = "shiftId", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.ClearToEmpty();
}
inline const std::string& Employee::shiftid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.shiftId)
  return _internal_shiftid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_shiftid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.shiftId)
}
inline std::string* Employee::mutable_shiftid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shiftid();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.shiftId)
  return _s;
}
inline const std::string& Employee::_internal_shiftid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shiftid_.Get();
}
inline void Employee::_internal_set_shiftid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shiftid_.Mutable( GetArena());
}
inline std::string* Employee::release_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.shiftId)
  return _impl_.shiftid_.Release();
}
inline void Employee::set_allocated_shiftid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shiftid_.IsDefault()) {
          _impl_.shiftid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.shiftId)
}

// optional string shiftLabel = 75 [json_name = "shiftLabel"];
inline bool Employee::has_shiftlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Employee::clear_shiftlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftlabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const std::string& Employee::shiftlabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.shiftLabel)
  return _internal_shiftlabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_shiftlabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.shiftlabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.shiftLabel)
}
inline std::string* Employee::mutable_shiftlabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shiftlabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.shiftLabel)
  return _s;
}
inline const std::string& Employee::_internal_shiftlabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shiftlabel_.Get();
}
inline void Employee::_internal_set_shiftlabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.shiftlabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_shiftlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  return _impl_.shiftlabel_.Mutable( GetArena());
}
inline std::string* Employee::release_shiftlabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.shiftLabel)
  if ((_impl_._has_bits_[0] & 0x10000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x10000000u;
  auto* released = _impl_.shiftlabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shiftlabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_shiftlabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.shiftlabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shiftlabel_.IsDefault()) {
          _impl_.shiftlabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.shiftLabel)
}

// string image = 76 [json_name = "image", (.api.v1.ts_grid_opts) = {
inline void Employee::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& Employee::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_image(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.image)
}
inline std::string* Employee::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.image)
  return _s;
}
inline const std::string& Employee::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_.Get();
}
inline void Employee::_internal_set_image(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* Employee::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.image)
  return _impl_.image_.Release();
}
inline void Employee::set_allocated_image(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.image)
}

// int64 createdAt = 100 [json_name = "createdAt"];
inline void Employee::clear_createdat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = ::int64_t{0};
}
inline ::int64_t Employee::createdat() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.createdAt)
  return _internal_createdat();
}
inline void Employee::set_createdat(::int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:core.v1.Employee.createdAt)
}
inline ::int64_t Employee::_internal_createdat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdat_;
}
inline void Employee::_internal_set_createdat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = value;
}

// string createdBy = 101 [json_name = "createdBy"];
inline void Employee::clear_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.ClearToEmpty();
}
inline const std::string& Employee::createdby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.createdBy)
  return _internal_createdby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_createdby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.createdBy)
}
inline std::string* Employee::mutable_createdby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_createdby();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.createdBy)
  return _s;
}
inline const std::string& Employee::_internal_createdby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdby_.Get();
}
inline void Employee::_internal_set_createdby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.createdby_.Mutable( GetArena());
}
inline std::string* Employee::release_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.createdBy)
  return _impl_.createdby_.Release();
}
inline void Employee::set_allocated_createdby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.createdby_.IsDefault()) {
          _impl_.createdby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.createdBy)
}

// optional string createdByLabel = 102 [json_name = "createdByLabel"];
inline bool Employee::has_createdbylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Employee::clear_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdbylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const std::string& Employee::createdbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.createdByLabel)
  return _internal_createdbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_createdbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.createdbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.createdByLabel)
}
inline std::string* Employee::mutable_createdbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_createdbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.createdByLabel)
  return _s;
}
inline const std::string& Employee::_internal_createdbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdbylabel_.Get();
}
inline void Employee::_internal_set_createdbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.createdbylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  return _impl_.createdbylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.createdByLabel)
  if ((_impl_._has_bits_[0] & 0x20000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x20000000u;
  auto* released = _impl_.createdbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_createdbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.createdbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.createdbylabel_.IsDefault()) {
          _impl_.createdbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.createdByLabel)
}

// optional int64 updatedAt = 103 [json_name = "updatedAt"];
inline bool Employee::has_updatedat() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Employee::clear_updatedat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedat_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int64_t Employee::updatedat() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.updatedAt)
  return _internal_updatedat();
}
inline void Employee::set_updatedat(::int64_t value) {
  _internal_set_updatedat(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.updatedAt)
}
inline ::int64_t Employee::_internal_updatedat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedat_;
}
inline void Employee::_internal_set_updatedat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedat_ = value;
}

// optional string updatedBy = 104 [json_name = "updatedBy"];
inline bool Employee::has_updatedby() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Employee::clear_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedby_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const std::string& Employee::updatedby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.updatedBy)
  return _internal_updatedby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_updatedby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.updatedby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.updatedBy)
}
inline std::string* Employee::mutable_updatedby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updatedby();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.updatedBy)
  return _s;
}
inline const std::string& Employee::_internal_updatedby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedby_.Get();
}
inline void Employee::_internal_set_updatedby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.updatedby_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  return _impl_.updatedby_.Mutable( GetArena());
}
inline std::string* Employee::release_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.updatedBy)
  if ((_impl_._has_bits_[0] & 0x40000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x40000000u;
  auto* released = _impl_.updatedby_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatedby_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_updatedby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.updatedby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.updatedby_.IsDefault()) {
          _impl_.updatedby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.updatedBy)
}

// optional string updatedByLabel = 105 [json_name = "updatedByLabel"];
inline bool Employee::has_updatedbylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Employee::clear_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedbylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const std::string& Employee::updatedbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.updatedByLabel)
  return _internal_updatedbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_updatedbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.updatedbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.updatedByLabel)
}
inline std::string* Employee::mutable_updatedbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updatedbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.updatedByLabel)
  return _s;
}
inline const std::string& Employee::_internal_updatedbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedbylabel_.Get();
}
inline void Employee::_internal_set_updatedbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.updatedbylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  return _impl_.updatedbylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.updatedByLabel)
  if ((_impl_._has_bits_[0] & 0x80000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x80000000u;
  auto* released = _impl_.updatedbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatedbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_updatedbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.updatedbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.updatedbylabel_.IsDefault()) {
          _impl_.updatedbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.updatedByLabel)
}

// optional int64 deletedAt = 106 [json_name = "deletedAt"];
inline bool Employee::has_deletedat() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Employee::clear_deletedat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedat_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::int64_t Employee::deletedat() const {
  // @@protoc_insertion_point(field_get:core.v1.Employee.deletedAt)
  return _internal_deletedat();
}
inline void Employee::set_deletedat(::int64_t value) {
  _internal_set_deletedat(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:core.v1.Employee.deletedAt)
}
inline ::int64_t Employee::_internal_deletedat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedat_;
}
inline void Employee::_internal_set_deletedat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedat_ = value;
}

// optional string deletedBy = 107 [json_name = "deletedBy"];
inline bool Employee::has_deletedby() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Employee::clear_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedby_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const std::string& Employee::deletedby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.deletedBy)
  return _internal_deletedby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_deletedby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.deletedby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.deletedBy)
}
inline std::string* Employee::mutable_deletedby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deletedby();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.deletedBy)
  return _s;
}
inline const std::string& Employee::_internal_deletedby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedby_.Get();
}
inline void Employee::_internal_set_deletedby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.deletedby_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  return _impl_.deletedby_.Mutable( GetArena());
}
inline std::string* Employee::release_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.deletedBy)
  if ((_impl_._has_bits_[1] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000001u;
  auto* released = _impl_.deletedby_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deletedby_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_deletedby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.deletedby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deletedby_.IsDefault()) {
          _impl_.deletedby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.deletedBy)
}

// optional string deletedByLabel = 108 [json_name = "deletedByLabel"];
inline bool Employee::has_deletedbylabel() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Employee::clear_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedbylabel_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const std::string& Employee::deletedbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.Employee.deletedByLabel)
  return _internal_deletedbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Employee::set_deletedbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.deletedbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.Employee.deletedByLabel)
}
inline std::string* Employee::mutable_deletedbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deletedbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.Employee.deletedByLabel)
  return _s;
}
inline const std::string& Employee::_internal_deletedbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedbylabel_.Get();
}
inline void Employee::_internal_set_deletedbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.deletedbylabel_.Set(value, GetArena());
}
inline std::string* Employee::_internal_mutable_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  return _impl_.deletedbylabel_.Mutable( GetArena());
}
inline std::string* Employee::release_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.Employee.deletedByLabel)
  if ((_impl_._has_bits_[1] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000002u;
  auto* released = _impl_.deletedbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deletedbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Employee::set_allocated_deletedbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.deletedbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deletedbylabel_.IsDefault()) {
          _impl_.deletedbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.Employee.deletedByLabel)
}

// -------------------------------------------------------------------

// SaveEmployeeRequest

// string id = 1 [json_name = "id"];
inline void SaveEmployeeRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.id)
}
inline std::string* SaveEmployeeRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.id)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void SaveEmployeeRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.id)
  return _impl_.id_.Release();
}
inline void SaveEmployeeRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.id)
}

// string userId = 2 [json_name = "userId"];
inline void SaveEmployeeRequest::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.userId)
}
inline std::string* SaveEmployeeRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.userId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.userId)
  return _impl_.userid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.userId)
}

// optional string code = 4 [json_name = "code"];
inline bool SaveEmployeeRequest::has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SaveEmployeeRequest::code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.code)
}
inline std::string* SaveEmployeeRequest::mutable_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.code)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_.Get();
}
inline void SaveEmployeeRequest::_internal_set_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.code_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.code)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.code_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.code)
}

// string fullName = 5 [json_name = "fullName"];
inline void SaveEmployeeRequest::clear_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::fullname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.fullName)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.fullName)
}
inline std::string* SaveEmployeeRequest::mutable_fullname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.fullName)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_fullname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fullname_.Get();
}
inline void SaveEmployeeRequest::_internal_set_fullname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fullname_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.fullName)
  return _impl_.fullname_.Release();
}
inline void SaveEmployeeRequest::set_allocated_fullname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.fullName)
}

// int64 dateOfBirth = 6 [json_name = "dateOfBirth"];
inline void SaveEmployeeRequest::clear_dateofbirth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofbirth_ = ::int64_t{0};
}
inline ::int64_t SaveEmployeeRequest::dateofbirth() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.dateOfBirth)
  return _internal_dateofbirth();
}
inline void SaveEmployeeRequest::set_dateofbirth(::int64_t value) {
  _internal_set_dateofbirth(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.dateOfBirth)
}
inline ::int64_t SaveEmployeeRequest::_internal_dateofbirth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofbirth_;
}
inline void SaveEmployeeRequest::_internal_set_dateofbirth(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofbirth_ = value;
}

// string departmentId = 7 [json_name = "departmentId"];
inline void SaveEmployeeRequest::clear_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::departmentid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.departmentId)
  return _internal_departmentid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_departmentid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.departmentId)
}
inline std::string* SaveEmployeeRequest::mutable_departmentid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_departmentid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.departmentId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_departmentid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.departmentid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_departmentid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.departmentid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_departmentid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.departmentId)
  return _impl_.departmentid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_departmentid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departmentid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.departmentid_.IsDefault()) {
          _impl_.departmentid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.departmentId)
}

// string positionId = 9 [json_name = "positionId"];
inline void SaveEmployeeRequest::clear_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::positionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.positionId)
  return _internal_positionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_positionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.positionId)
}
inline std::string* SaveEmployeeRequest::mutable_positionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positionid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.positionId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_positionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_positionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.positionid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_positionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.positionId)
  return _impl_.positionid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_positionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.positionid_.IsDefault()) {
          _impl_.positionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.positionId)
}

// string factoryId = 11 [json_name = "factoryId"];
inline void SaveEmployeeRequest::clear_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::factoryid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.factoryId)
  return _internal_factoryid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_factoryid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.factoryId)
}
inline std::string* SaveEmployeeRequest::mutable_factoryid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_factoryid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.factoryId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_factoryid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.factoryid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_factoryid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.factoryid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_factoryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.factoryId)
  return _impl_.factoryid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_factoryid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.factoryid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.factoryid_.IsDefault()) {
          _impl_.factoryid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.factoryId)
}

// optional string socialInsuranceNumber = 13 [json_name = "socialInsuranceNumber"];
inline bool SaveEmployeeRequest::has_socialinsurancenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsurancenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SaveEmployeeRequest::socialinsurancenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.socialInsuranceNumber)
  return _internal_socialinsurancenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_socialinsurancenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.socialinsurancenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.socialInsuranceNumber)
}
inline std::string* SaveEmployeeRequest::mutable_socialinsurancenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsurancenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.socialInsuranceNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_socialinsurancenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsurancenumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_socialinsurancenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.socialinsurancenumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.socialinsurancenumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_socialinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.socialInsuranceNumber)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.socialinsurancenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsurancenumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_socialinsurancenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.socialinsurancenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsurancenumber_.IsDefault()) {
          _impl_.socialinsurancenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.socialInsuranceNumber)
}

// optional string socialInsuranceBookNumber = 14 [json_name = "socialInsuranceBookNumber"];
inline bool SaveEmployeeRequest::has_socialinsurancebooknumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsurancebooknumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SaveEmployeeRequest::socialinsurancebooknumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.socialInsuranceBookNumber)
  return _internal_socialinsurancebooknumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_socialinsurancebooknumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.socialinsurancebooknumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.socialInsuranceBookNumber)
}
inline std::string* SaveEmployeeRequest::mutable_socialinsurancebooknumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsurancebooknumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.socialInsuranceBookNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_socialinsurancebooknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsurancebooknumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_socialinsurancebooknumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.socialinsurancebooknumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.socialinsurancebooknumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_socialinsurancebooknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.socialInsuranceBookNumber)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.socialinsurancebooknumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsurancebooknumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_socialinsurancebooknumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.socialinsurancebooknumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsurancebooknumber_.IsDefault()) {
          _impl_.socialinsurancebooknumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.socialInsuranceBookNumber)
}

// optional int64 socialInsuranceIssueDate = 15 [json_name = "socialInsuranceIssueDate"];
inline bool SaveEmployeeRequest::has_socialinsuranceissuedate() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_socialinsuranceissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuedate_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int64_t SaveEmployeeRequest::socialinsuranceissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.socialInsuranceIssueDate)
  return _internal_socialinsuranceissuedate();
}
inline void SaveEmployeeRequest::set_socialinsuranceissuedate(::int64_t value) {
  _internal_set_socialinsuranceissuedate(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.socialInsuranceIssueDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_socialinsuranceissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsuranceissuedate_;
}
inline void SaveEmployeeRequest::_internal_set_socialinsuranceissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuedate_ = value;
}

// optional string socialInsuranceIssueCityId = 16 [json_name = "socialInsuranceIssueCityId"];
inline bool SaveEmployeeRequest::has_socialinsuranceissuecityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socialinsuranceissuecityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SaveEmployeeRequest::socialinsuranceissuecityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.socialInsuranceIssueCityId)
  return _internal_socialinsuranceissuecityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_socialinsuranceissuecityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.socialinsuranceissuecityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.socialInsuranceIssueCityId)
}
inline std::string* SaveEmployeeRequest::mutable_socialinsuranceissuecityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_socialinsuranceissuecityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.socialInsuranceIssueCityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_socialinsuranceissuecityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socialinsuranceissuecityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_socialinsuranceissuecityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.socialinsuranceissuecityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.socialinsuranceissuecityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_socialinsuranceissuecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.socialInsuranceIssueCityId)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.socialinsuranceissuecityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socialinsuranceissuecityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_socialinsuranceissuecityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.socialinsuranceissuecityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.socialinsuranceissuecityid_.IsDefault()) {
          _impl_.socialinsuranceissuecityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.socialInsuranceIssueCityId)
}

// optional bool isInSocialInsurance = 18 [json_name = "isInSocialInsurance"];
inline bool SaveEmployeeRequest::has_isinsocialinsurance() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_isinsocialinsurance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isinsocialinsurance_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool SaveEmployeeRequest::isinsocialinsurance() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.isInSocialInsurance)
  return _internal_isinsocialinsurance();
}
inline void SaveEmployeeRequest::set_isinsocialinsurance(bool value) {
  _internal_set_isinsocialinsurance(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.isInSocialInsurance)
}
inline bool SaveEmployeeRequest::_internal_isinsocialinsurance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isinsocialinsurance_;
}
inline void SaveEmployeeRequest::_internal_set_isinsocialinsurance(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isinsocialinsurance_ = value;
}

// optional string bankId = 19 [json_name = "bankId"];
inline bool SaveEmployeeRequest::has_bankid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SaveEmployeeRequest::bankid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.bankId)
  return _internal_bankid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_bankid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bankid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.bankId)
}
inline std::string* SaveEmployeeRequest::mutable_bankid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.bankId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_bankid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_bankid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bankid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.bankid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_bankid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.bankId)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.bankid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_bankid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bankid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankid_.IsDefault()) {
          _impl_.bankid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.bankId)
}

// optional string bankAccountNumber = 21 [json_name = "bankAccountNumber"];
inline bool SaveEmployeeRequest::has_bankaccountnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankaccountnumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SaveEmployeeRequest::bankaccountnumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.bankAccountNumber)
  return _internal_bankaccountnumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_bankaccountnumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bankaccountnumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.bankAccountNumber)
}
inline std::string* SaveEmployeeRequest::mutable_bankaccountnumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankaccountnumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.bankAccountNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_bankaccountnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankaccountnumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_bankaccountnumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bankaccountnumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.bankaccountnumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_bankaccountnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.bankAccountNumber)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.bankaccountnumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankaccountnumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_bankaccountnumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.bankaccountnumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankaccountnumber_.IsDefault()) {
          _impl_.bankaccountnumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.bankAccountNumber)
}

// optional string bankAccountHolderName = 22 [json_name = "bankAccountHolderName"];
inline bool SaveEmployeeRequest::has_bankaccountholdername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankaccountholdername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SaveEmployeeRequest::bankaccountholdername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.bankAccountHolderName)
  return _internal_bankaccountholdername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_bankaccountholdername(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bankaccountholdername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.bankAccountHolderName)
}
inline std::string* SaveEmployeeRequest::mutable_bankaccountholdername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankaccountholdername();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.bankAccountHolderName)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_bankaccountholdername() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankaccountholdername_.Get();
}
inline void SaveEmployeeRequest::_internal_set_bankaccountholdername(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bankaccountholdername_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.bankaccountholdername_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_bankaccountholdername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.bankAccountHolderName)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.bankaccountholdername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankaccountholdername_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_bankaccountholdername(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.bankaccountholdername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankaccountholdername_.IsDefault()) {
          _impl_.bankaccountholdername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.bankAccountHolderName)
}

// optional string bankCityId = 23 [json_name = "bankCityId"];
inline bool SaveEmployeeRequest::has_bankcityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bankcityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SaveEmployeeRequest::bankcityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.bankCityId)
  return _internal_bankcityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_bankcityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bankcityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.bankCityId)
}
inline std::string* SaveEmployeeRequest::mutable_bankcityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bankcityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.bankCityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_bankcityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bankcityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_bankcityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bankcityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.bankcityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_bankcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.bankCityId)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.bankcityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bankcityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_bankcityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.bankcityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bankcityid_.IsDefault()) {
          _impl_.bankcityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.bankCityId)
}

// optional string healthInsuranceNumber = 25 [json_name = "healthInsuranceNumber"];
inline bool SaveEmployeeRequest::has_healthinsurancenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsurancenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& SaveEmployeeRequest::healthinsurancenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.healthInsuranceNumber)
  return _internal_healthinsurancenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_healthinsurancenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.healthinsurancenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.healthInsuranceNumber)
}
inline std::string* SaveEmployeeRequest::mutable_healthinsurancenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_healthinsurancenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.healthInsuranceNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_healthinsurancenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsurancenumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_healthinsurancenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.healthinsurancenumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.healthinsurancenumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_healthinsurancenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.healthInsuranceNumber)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.healthinsurancenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.healthinsurancenumber_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_healthinsurancenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.healthinsurancenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.healthinsurancenumber_.IsDefault()) {
          _impl_.healthinsurancenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.healthInsuranceNumber)
}

// optional int64 healthInsuranceIssueDate = 26 [json_name = "healthInsuranceIssueDate"];
inline bool SaveEmployeeRequest::has_healthinsuranceissuedate() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_healthinsuranceissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceissuedate_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t SaveEmployeeRequest::healthinsuranceissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.healthInsuranceIssueDate)
  return _internal_healthinsuranceissuedate();
}
inline void SaveEmployeeRequest::set_healthinsuranceissuedate(::int64_t value) {
  _internal_set_healthinsuranceissuedate(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.healthInsuranceIssueDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_healthinsuranceissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsuranceissuedate_;
}
inline void SaveEmployeeRequest::_internal_set_healthinsuranceissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceissuedate_ = value;
}

// optional int64 healthInsuranceExpireDate = 27 [json_name = "healthInsuranceExpireDate"];
inline bool SaveEmployeeRequest::has_healthinsuranceexpiredate() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_healthinsuranceexpiredate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceexpiredate_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int64_t SaveEmployeeRequest::healthinsuranceexpiredate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.healthInsuranceExpireDate)
  return _internal_healthinsuranceexpiredate();
}
inline void SaveEmployeeRequest::set_healthinsuranceexpiredate(::int64_t value) {
  _internal_set_healthinsuranceexpiredate(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.healthInsuranceExpireDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_healthinsuranceexpiredate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthinsuranceexpiredate_;
}
inline void SaveEmployeeRequest::_internal_set_healthinsuranceexpiredate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthinsuranceexpiredate_ = value;
}

// optional string medicalRegisterPlace = 28 [json_name = "medicalRegisterPlace"];
inline bool SaveEmployeeRequest::has_medicalregisterplace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.medicalregisterplace_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& SaveEmployeeRequest::medicalregisterplace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.medicalRegisterPlace)
  return _internal_medicalregisterplace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_medicalregisterplace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.medicalregisterplace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.medicalRegisterPlace)
}
inline std::string* SaveEmployeeRequest::mutable_medicalregisterplace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medicalregisterplace();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.medicalRegisterPlace)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_medicalregisterplace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.medicalregisterplace_.Get();
}
inline void SaveEmployeeRequest::_internal_set_medicalregisterplace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.medicalregisterplace_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.medicalregisterplace_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_medicalregisterplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.medicalRegisterPlace)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.medicalregisterplace_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medicalregisterplace_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_medicalregisterplace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.medicalregisterplace_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medicalregisterplace_.IsDefault()) {
          _impl_.medicalregisterplace_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.medicalRegisterPlace)
}

// optional string medicalRegisterCityId = 29 [json_name = "medicalRegisterCityId"];
inline bool SaveEmployeeRequest::has_medicalregistercityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.medicalregistercityid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& SaveEmployeeRequest::medicalregistercityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.medicalRegisterCityId)
  return _internal_medicalregistercityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_medicalregistercityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.medicalregistercityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.medicalRegisterCityId)
}
inline std::string* SaveEmployeeRequest::mutable_medicalregistercityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medicalregistercityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.medicalRegisterCityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_medicalregistercityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.medicalregistercityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_medicalregistercityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.medicalregistercityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.medicalregistercityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_medicalregistercityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.medicalRegisterCityId)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.medicalregistercityid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.medicalregistercityid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_medicalregistercityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.medicalregistercityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medicalregistercityid_.IsDefault()) {
          _impl_.medicalregistercityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.medicalRegisterCityId)
}

// string phoneNumber = 31 [json_name = "phoneNumber"];
inline void SaveEmployeeRequest::clear_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::phonenumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.phoneNumber)
  return _internal_phonenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_phonenumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.phoneNumber)
}
inline std::string* SaveEmployeeRequest::mutable_phonenumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.phoneNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_phonenumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phonenumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_phonenumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.phonenumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_phonenumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.phoneNumber)
  return _impl_.phonenumber_.Release();
}
inline void SaveEmployeeRequest::set_allocated_phonenumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phonenumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenumber_.IsDefault()) {
          _impl_.phonenumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.phoneNumber)
}

// string residenceCityId = 32 [json_name = "residenceCityId"];
inline void SaveEmployeeRequest::clear_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::residencecityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.residenceCityId)
  return _internal_residencecityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_residencecityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.residenceCityId)
}
inline std::string* SaveEmployeeRequest::mutable_residencecityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.residenceCityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_residencecityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_residencecityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencecityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_residencecityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.residenceCityId)
  return _impl_.residencecityid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_residencecityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecityid_.IsDefault()) {
          _impl_.residencecityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.residenceCityId)
}

// string residenceDistrictId = 34 [json_name = "residenceDistrictId"];
inline void SaveEmployeeRequest::clear_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::residencedistrictid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.residenceDistrictId)
  return _internal_residencedistrictid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_residencedistrictid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.residenceDistrictId)
}
inline std::string* SaveEmployeeRequest::mutable_residencedistrictid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencedistrictid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.residenceDistrictId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_residencedistrictid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencedistrictid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_residencedistrictid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencedistrictid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_residencedistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.residenceDistrictId)
  return _impl_.residencedistrictid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_residencedistrictid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencedistrictid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencedistrictid_.IsDefault()) {
          _impl_.residencedistrictid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.residenceDistrictId)
}

// string residenceCommuneId = 36 [json_name = "residenceCommuneId"];
inline void SaveEmployeeRequest::clear_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::residencecommuneid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.residenceCommuneId)
  return _internal_residencecommuneid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_residencecommuneid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.residenceCommuneId)
}
inline std::string* SaveEmployeeRequest::mutable_residencecommuneid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residencecommuneid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.residenceCommuneId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_residencecommuneid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residencecommuneid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_residencecommuneid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residencecommuneid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_residencecommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.residenceCommuneId)
  return _impl_.residencecommuneid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_residencecommuneid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residencecommuneid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residencecommuneid_.IsDefault()) {
          _impl_.residencecommuneid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.residenceCommuneId)
}

// string residenceAddress = 38 [json_name = "residenceAddress"];
inline void SaveEmployeeRequest::clear_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::residenceaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.residenceAddress)
  return _internal_residenceaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_residenceaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.residenceAddress)
}
inline std::string* SaveEmployeeRequest::mutable_residenceaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_residenceaddress();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.residenceAddress)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_residenceaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residenceaddress_.Get();
}
inline void SaveEmployeeRequest::_internal_set_residenceaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.residenceaddress_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_residenceaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.residenceAddress)
  return _impl_.residenceaddress_.Release();
}
inline void SaveEmployeeRequest::set_allocated_residenceaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residenceaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.residenceaddress_.IsDefault()) {
          _impl_.residenceaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.residenceAddress)
}

// string nationalityCountryId = 39 [json_name = "nationalityCountryId"];
inline void SaveEmployeeRequest::clear_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::nationalitycountryid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.nationalityCountryId)
  return _internal_nationalitycountryid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_nationalitycountryid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.nationalityCountryId)
}
inline std::string* SaveEmployeeRequest::mutable_nationalitycountryid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nationalitycountryid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.nationalityCountryId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_nationalitycountryid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nationalitycountryid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_nationalitycountryid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nationalitycountryid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_nationalitycountryid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.nationalityCountryId)
  return _impl_.nationalitycountryid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_nationalitycountryid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationalitycountryid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nationalitycountryid_.IsDefault()) {
          _impl_.nationalitycountryid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.nationalityCountryId)
}

// string ethnicityId = 40 [json_name = "ethnicityId"];
inline void SaveEmployeeRequest::clear_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::ethnicityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.ethnicityId)
  return _internal_ethnicityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_ethnicityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.ethnicityId)
}
inline std::string* SaveEmployeeRequest::mutable_ethnicityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ethnicityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.ethnicityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_ethnicityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ethnicityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_ethnicityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ethnicityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_ethnicityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.ethnicityId)
  return _impl_.ethnicityid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_ethnicityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ethnicityid_.IsDefault()) {
          _impl_.ethnicityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.ethnicityId)
}

// .core.v1.Gender gender = 41 [json_name = "gender"];
inline void SaveEmployeeRequest::clear_gender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = 0;
}
inline ::core::v1::Gender SaveEmployeeRequest::gender() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.gender)
  return _internal_gender();
}
inline void SaveEmployeeRequest::set_gender(::core::v1::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.gender)
}
inline ::core::v1::Gender SaveEmployeeRequest::_internal_gender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::core::v1::Gender>(_impl_.gender_);
}
inline void SaveEmployeeRequest::_internal_set_gender(::core::v1::Gender value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = value;
}

// string birthCityId = 42 [json_name = "birthCityId"];
inline void SaveEmployeeRequest::clear_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::birthcityid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.birthCityId)
  return _internal_birthcityid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_birthcityid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.birthCityId)
}
inline std::string* SaveEmployeeRequest::mutable_birthcityid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcityid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.birthCityId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_birthcityid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcityid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_birthcityid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthcityid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_birthcityid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.birthCityId)
  return _impl_.birthcityid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_birthcityid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcityid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcityid_.IsDefault()) {
          _impl_.birthcityid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.birthCityId)
}

// string birthDistrictId = 44 [json_name = "birthDistrictId"];
inline void SaveEmployeeRequest::clear_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::birthdistrictid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.birthDistrictId)
  return _internal_birthdistrictid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_birthdistrictid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.birthDistrictId)
}
inline std::string* SaveEmployeeRequest::mutable_birthdistrictid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthdistrictid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.birthDistrictId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_birthdistrictid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthdistrictid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_birthdistrictid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthdistrictid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_birthdistrictid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.birthDistrictId)
  return _impl_.birthdistrictid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_birthdistrictid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthdistrictid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthdistrictid_.IsDefault()) {
          _impl_.birthdistrictid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.birthDistrictId)
}

// string birthCommuneId = 46 [json_name = "birthCommuneId"];
inline void SaveEmployeeRequest::clear_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::birthcommuneid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.birthCommuneId)
  return _internal_birthcommuneid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_birthcommuneid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.birthCommuneId)
}
inline std::string* SaveEmployeeRequest::mutable_birthcommuneid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthcommuneid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.birthCommuneId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_birthcommuneid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthcommuneid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_birthcommuneid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthcommuneid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_birthcommuneid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.birthCommuneId)
  return _impl_.birthcommuneid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_birthcommuneid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthcommuneid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthcommuneid_.IsDefault()) {
          _impl_.birthcommuneid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.birthCommuneId)
}

// string birthAddress = 48 [json_name = "birthAddress"];
inline void SaveEmployeeRequest::clear_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::birthaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.birthAddress)
  return _internal_birthaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_birthaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.birthAddress)
}
inline std::string* SaveEmployeeRequest::mutable_birthaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_birthaddress();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.birthAddress)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_birthaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.birthaddress_.Get();
}
inline void SaveEmployeeRequest::_internal_set_birthaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.birthaddress_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_birthaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.birthAddress)
  return _impl_.birthaddress_.Release();
}
inline void SaveEmployeeRequest::set_allocated_birthaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.birthaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.birthaddress_.IsDefault()) {
          _impl_.birthaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.birthAddress)
}

// optional string guardian = 49 [json_name = "guardian"];
inline bool SaveEmployeeRequest::has_guardian() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guardian_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& SaveEmployeeRequest::guardian() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.guardian)
  return _internal_guardian();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_guardian(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.guardian_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.guardian)
}
inline std::string* SaveEmployeeRequest::mutable_guardian() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_guardian();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.guardian)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_guardian() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.guardian_.Get();
}
inline void SaveEmployeeRequest::_internal_set_guardian(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.guardian_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.guardian_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_guardian() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.guardian)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.guardian_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guardian_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_guardian(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.guardian_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.guardian_.IsDefault()) {
          _impl_.guardian_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.guardian)
}

// string identificationCardNumber = 50 [json_name = "identificationCardNumber"];
inline void SaveEmployeeRequest::clear_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::identificationcardnumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.identificationCardNumber)
  return _internal_identificationcardnumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_identificationcardnumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.identificationCardNumber)
}
inline std::string* SaveEmployeeRequest::mutable_identificationcardnumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identificationcardnumber();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.identificationCardNumber)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_identificationcardnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardnumber_.Get();
}
inline void SaveEmployeeRequest::_internal_set_identificationcardnumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identificationcardnumber_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_identificationcardnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.identificationCardNumber)
  return _impl_.identificationcardnumber_.Release();
}
inline void SaveEmployeeRequest::set_allocated_identificationcardnumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardnumber_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identificationcardnumber_.IsDefault()) {
          _impl_.identificationcardnumber_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.identificationCardNumber)
}

// int64 identificationCardIssueDate = 51 [json_name = "identificationCardIssueDate"];
inline void SaveEmployeeRequest::clear_identificationcardissuedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissuedate_ = ::int64_t{0};
}
inline ::int64_t SaveEmployeeRequest::identificationcardissuedate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.identificationCardIssueDate)
  return _internal_identificationcardissuedate();
}
inline void SaveEmployeeRequest::set_identificationcardissuedate(::int64_t value) {
  _internal_set_identificationcardissuedate(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.identificationCardIssueDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_identificationcardissuedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardissuedate_;
}
inline void SaveEmployeeRequest::_internal_set_identificationcardissuedate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissuedate_ = value;
}

// string identificationCardIssuePlace = 52 [json_name = "identificationCardIssuePlace"];
inline void SaveEmployeeRequest::clear_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::identificationcardissueplace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.identificationCardIssuePlace)
  return _internal_identificationcardissueplace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_identificationcardissueplace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.identificationCardIssuePlace)
}
inline std::string* SaveEmployeeRequest::mutable_identificationcardissueplace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identificationcardissueplace();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.identificationCardIssuePlace)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_identificationcardissueplace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identificationcardissueplace_.Get();
}
inline void SaveEmployeeRequest::_internal_set_identificationcardissueplace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identificationcardissueplace_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_identificationcardissueplace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.identificationCardIssuePlace)
  return _impl_.identificationcardissueplace_.Release();
}
inline void SaveEmployeeRequest::set_allocated_identificationcardissueplace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identificationcardissueplace_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identificationcardissueplace_.IsDefault()) {
          _impl_.identificationcardissueplace_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.identificationCardIssuePlace)
}

// optional string subject = 53 [json_name = "subject"];
inline bool SaveEmployeeRequest::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& SaveEmployeeRequest::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_subject(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.subject)
}
inline std::string* SaveEmployeeRequest::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.subject)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_subject() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subject_.Get();
}
inline void SaveEmployeeRequest::_internal_set_subject(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_subject() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.subject)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.subject_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_subject(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.subject)
}

// optional string email = 54 [json_name = "email"];
inline bool SaveEmployeeRequest::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& SaveEmployeeRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.email)
}
inline std::string* SaveEmployeeRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.email)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void SaveEmployeeRequest::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.email)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.email)
}

// optional string educationalLevel = 55 [json_name = "educationalLevel"];
inline bool SaveEmployeeRequest::has_educationallevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.educationallevel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& SaveEmployeeRequest::educationallevel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.educationalLevel)
  return _internal_educationallevel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_educationallevel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.educationallevel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.educationalLevel)
}
inline std::string* SaveEmployeeRequest::mutable_educationallevel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_educationallevel();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.educationalLevel)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_educationallevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.educationallevel_.Get();
}
inline void SaveEmployeeRequest::_internal_set_educationallevel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.educationallevel_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.educationallevel_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_educationallevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.educationalLevel)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.educationallevel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.educationallevel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveEmployeeRequest::set_allocated_educationallevel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.educationallevel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.educationallevel_.IsDefault()) {
          _impl_.educationallevel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.educationalLevel)
}

// optional .core.v1.JobStatus jobStatus = 56 [json_name = "jobStatus"];
inline bool SaveEmployeeRequest::has_jobstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_jobstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobstatus_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::core::v1::JobStatus SaveEmployeeRequest::jobstatus() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.jobStatus)
  return _internal_jobstatus();
}
inline void SaveEmployeeRequest::set_jobstatus(::core::v1::JobStatus value) {
  _internal_set_jobstatus(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.jobStatus)
}
inline ::core::v1::JobStatus SaveEmployeeRequest::_internal_jobstatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::core::v1::JobStatus>(_impl_.jobstatus_);
}
inline void SaveEmployeeRequest::_internal_set_jobstatus(::core::v1::JobStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobstatus_ = value;
}

// optional int32 contributionRatePercentage = 58 [json_name = "contributionRatePercentage"];
inline bool SaveEmployeeRequest::has_contributionratepercentage() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_contributionratepercentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributionratepercentage_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t SaveEmployeeRequest::contributionratepercentage() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.contributionRatePercentage)
  return _internal_contributionratepercentage();
}
inline void SaveEmployeeRequest::set_contributionratepercentage(::int32_t value) {
  _internal_set_contributionratepercentage(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.contributionRatePercentage)
}
inline ::int32_t SaveEmployeeRequest::_internal_contributionratepercentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributionratepercentage_;
}
inline void SaveEmployeeRequest::_internal_set_contributionratepercentage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributionratepercentage_ = value;
}

// optional bool isIncludeApprenticeIncome = 59 [json_name = "isIncludeApprenticeIncome"];
inline bool SaveEmployeeRequest::has_isincludeapprenticeincome() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_isincludeapprenticeincome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeapprenticeincome_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool SaveEmployeeRequest::isincludeapprenticeincome() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.isIncludeApprenticeIncome)
  return _internal_isincludeapprenticeincome();
}
inline void SaveEmployeeRequest::set_isincludeapprenticeincome(bool value) {
  _internal_set_isincludeapprenticeincome(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.isIncludeApprenticeIncome)
}
inline bool SaveEmployeeRequest::_internal_isincludeapprenticeincome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isincludeapprenticeincome_;
}
inline void SaveEmployeeRequest::_internal_set_isincludeapprenticeincome(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeapprenticeincome_ = value;
}

// optional bool isIncludeExcessIncome = 60 [json_name = "isIncludeExcessIncome"];
inline bool SaveEmployeeRequest::has_isincludeexcessincome() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_isincludeexcessincome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeexcessincome_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool SaveEmployeeRequest::isincludeexcessincome() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.isIncludeExcessIncome)
  return _internal_isincludeexcessincome();
}
inline void SaveEmployeeRequest::set_isincludeexcessincome(bool value) {
  _internal_set_isincludeexcessincome(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.isIncludeExcessIncome)
}
inline bool SaveEmployeeRequest::_internal_isincludeexcessincome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isincludeexcessincome_;
}
inline void SaveEmployeeRequest::_internal_set_isincludeexcessincome(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isincludeexcessincome_ = value;
}

// int64 positionStartDate = 61 [json_name = "positionStartDate"];
inline void SaveEmployeeRequest::clear_positionstartdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionstartdate_ = ::int64_t{0};
}
inline ::int64_t SaveEmployeeRequest::positionstartdate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.positionStartDate)
  return _internal_positionstartdate();
}
inline void SaveEmployeeRequest::set_positionstartdate(::int64_t value) {
  _internal_set_positionstartdate(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.positionStartDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_positionstartdate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionstartdate_;
}
inline void SaveEmployeeRequest::_internal_set_positionstartdate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionstartdate_ = value;
}

// optional int64 positionEndDate = 62 [json_name = "positionEndDate"];
inline bool SaveEmployeeRequest::has_positionenddate() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_positionenddate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionenddate_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int64_t SaveEmployeeRequest::positionenddate() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.positionEndDate)
  return _internal_positionenddate();
}
inline void SaveEmployeeRequest::set_positionenddate(::int64_t value) {
  _internal_set_positionenddate(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.positionEndDate)
}
inline ::int64_t SaveEmployeeRequest::_internal_positionenddate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positionenddate_;
}
inline void SaveEmployeeRequest::_internal_set_positionenddate(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positionenddate_ = value;
}

// int64 dateOfJoiningFactory = 63 [json_name = "dateOfJoiningFactory"];
inline void SaveEmployeeRequest::clear_dateofjoiningfactory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofjoiningfactory_ = ::int64_t{0};
}
inline ::int64_t SaveEmployeeRequest::dateofjoiningfactory() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.dateOfJoiningFactory)
  return _internal_dateofjoiningfactory();
}
inline void SaveEmployeeRequest::set_dateofjoiningfactory(::int64_t value) {
  _internal_set_dateofjoiningfactory(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.dateOfJoiningFactory)
}
inline ::int64_t SaveEmployeeRequest::_internal_dateofjoiningfactory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofjoiningfactory_;
}
inline void SaveEmployeeRequest::_internal_set_dateofjoiningfactory(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofjoiningfactory_ = value;
}

// optional int32 availableAnnualDayOffs = 64 [json_name = "availableAnnualDayOffs"];
inline bool SaveEmployeeRequest::has_availableannualdayoffs() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void SaveEmployeeRequest::clear_availableannualdayoffs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.availableannualdayoffs_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t SaveEmployeeRequest::availableannualdayoffs() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.availableAnnualDayOffs)
  return _internal_availableannualdayoffs();
}
inline void SaveEmployeeRequest::set_availableannualdayoffs(::int32_t value) {
  _internal_set_availableannualdayoffs(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.availableAnnualDayOffs)
}
inline ::int32_t SaveEmployeeRequest::_internal_availableannualdayoffs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.availableannualdayoffs_;
}
inline void SaveEmployeeRequest::_internal_set_availableannualdayoffs(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.availableannualdayoffs_ = value;
}

// string shiftId = 74 [json_name = "shiftId"];
inline void SaveEmployeeRequest::clear_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::shiftid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.shiftId)
  return _internal_shiftid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_shiftid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.shiftId)
}
inline std::string* SaveEmployeeRequest::mutable_shiftid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shiftid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.shiftId)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_shiftid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shiftid_.Get();
}
inline void SaveEmployeeRequest::_internal_set_shiftid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shiftid_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_shiftid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.shiftId)
  return _impl_.shiftid_.Release();
}
inline void SaveEmployeeRequest::set_allocated_shiftid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shiftid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shiftid_.IsDefault()) {
          _impl_.shiftid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.shiftId)
}

// string image = 76 [json_name = "image"];
inline void SaveEmployeeRequest::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& SaveEmployeeRequest::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveEmployeeRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveEmployeeRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveEmployeeRequest.image)
}
inline std::string* SaveEmployeeRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveEmployeeRequest.image)
  return _s;
}
inline const std::string& SaveEmployeeRequest::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_.Get();
}
inline void SaveEmployeeRequest::_internal_set_image(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.Set(value, GetArena());
}
inline std::string* SaveEmployeeRequest::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* SaveEmployeeRequest::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveEmployeeRequest.image)
  return _impl_.image_.Release();
}
inline void SaveEmployeeRequest::set_allocated_image(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveEmployeeRequest.image)
}

// -------------------------------------------------------------------

// ListEmployeeResponse

// repeated .core.v1.Employee items = 1 [json_name = "items"];
inline int ListEmployeeResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int ListEmployeeResponse::items_size() const {
  return _internal_items_size();
}
inline void ListEmployeeResponse::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::core::v1::Employee* ListEmployeeResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:core.v1.ListEmployeeResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::core::v1::Employee>* ListEmployeeResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:core.v1.ListEmployeeResponse.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::core::v1::Employee& ListEmployeeResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.ListEmployeeResponse.items)
  return _internal_items().Get(index);
}
inline ::core::v1::Employee* ListEmployeeResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::core::v1::Employee* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:core.v1.ListEmployeeResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::core::v1::Employee>& ListEmployeeResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:core.v1.ListEmployeeResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::core::v1::Employee>&
ListEmployeeResponse::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::core::v1::Employee>*
ListEmployeeResponse::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

// .api.v1.PaginationResponse pagination = 2 [json_name = "pagination"];
inline bool ListEmployeeResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::api::v1::PaginationResponse& ListEmployeeResponse::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::api::v1::PaginationResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::PaginationResponse&>(::api::v1::_PaginationResponse_default_instance_);
}
inline const ::api::v1::PaginationResponse& ListEmployeeResponse::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.ListEmployeeResponse.pagination)
  return _internal_pagination();
}
inline void ListEmployeeResponse::unsafe_arena_set_allocated_pagination(::api::v1::PaginationResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core.v1.ListEmployeeResponse.pagination)
}
inline ::api::v1::PaginationResponse* ListEmployeeResponse::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::api::v1::PaginationResponse* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::api::v1::PaginationResponse* ListEmployeeResponse::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.ListEmployeeResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::api::v1::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::api::v1::PaginationResponse* ListEmployeeResponse::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::api::v1::PaginationResponse>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(p);
  }
  return _impl_.pagination_;
}
inline ::api::v1::PaginationResponse* ListEmployeeResponse::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::api::v1::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:core.v1.ListEmployeeResponse.pagination)
  return _msg;
}
inline void ListEmployeeResponse::set_allocated_pagination(::api::v1::PaginationResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:core.v1.ListEmployeeResponse.pagination)
}

// -------------------------------------------------------------------

// GetMyEmployeeRecordResponse

// string id = 1 [json_name = "id"];
inline void GetMyEmployeeRecordResponse::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetMyEmployeeRecordResponse::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.GetMyEmployeeRecordResponse.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetMyEmployeeRecordResponse::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.GetMyEmployeeRecordResponse.id)
}
inline std::string* GetMyEmployeeRecordResponse::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:core.v1.GetMyEmployeeRecordResponse.id)
  return _s;
}
inline const std::string& GetMyEmployeeRecordResponse::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void GetMyEmployeeRecordResponse::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.GetMyEmployeeRecordResponse.id)
  return _impl_.id_.Release();
}
inline void GetMyEmployeeRecordResponse::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.GetMyEmployeeRecordResponse.id)
}

// string userId = 2 [json_name = "userId"];
inline void GetMyEmployeeRecordResponse::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetMyEmployeeRecordResponse::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.GetMyEmployeeRecordResponse.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetMyEmployeeRecordResponse::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.GetMyEmployeeRecordResponse.userId)
}
inline std::string* GetMyEmployeeRecordResponse::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:core.v1.GetMyEmployeeRecordResponse.userId)
  return _s;
}
inline const std::string& GetMyEmployeeRecordResponse::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void GetMyEmployeeRecordResponse::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.GetMyEmployeeRecordResponse.userId)
  return _impl_.userid_.Release();
}
inline void GetMyEmployeeRecordResponse::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.GetMyEmployeeRecordResponse.userId)
}

// string fullName = 3 [json_name = "fullName"];
inline void GetMyEmployeeRecordResponse::clear_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& GetMyEmployeeRecordResponse::fullname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.GetMyEmployeeRecordResponse.fullName)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetMyEmployeeRecordResponse::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.GetMyEmployeeRecordResponse.fullName)
}
inline std::string* GetMyEmployeeRecordResponse::mutable_fullname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:core.v1.GetMyEmployeeRecordResponse.fullName)
  return _s;
}
inline const std::string& GetMyEmployeeRecordResponse::_internal_fullname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fullname_.Get();
}
inline void GetMyEmployeeRecordResponse::_internal_set_fullname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.Set(value, GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::_internal_mutable_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fullname_.Mutable( GetArena());
}
inline std::string* GetMyEmployeeRecordResponse::release_fullname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.GetMyEmployeeRecordResponse.fullName)
  return _impl_.fullname_.Release();
}
inline void GetMyEmployeeRecordResponse::set_allocated_fullname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fullname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.GetMyEmployeeRecordResponse.fullName)
}

// optional int32 numberOfInOutRecord = 4 [json_name = "numberOfInOutRecord"];
inline bool GetMyEmployeeRecordResponse::has_numberofinoutrecord() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetMyEmployeeRecordResponse::clear_numberofinoutrecord() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numberofinoutrecord_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t GetMyEmployeeRecordResponse::numberofinoutrecord() const {
  // @@protoc_insertion_point(field_get:core.v1.GetMyEmployeeRecordResponse.numberOfInOutRecord)
  return _internal_numberofinoutrecord();
}
inline void GetMyEmployeeRecordResponse::set_numberofinoutrecord(::int32_t value) {
  _internal_set_numberofinoutrecord(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:core.v1.GetMyEmployeeRecordResponse.numberOfInOutRecord)
}
inline ::int32_t GetMyEmployeeRecordResponse::_internal_numberofinoutrecord() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.numberofinoutrecord_;
}
inline void GetMyEmployeeRecordResponse::_internal_set_numberofinoutrecord(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numberofinoutrecord_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace core


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::core::v1::Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::core::v1::Gender>() {
  return ::core::v1::Gender_descriptor();
}
template <>
struct is_proto_enum<::core::v1::JobStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::core::v1::JobStatus>() {
  return ::core::v1::JobStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2femployee_2eproto_2epb_2eh
