// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/v1/face_recognition_embeddings.proto

#include "core/v1/face_recognition_embeddings.pb.h"
#include "core/v1/face_recognition_embeddings.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core {
namespace v1 {

static const char* EmbeddingService_method_names[] = {
  "/core.v1.EmbeddingService/Get",
  "/core.v1.EmbeddingService/List",
};

std::unique_ptr< EmbeddingService::Stub> EmbeddingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmbeddingService::Stub> stub(new EmbeddingService::Stub(channel, options));
  return stub;
}

EmbeddingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(EmbeddingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(EmbeddingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmbeddingService::Stub::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::core::v1::Embedding* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetRequest, ::core::v1::Embedding, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void EmbeddingService::Stub::async::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::Embedding* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetRequest, ::core::v1::Embedding, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void EmbeddingService::Stub::async::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::Embedding* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::Embedding>* EmbeddingService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::Embedding, ::api::v1::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::Embedding>* EmbeddingService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmbeddingService::Stub::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::core::v1::ListEmbeddingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::SelectRequest, ::core::v1::ListEmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void EmbeddingService::Stub::async::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListEmbeddingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::SelectRequest, ::core::v1::ListEmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void EmbeddingService::Stub::async::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListEmbeddingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::ListEmbeddingResponse>* EmbeddingService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::ListEmbeddingResponse, ::api::v1::SelectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::ListEmbeddingResponse>* EmbeddingService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

EmbeddingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmbeddingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmbeddingService::Service, ::api::v1::GetRequest, ::core::v1::Embedding, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmbeddingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetRequest* req,
             ::core::v1::Embedding* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmbeddingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmbeddingService::Service, ::api::v1::SelectRequest, ::core::v1::ListEmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmbeddingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::SelectRequest* req,
             ::core::v1::ListEmbeddingResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
}

EmbeddingService::Service::~Service() {
}

::grpc::Status EmbeddingService::Service::Get(::grpc::ServerContext* context, const ::api::v1::GetRequest* request, ::core::v1::Embedding* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmbeddingService::Service::List(::grpc::ServerContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListEmbeddingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core
}  // namespace v1

