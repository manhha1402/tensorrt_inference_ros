// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/v1/attendance_setting.proto
#ifndef GRPC_core_2fv1_2fattendance_5fsetting_2eproto__INCLUDED
#define GRPC_core_2fv1_2fattendance_5fsetting_2eproto__INCLUDED

#include "core/v1/attendance_setting.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace core {
namespace v1 {

class AttendanceSettingService final {
 public:
  static constexpr char const* service_full_name() {
    return "core.v1.AttendanceSettingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::api::v1::AutocompleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>> AsyncAutocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>>(AsyncAutocompleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>> PrepareAsyncAutocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>>(PrepareAsyncAutocompleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::core::v1::AttendanceSetting* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> AsyncCreate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::core::v1::AttendanceSetting* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> AsyncGet(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> PrepareAsyncGet(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::core::v1::ListAttendanceSettingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>> AsyncList(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::core::v1::AttendanceSetting* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> AsyncUpdate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>> AsyncSoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>>(AsyncSoftDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>> PrepareAsyncSoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>>(PrepareAsyncSoftDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>* AsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::AutocompleteResponse>* PrepareAsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* AsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* AsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::ListAttendanceSettingResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::v1::AttendanceSetting>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>* AsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>* PrepareAsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::api::v1::AutocompleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>> AsyncAutocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>>(AsyncAutocompleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>> PrepareAsyncAutocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>>(PrepareAsyncAutocompleteRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::core::v1::AttendanceSetting* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> AsyncCreate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::core::v1::AttendanceSetting* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> AsyncGet(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> PrepareAsyncGet(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::core::v1::ListAttendanceSettingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>> AsyncList(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::core::v1::AttendanceSetting* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> AsyncUpdate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>> AsyncSoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>>(AsyncSoftDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>> PrepareAsyncSoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>>(PrepareAsyncSoftDeleteRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) override;
      void List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>* AsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>* PrepareAsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* AsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* AsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::ListAttendanceSettingResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::v1::AttendanceSetting>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveAttendanceSettingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* AsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* PrepareAsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Autocomplete_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_SoftDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Autocomplete(::grpc::ServerContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response);
    virtual ::grpc::Status SoftDelete(::grpc::ServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Autocomplete() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAutocomplete(::grpc::ServerContext* context, ::api::v1::AutocompleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::AutocompleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::core::v1::SaveAttendanceSettingRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::AttendanceSetting>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::api::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::AttendanceSetting>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::api::v1::SelectRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::ListAttendanceSettingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::core::v1::SaveAttendanceSettingRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::v1::AttendanceSetting>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SoftDelete() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSoftDelete(::grpc::ServerContext* context, ::api::v1::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::api::v1::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Autocomplete<WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_List<WithAsyncMethod_Update<WithAsyncMethod_SoftDelete<WithAsyncMethod_Delete<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Autocomplete() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response) { return this->Autocomplete(context, request, response); }));}
    void SetMessageAllocatorFor_Autocomplete(
        ::grpc::MessageAllocator< ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Autocomplete(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::GetRequest, ::core::v1::AttendanceSetting>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1::GetRequest* request, ::core::v1::AttendanceSetting* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::api::v1::GetRequest, ::core::v1::AttendanceSetting>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::GetRequest, ::core::v1::AttendanceSetting>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::SelectRequest, ::core::v1::ListAttendanceSettingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListAttendanceSettingResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::MessageAllocator< ::api::v1::SelectRequest, ::core::v1::ListAttendanceSettingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::SelectRequest, ::core::v1::ListAttendanceSettingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::v1::SaveAttendanceSettingRequest* request, ::core::v1::AttendanceSetting* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SoftDelete() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response) { return this->SoftDelete(context, request, response); }));}
    void SetMessageAllocatorFor_SoftDelete(
        ::grpc::MessageAllocator< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SoftDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Autocomplete<WithCallbackMethod_Create<WithCallbackMethod_Get<WithCallbackMethod_List<WithCallbackMethod_Update<WithCallbackMethod_SoftDelete<WithCallbackMethod_Delete<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Autocomplete() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SoftDelete() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Autocomplete() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAutocomplete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SoftDelete() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSoftDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Autocomplete() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Autocomplete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Autocomplete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SoftDelete() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SoftDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SoftDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Autocomplete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Autocomplete() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse>* streamer) {
                       return this->StreamedAutocomplete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Autocomplete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Autocomplete(::grpc::ServerContext* /*context*/, const ::api::v1::AutocompleteRequest* /*request*/, ::api::v1::AutocompleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAutocomplete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::AutocompleteRequest,::api::v1::AutocompleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::v1::SaveAttendanceSettingRequest,::core::v1::AttendanceSetting>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::GetRequest, ::core::v1::AttendanceSetting>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::GetRequest, ::core::v1::AttendanceSetting>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::api::v1::GetRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::GetRequest,::core::v1::AttendanceSetting>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::SelectRequest, ::core::v1::ListAttendanceSettingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::SelectRequest, ::core::v1::ListAttendanceSettingResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::api::v1::SelectRequest* /*request*/, ::core::v1::ListAttendanceSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::SelectRequest,::core::v1::ListAttendanceSettingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::v1::SaveAttendanceSettingRequest, ::core::v1::AttendanceSetting>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::core::v1::SaveAttendanceSettingRequest* /*request*/, ::core::v1::AttendanceSetting* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::v1::SaveAttendanceSettingRequest,::core::v1::AttendanceSetting>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SoftDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SoftDelete() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>* streamer) {
                       return this->StreamedSoftDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SoftDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SoftDelete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSoftDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::DeleteRequest,::api::v1::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1::DeleteRequest, ::api::v1::DeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::api::v1::DeleteRequest* /*request*/, ::api::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1::DeleteRequest,::api::v1::DeleteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Autocomplete<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_SoftDelete<WithStreamedUnaryMethod_Delete<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Autocomplete<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_SoftDelete<WithStreamedUnaryMethod_Delete<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace core


#endif  // GRPC_core_2fv1_2fattendance_5fsetting_2eproto__INCLUDED
