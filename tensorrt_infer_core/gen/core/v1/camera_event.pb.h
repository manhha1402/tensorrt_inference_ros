// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/v1/camera_event.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2fcamera_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2fcamera_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "api/v1/base.pb.h"
#include "api/v1/generators.pb.h"
#include "api/v1/permissions.pb.h"
#include "buf/validate/validate.pb.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_core_2fv1_2fcamera_5fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fv1_2fcamera_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_core_2fv1_2fcamera_5fevent_2eproto;
namespace core {
namespace v1 {
class CameraEvent;
struct CameraEventDefaultTypeInternal;
extern CameraEventDefaultTypeInternal _CameraEvent_default_instance_;
class ListCameraEventResponse;
struct ListCameraEventResponseDefaultTypeInternal;
extern ListCameraEventResponseDefaultTypeInternal _ListCameraEventResponse_default_instance_;
class SaveCameraEventRequest;
struct SaveCameraEventRequestDefaultTypeInternal;
extern SaveCameraEventRequestDefaultTypeInternal _SaveCameraEventRequest_default_instance_;
}  // namespace v1
}  // namespace core
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace core {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SaveCameraEventRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.SaveCameraEventRequest) */ {
 public:
  inline SaveCameraEventRequest() : SaveCameraEventRequest(nullptr) {}
  ~SaveCameraEventRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaveCameraEventRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaveCameraEventRequest(const SaveCameraEventRequest& from) : SaveCameraEventRequest(nullptr, from) {}
  inline SaveCameraEventRequest(SaveCameraEventRequest&& from) noexcept
      : SaveCameraEventRequest(nullptr, std::move(from)) {}
  inline SaveCameraEventRequest& operator=(const SaveCameraEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveCameraEventRequest& operator=(SaveCameraEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveCameraEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveCameraEventRequest* internal_default_instance() {
    return reinterpret_cast<const SaveCameraEventRequest*>(
        &_SaveCameraEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SaveCameraEventRequest& a, SaveCameraEventRequest& b) { a.Swap(&b); }
  inline void Swap(SaveCameraEventRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveCameraEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveCameraEventRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SaveCameraEventRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SaveCameraEventRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SaveCameraEventRequest& from) { SaveCameraEventRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SaveCameraEventRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.SaveCameraEventRequest"; }

 protected:
  explicit SaveCameraEventRequest(::google::protobuf::Arena* arena);
  SaveCameraEventRequest(::google::protobuf::Arena* arena, const SaveCameraEventRequest& from);
  SaveCameraEventRequest(::google::protobuf::Arena* arena, SaveCameraEventRequest&& from) noexcept
      : SaveCameraEventRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCroppedFacesFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kCameraIdFieldNumber = 3,
    kRecordTimeFieldNumber = 2,
    kScoreFieldNumber = 5,
  };
  // repeated bytes croppedFaces = 4 [json_name = "croppedFaces"];
  int croppedfaces_size() const;
  private:
  int _internal_croppedfaces_size() const;

  public:
  void clear_croppedfaces() ;
  const std::string& croppedfaces(int index) const;
  std::string* mutable_croppedfaces(int index);
  void set_croppedfaces(int index, const std::string& value);
  void set_croppedfaces(int index, std::string&& value);
  void set_croppedfaces(int index, const char* value);
  void set_croppedfaces(int index, const void* value, std::size_t size);
  void set_croppedfaces(int index, absl::string_view value);
  std::string* add_croppedfaces();
  void add_croppedfaces(const std::string& value);
  void add_croppedfaces(std::string&& value);
  void add_croppedfaces(const char* value);
  void add_croppedfaces(const void* value, std::size_t size);
  void add_croppedfaces(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& croppedfaces() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_croppedfaces();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_croppedfaces() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_croppedfaces();

  public:
  // string userId = 1 [json_name = "userId"];
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string cameraId = 3 [json_name = "cameraId"];
  void clear_cameraid() ;
  const std::string& cameraid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_cameraid();
  PROTOBUF_NODISCARD std::string* release_cameraid();
  void set_allocated_cameraid(std::string* value);

  private:
  const std::string& _internal_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraid(
      const std::string& value);
  std::string* _internal_mutable_cameraid();

  public:
  // int64 recordTime = 2 [json_name = "recordTime"];
  void clear_recordtime() ;
  ::int64_t recordtime() const;
  void set_recordtime(::int64_t value);

  private:
  ::int64_t _internal_recordtime() const;
  void _internal_set_recordtime(::int64_t value);

  public:
  // double score = 5 [json_name = "score"];
  void clear_score() ;
  double score() const;
  void set_score(double value);

  private:
  double _internal_score() const;
  void _internal_set_score(double value);

  public:
  // @@protoc_insertion_point(class_scope:core.v1.SaveCameraEventRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SaveCameraEventRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaveCameraEventRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> croppedfaces_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr cameraid_;
    ::int64_t recordtime_;
    double score_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2fcamera_5fevent_2eproto;
};
// -------------------------------------------------------------------

class CameraEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.CameraEvent) */ {
 public:
  inline CameraEvent() : CameraEvent(nullptr) {}
  ~CameraEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CameraEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline CameraEvent(const CameraEvent& from) : CameraEvent(nullptr, from) {}
  inline CameraEvent(CameraEvent&& from) noexcept
      : CameraEvent(nullptr, std::move(from)) {}
  inline CameraEvent& operator=(const CameraEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraEvent& operator=(CameraEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraEvent* internal_default_instance() {
    return reinterpret_cast<const CameraEvent*>(
        &_CameraEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CameraEvent& a, CameraEvent& b) { a.Swap(&b); }
  inline void Swap(CameraEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CameraEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CameraEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CameraEvent& from) { CameraEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CameraEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.CameraEvent"; }

 protected:
  explicit CameraEvent(::google::protobuf::Arena* arena);
  CameraEvent(::google::protobuf::Arena* arena, const CameraEvent& from);
  CameraEvent(::google::protobuf::Arena* arena, CameraEvent&& from) noexcept
      : CameraEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCroppedFacesFieldNumber = 5,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kCameraIdFieldNumber = 4,
    kCreatedByFieldNumber = 101,
    kCreatedByLabelFieldNumber = 102,
    kUpdatedByFieldNumber = 104,
    kUpdatedByLabelFieldNumber = 105,
    kDeletedByFieldNumber = 107,
    kDeletedByLabelFieldNumber = 108,
    kRecordTimeFieldNumber = 3,
    kScoreFieldNumber = 6,
    kCreatedAtFieldNumber = 100,
    kUpdatedAtFieldNumber = 103,
    kDeletedAtFieldNumber = 106,
  };
  // repeated bytes croppedFaces = 5 [json_name = "croppedFaces"];
  int croppedfaces_size() const;
  private:
  int _internal_croppedfaces_size() const;

  public:
  void clear_croppedfaces() ;
  const std::string& croppedfaces(int index) const;
  std::string* mutable_croppedfaces(int index);
  void set_croppedfaces(int index, const std::string& value);
  void set_croppedfaces(int index, std::string&& value);
  void set_croppedfaces(int index, const char* value);
  void set_croppedfaces(int index, const void* value, std::size_t size);
  void set_croppedfaces(int index, absl::string_view value);
  std::string* add_croppedfaces();
  void add_croppedfaces(const std::string& value);
  void add_croppedfaces(std::string&& value);
  void add_croppedfaces(const char* value);
  void add_croppedfaces(const void* value, std::size_t size);
  void add_croppedfaces(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& croppedfaces() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_croppedfaces();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_croppedfaces() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_croppedfaces();

  public:
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2 [json_name = "userId"];
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string cameraId = 4 [json_name = "cameraId"];
  void clear_cameraid() ;
  const std::string& cameraid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_cameraid();
  PROTOBUF_NODISCARD std::string* release_cameraid();
  void set_allocated_cameraid(std::string* value);

  private:
  const std::string& _internal_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraid(
      const std::string& value);
  std::string* _internal_mutable_cameraid();

  public:
  // string createdBy = 101 [json_name = "createdBy"];
  void clear_createdby() ;
  const std::string& createdby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_createdby(Arg_&& arg, Args_... args);
  std::string* mutable_createdby();
  PROTOBUF_NODISCARD std::string* release_createdby();
  void set_allocated_createdby(std::string* value);

  private:
  const std::string& _internal_createdby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdby(
      const std::string& value);
  std::string* _internal_mutable_createdby();

  public:
  // optional string createdByLabel = 102 [json_name = "createdByLabel"];
  bool has_createdbylabel() const;
  void clear_createdbylabel() ;
  const std::string& createdbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_createdbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_createdbylabel();
  PROTOBUF_NODISCARD std::string* release_createdbylabel();
  void set_allocated_createdbylabel(std::string* value);

  private:
  const std::string& _internal_createdbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdbylabel(
      const std::string& value);
  std::string* _internal_mutable_createdbylabel();

  public:
  // optional string updatedBy = 104 [json_name = "updatedBy"];
  bool has_updatedby() const;
  void clear_updatedby() ;
  const std::string& updatedby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updatedby(Arg_&& arg, Args_... args);
  std::string* mutable_updatedby();
  PROTOBUF_NODISCARD std::string* release_updatedby();
  void set_allocated_updatedby(std::string* value);

  private:
  const std::string& _internal_updatedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedby(
      const std::string& value);
  std::string* _internal_mutable_updatedby();

  public:
  // optional string updatedByLabel = 105 [json_name = "updatedByLabel"];
  bool has_updatedbylabel() const;
  void clear_updatedbylabel() ;
  const std::string& updatedbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updatedbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_updatedbylabel();
  PROTOBUF_NODISCARD std::string* release_updatedbylabel();
  void set_allocated_updatedbylabel(std::string* value);

  private:
  const std::string& _internal_updatedbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedbylabel(
      const std::string& value);
  std::string* _internal_mutable_updatedbylabel();

  public:
  // optional string deletedBy = 107 [json_name = "deletedBy"];
  bool has_deletedby() const;
  void clear_deletedby() ;
  const std::string& deletedby() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deletedby(Arg_&& arg, Args_... args);
  std::string* mutable_deletedby();
  PROTOBUF_NODISCARD std::string* release_deletedby();
  void set_allocated_deletedby(std::string* value);

  private:
  const std::string& _internal_deletedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletedby(
      const std::string& value);
  std::string* _internal_mutable_deletedby();

  public:
  // optional string deletedByLabel = 108 [json_name = "deletedByLabel"];
  bool has_deletedbylabel() const;
  void clear_deletedbylabel() ;
  const std::string& deletedbylabel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deletedbylabel(Arg_&& arg, Args_... args);
  std::string* mutable_deletedbylabel();
  PROTOBUF_NODISCARD std::string* release_deletedbylabel();
  void set_allocated_deletedbylabel(std::string* value);

  private:
  const std::string& _internal_deletedbylabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletedbylabel(
      const std::string& value);
  std::string* _internal_mutable_deletedbylabel();

  public:
  // int64 recordTime = 3 [json_name = "recordTime"];
  void clear_recordtime() ;
  ::int64_t recordtime() const;
  void set_recordtime(::int64_t value);

  private:
  ::int64_t _internal_recordtime() const;
  void _internal_set_recordtime(::int64_t value);

  public:
  // double score = 6 [json_name = "score"];
  void clear_score() ;
  double score() const;
  void set_score(double value);

  private:
  double _internal_score() const;
  void _internal_set_score(double value);

  public:
  // int64 createdAt = 100 [json_name = "createdAt"];
  void clear_createdat() ;
  ::int64_t createdat() const;
  void set_createdat(::int64_t value);

  private:
  ::int64_t _internal_createdat() const;
  void _internal_set_createdat(::int64_t value);

  public:
  // optional int64 updatedAt = 103 [json_name = "updatedAt"];
  bool has_updatedat() const;
  void clear_updatedat() ;
  ::int64_t updatedat() const;
  void set_updatedat(::int64_t value);

  private:
  ::int64_t _internal_updatedat() const;
  void _internal_set_updatedat(::int64_t value);

  public:
  // optional int64 deletedAt = 106 [json_name = "deletedAt"];
  bool has_deletedat() const;
  void clear_deletedat() ;
  ::int64_t deletedat() const;
  void set_deletedat(::int64_t value);

  private:
  ::int64_t _internal_deletedat() const;
  void _internal_set_deletedat(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.v1.CameraEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 0,
      121, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CameraEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CameraEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> croppedfaces_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr cameraid_;
    ::google::protobuf::internal::ArenaStringPtr createdby_;
    ::google::protobuf::internal::ArenaStringPtr createdbylabel_;
    ::google::protobuf::internal::ArenaStringPtr updatedby_;
    ::google::protobuf::internal::ArenaStringPtr updatedbylabel_;
    ::google::protobuf::internal::ArenaStringPtr deletedby_;
    ::google::protobuf::internal::ArenaStringPtr deletedbylabel_;
    ::int64_t recordtime_;
    double score_;
    ::int64_t createdat_;
    ::int64_t updatedat_;
    ::int64_t deletedat_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2fcamera_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ListCameraEventResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core.v1.ListCameraEventResponse) */ {
 public:
  inline ListCameraEventResponse() : ListCameraEventResponse(nullptr) {}
  ~ListCameraEventResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListCameraEventResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListCameraEventResponse(const ListCameraEventResponse& from) : ListCameraEventResponse(nullptr, from) {}
  inline ListCameraEventResponse(ListCameraEventResponse&& from) noexcept
      : ListCameraEventResponse(nullptr, std::move(from)) {}
  inline ListCameraEventResponse& operator=(const ListCameraEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCameraEventResponse& operator=(ListCameraEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCameraEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCameraEventResponse* internal_default_instance() {
    return reinterpret_cast<const ListCameraEventResponse*>(
        &_ListCameraEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListCameraEventResponse& a, ListCameraEventResponse& b) { a.Swap(&b); }
  inline void Swap(ListCameraEventResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCameraEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCameraEventResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ListCameraEventResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListCameraEventResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListCameraEventResponse& from) { ListCameraEventResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListCameraEventResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core.v1.ListCameraEventResponse"; }

 protected:
  explicit ListCameraEventResponse(::google::protobuf::Arena* arena);
  ListCameraEventResponse(::google::protobuf::Arena* arena, const ListCameraEventResponse& from);
  ListCameraEventResponse(::google::protobuf::Arena* arena, ListCameraEventResponse&& from) noexcept
      : ListCameraEventResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .core.v1.CameraEvent items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::core::v1::CameraEvent* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>* mutable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>* _internal_mutable_items();
  public:
  const ::core::v1::CameraEvent& items(int index) const;
  ::core::v1::CameraEvent* add_items();
  const ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>& items() const;
  // .api.v1.PaginationResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::api::v1::PaginationResponse& pagination() const;
  PROTOBUF_NODISCARD ::api::v1::PaginationResponse* release_pagination();
  ::api::v1::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::api::v1::PaginationResponse* value);
  void unsafe_arena_set_allocated_pagination(::api::v1::PaginationResponse* value);
  ::api::v1::PaginationResponse* unsafe_arena_release_pagination();

  private:
  const ::api::v1::PaginationResponse& _internal_pagination() const;
  ::api::v1::PaginationResponse* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:core.v1.ListCameraEventResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListCameraEventResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListCameraEventResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::core::v1::CameraEvent > items_;
    ::api::v1::PaginationResponse* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fv1_2fcamera_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CameraEvent

// string id = 1 [json_name = "id"];
inline void CameraEvent::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CameraEvent::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.id)
}
inline std::string* CameraEvent::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.id)
  return _s;
}
inline const std::string& CameraEvent::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void CameraEvent::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.id)
  return _impl_.id_.Release();
}
inline void CameraEvent::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.id)
}

// string userId = 2 [json_name = "userId"];
inline void CameraEvent::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CameraEvent::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.userId)
}
inline std::string* CameraEvent::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.userId)
  return _s;
}
inline const std::string& CameraEvent::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void CameraEvent::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.userId)
  return _impl_.userid_.Release();
}
inline void CameraEvent::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.userId)
}

// int64 recordTime = 3 [json_name = "recordTime"];
inline void CameraEvent::clear_recordtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordtime_ = ::int64_t{0};
}
inline ::int64_t CameraEvent::recordtime() const {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.recordTime)
  return _internal_recordtime();
}
inline void CameraEvent::set_recordtime(::int64_t value) {
  _internal_set_recordtime(value);
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.recordTime)
}
inline ::int64_t CameraEvent::_internal_recordtime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recordtime_;
}
inline void CameraEvent::_internal_set_recordtime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordtime_ = value;
}

// string cameraId = 4 [json_name = "cameraId"];
inline void CameraEvent::clear_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.ClearToEmpty();
}
inline const std::string& CameraEvent::cameraid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.cameraId)
  return _internal_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_cameraid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.cameraId)
}
inline std::string* CameraEvent::mutable_cameraid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cameraid();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.cameraId)
  return _s;
}
inline const std::string& CameraEvent::_internal_cameraid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cameraid_.Get();
}
inline void CameraEvent::_internal_set_cameraid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cameraid_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.cameraId)
  return _impl_.cameraid_.Release();
}
inline void CameraEvent::set_allocated_cameraid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraid_.IsDefault()) {
          _impl_.cameraid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.cameraId)
}

// repeated bytes croppedFaces = 5 [json_name = "croppedFaces"];
inline int CameraEvent::_internal_croppedfaces_size() const {
  return _internal_croppedfaces().size();
}
inline int CameraEvent::croppedfaces_size() const {
  return _internal_croppedfaces_size();
}
inline void CameraEvent::clear_croppedfaces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.croppedfaces_.Clear();
}
inline std::string* CameraEvent::add_croppedfaces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_croppedfaces()->Add();
  // @@protoc_insertion_point(field_add_mutable:core.v1.CameraEvent.croppedFaces)
  return _s;
}
inline const std::string& CameraEvent::croppedfaces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.croppedFaces)
  return _internal_croppedfaces().Get(index);
}
inline std::string* CameraEvent::mutable_croppedfaces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.croppedFaces)
  return _internal_mutable_croppedfaces()->Mutable(index);
}
inline void CameraEvent::set_croppedfaces(int index, const std::string& value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::set_croppedfaces(int index, std::string&& value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::set_croppedfaces(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_croppedfaces()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::set_croppedfaces(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::set_croppedfaces(int index, absl::string_view value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::add_croppedfaces(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::add_croppedfaces(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::add_croppedfaces(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::add_croppedfaces(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:core.v1.CameraEvent.croppedFaces)
}
inline void CameraEvent::add_croppedfaces(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:core.v1.CameraEvent.croppedFaces)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CameraEvent::croppedfaces() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:core.v1.CameraEvent.croppedFaces)
  return _internal_croppedfaces();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CameraEvent::mutable_croppedfaces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:core.v1.CameraEvent.croppedFaces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_croppedfaces();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CameraEvent::_internal_croppedfaces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.croppedfaces_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CameraEvent::_internal_mutable_croppedfaces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.croppedfaces_;
}

// double score = 6 [json_name = "score"];
inline void CameraEvent::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline double CameraEvent::score() const {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.score)
  return _internal_score();
}
inline void CameraEvent::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.score)
}
inline double CameraEvent::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void CameraEvent::_internal_set_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// int64 createdAt = 100 [json_name = "createdAt"];
inline void CameraEvent::clear_createdat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = ::int64_t{0};
}
inline ::int64_t CameraEvent::createdat() const {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.createdAt)
  return _internal_createdat();
}
inline void CameraEvent::set_createdat(::int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.createdAt)
}
inline ::int64_t CameraEvent::_internal_createdat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdat_;
}
inline void CameraEvent::_internal_set_createdat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = value;
}

// string createdBy = 101 [json_name = "createdBy"];
inline void CameraEvent::clear_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.ClearToEmpty();
}
inline const std::string& CameraEvent::createdby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.createdBy)
  return _internal_createdby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_createdby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.createdBy)
}
inline std::string* CameraEvent::mutable_createdby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_createdby();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.createdBy)
  return _s;
}
inline const std::string& CameraEvent::_internal_createdby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdby_.Get();
}
inline void CameraEvent::_internal_set_createdby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.createdby_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_createdby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.createdBy)
  return _impl_.createdby_.Release();
}
inline void CameraEvent::set_allocated_createdby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.createdby_.IsDefault()) {
          _impl_.createdby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.createdBy)
}

// optional string createdByLabel = 102 [json_name = "createdByLabel"];
inline bool CameraEvent::has_createdbylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CameraEvent::clear_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdbylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraEvent::createdbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.createdByLabel)
  return _internal_createdbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_createdbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.createdbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.createdByLabel)
}
inline std::string* CameraEvent::mutable_createdbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_createdbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.createdByLabel)
  return _s;
}
inline const std::string& CameraEvent::_internal_createdbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdbylabel_.Get();
}
inline void CameraEvent::_internal_set_createdbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.createdbylabel_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.createdbylabel_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_createdbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.createdByLabel)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.createdbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraEvent::set_allocated_createdbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.createdbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.createdbylabel_.IsDefault()) {
          _impl_.createdbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.createdByLabel)
}

// optional int64 updatedAt = 103 [json_name = "updatedAt"];
inline bool CameraEvent::has_updatedat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CameraEvent::clear_updatedat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedat_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t CameraEvent::updatedat() const {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.updatedAt)
  return _internal_updatedat();
}
inline void CameraEvent::set_updatedat(::int64_t value) {
  _internal_set_updatedat(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.updatedAt)
}
inline ::int64_t CameraEvent::_internal_updatedat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedat_;
}
inline void CameraEvent::_internal_set_updatedat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedat_ = value;
}

// optional string updatedBy = 104 [json_name = "updatedBy"];
inline bool CameraEvent::has_updatedby() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CameraEvent::clear_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedby_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraEvent::updatedby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.updatedBy)
  return _internal_updatedby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_updatedby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.updatedby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.updatedBy)
}
inline std::string* CameraEvent::mutable_updatedby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updatedby();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.updatedBy)
  return _s;
}
inline const std::string& CameraEvent::_internal_updatedby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedby_.Get();
}
inline void CameraEvent::_internal_set_updatedby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.updatedby_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.updatedby_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_updatedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.updatedBy)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.updatedby_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatedby_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraEvent::set_allocated_updatedby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.updatedby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.updatedby_.IsDefault()) {
          _impl_.updatedby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.updatedBy)
}

// optional string updatedByLabel = 105 [json_name = "updatedByLabel"];
inline bool CameraEvent::has_updatedbylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CameraEvent::clear_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updatedbylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CameraEvent::updatedbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.updatedByLabel)
  return _internal_updatedbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_updatedbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.updatedbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.updatedByLabel)
}
inline std::string* CameraEvent::mutable_updatedbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updatedbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.updatedByLabel)
  return _s;
}
inline const std::string& CameraEvent::_internal_updatedbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updatedbylabel_.Get();
}
inline void CameraEvent::_internal_set_updatedbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.updatedbylabel_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.updatedbylabel_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_updatedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.updatedByLabel)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.updatedbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatedbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraEvent::set_allocated_updatedbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.updatedbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.updatedbylabel_.IsDefault()) {
          _impl_.updatedbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.updatedByLabel)
}

// optional int64 deletedAt = 106 [json_name = "deletedAt"];
inline bool CameraEvent::has_deletedat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CameraEvent::clear_deletedat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedat_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t CameraEvent::deletedat() const {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.deletedAt)
  return _internal_deletedat();
}
inline void CameraEvent::set_deletedat(::int64_t value) {
  _internal_set_deletedat(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.deletedAt)
}
inline ::int64_t CameraEvent::_internal_deletedat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedat_;
}
inline void CameraEvent::_internal_set_deletedat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedat_ = value;
}

// optional string deletedBy = 107 [json_name = "deletedBy"];
inline bool CameraEvent::has_deletedby() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CameraEvent::clear_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedby_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CameraEvent::deletedby() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.deletedBy)
  return _internal_deletedby();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_deletedby(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deletedby_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.deletedBy)
}
inline std::string* CameraEvent::mutable_deletedby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deletedby();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.deletedBy)
  return _s;
}
inline const std::string& CameraEvent::_internal_deletedby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedby_.Get();
}
inline void CameraEvent::_internal_set_deletedby(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deletedby_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.deletedby_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_deletedby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.deletedBy)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.deletedby_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deletedby_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraEvent::set_allocated_deletedby(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.deletedby_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deletedby_.IsDefault()) {
          _impl_.deletedby_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.deletedBy)
}

// optional string deletedByLabel = 108 [json_name = "deletedByLabel"];
inline bool CameraEvent::has_deletedbylabel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CameraEvent::clear_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletedbylabel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CameraEvent::deletedbylabel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.CameraEvent.deletedByLabel)
  return _internal_deletedbylabel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraEvent::set_deletedbylabel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.deletedbylabel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.CameraEvent.deletedByLabel)
}
inline std::string* CameraEvent::mutable_deletedbylabel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deletedbylabel();
  // @@protoc_insertion_point(field_mutable:core.v1.CameraEvent.deletedByLabel)
  return _s;
}
inline const std::string& CameraEvent::_internal_deletedbylabel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletedbylabel_.Get();
}
inline void CameraEvent::_internal_set_deletedbylabel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.deletedbylabel_.Set(value, GetArena());
}
inline std::string* CameraEvent::_internal_mutable_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.deletedbylabel_.Mutable( GetArena());
}
inline std::string* CameraEvent::release_deletedbylabel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.CameraEvent.deletedByLabel)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.deletedbylabel_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deletedbylabel_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraEvent::set_allocated_deletedbylabel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.deletedbylabel_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deletedbylabel_.IsDefault()) {
          _impl_.deletedbylabel_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.CameraEvent.deletedByLabel)
}

// -------------------------------------------------------------------

// SaveCameraEventRequest

// string userId = 1 [json_name = "userId"];
inline void SaveCameraEventRequest::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SaveCameraEventRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveCameraEventRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveCameraEventRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.userId)
}
inline std::string* SaveCameraEventRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveCameraEventRequest.userId)
  return _s;
}
inline const std::string& SaveCameraEventRequest::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void SaveCameraEventRequest::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SaveCameraEventRequest::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SaveCameraEventRequest::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveCameraEventRequest.userId)
  return _impl_.userid_.Release();
}
inline void SaveCameraEventRequest::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveCameraEventRequest.userId)
}

// int64 recordTime = 2 [json_name = "recordTime"];
inline void SaveCameraEventRequest::clear_recordtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordtime_ = ::int64_t{0};
}
inline ::int64_t SaveCameraEventRequest::recordtime() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveCameraEventRequest.recordTime)
  return _internal_recordtime();
}
inline void SaveCameraEventRequest::set_recordtime(::int64_t value) {
  _internal_set_recordtime(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.recordTime)
}
inline ::int64_t SaveCameraEventRequest::_internal_recordtime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recordtime_;
}
inline void SaveCameraEventRequest::_internal_set_recordtime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordtime_ = value;
}

// string cameraId = 3 [json_name = "cameraId"];
inline void SaveCameraEventRequest::clear_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.ClearToEmpty();
}
inline const std::string& SaveCameraEventRequest::cameraid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveCameraEventRequest.cameraId)
  return _internal_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveCameraEventRequest::set_cameraid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.cameraId)
}
inline std::string* SaveCameraEventRequest::mutable_cameraid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cameraid();
  // @@protoc_insertion_point(field_mutable:core.v1.SaveCameraEventRequest.cameraId)
  return _s;
}
inline const std::string& SaveCameraEventRequest::_internal_cameraid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cameraid_.Get();
}
inline void SaveCameraEventRequest::_internal_set_cameraid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.Set(value, GetArena());
}
inline std::string* SaveCameraEventRequest::_internal_mutable_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cameraid_.Mutable( GetArena());
}
inline std::string* SaveCameraEventRequest::release_cameraid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.SaveCameraEventRequest.cameraId)
  return _impl_.cameraid_.Release();
}
inline void SaveCameraEventRequest::set_allocated_cameraid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cameraid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraid_.IsDefault()) {
          _impl_.cameraid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.v1.SaveCameraEventRequest.cameraId)
}

// repeated bytes croppedFaces = 4 [json_name = "croppedFaces"];
inline int SaveCameraEventRequest::_internal_croppedfaces_size() const {
  return _internal_croppedfaces().size();
}
inline int SaveCameraEventRequest::croppedfaces_size() const {
  return _internal_croppedfaces_size();
}
inline void SaveCameraEventRequest::clear_croppedfaces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.croppedfaces_.Clear();
}
inline std::string* SaveCameraEventRequest::add_croppedfaces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_croppedfaces()->Add();
  // @@protoc_insertion_point(field_add_mutable:core.v1.SaveCameraEventRequest.croppedFaces)
  return _s;
}
inline const std::string& SaveCameraEventRequest::croppedfaces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.SaveCameraEventRequest.croppedFaces)
  return _internal_croppedfaces().Get(index);
}
inline std::string* SaveCameraEventRequest::mutable_croppedfaces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:core.v1.SaveCameraEventRequest.croppedFaces)
  return _internal_mutable_croppedfaces()->Mutable(index);
}
inline void SaveCameraEventRequest::set_croppedfaces(int index, const std::string& value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::set_croppedfaces(int index, std::string&& value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::set_croppedfaces(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_croppedfaces()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::set_croppedfaces(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::set_croppedfaces(int index, absl::string_view value) {
  _internal_mutable_croppedfaces()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::add_croppedfaces(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::add_croppedfaces(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::add_croppedfaces(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::add_croppedfaces(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline void SaveCameraEventRequest::add_croppedfaces(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_croppedfaces()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:core.v1.SaveCameraEventRequest.croppedFaces)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SaveCameraEventRequest::croppedfaces() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:core.v1.SaveCameraEventRequest.croppedFaces)
  return _internal_croppedfaces();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SaveCameraEventRequest::mutable_croppedfaces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:core.v1.SaveCameraEventRequest.croppedFaces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_croppedfaces();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SaveCameraEventRequest::_internal_croppedfaces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.croppedfaces_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SaveCameraEventRequest::_internal_mutable_croppedfaces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.croppedfaces_;
}

// double score = 5 [json_name = "score"];
inline void SaveCameraEventRequest::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline double SaveCameraEventRequest::score() const {
  // @@protoc_insertion_point(field_get:core.v1.SaveCameraEventRequest.score)
  return _internal_score();
}
inline void SaveCameraEventRequest::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:core.v1.SaveCameraEventRequest.score)
}
inline double SaveCameraEventRequest::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void SaveCameraEventRequest::_internal_set_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// ListCameraEventResponse

// repeated .core.v1.CameraEvent items = 1 [json_name = "items"];
inline int ListCameraEventResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int ListCameraEventResponse::items_size() const {
  return _internal_items_size();
}
inline void ListCameraEventResponse::clear_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.items_.Clear();
}
inline ::core::v1::CameraEvent* ListCameraEventResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:core.v1.ListCameraEventResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>* ListCameraEventResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:core.v1.ListCameraEventResponse.items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_items();
}
inline const ::core::v1::CameraEvent& ListCameraEventResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.ListCameraEventResponse.items)
  return _internal_items().Get(index);
}
inline ::core::v1::CameraEvent* ListCameraEventResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::core::v1::CameraEvent* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:core.v1.ListCameraEventResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>& ListCameraEventResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:core.v1.ListCameraEventResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>&
ListCameraEventResponse::_internal_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::core::v1::CameraEvent>*
ListCameraEventResponse::_internal_mutable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.items_;
}

// .api.v1.PaginationResponse pagination = 2 [json_name = "pagination"];
inline bool ListCameraEventResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::api::v1::PaginationResponse& ListCameraEventResponse::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::api::v1::PaginationResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::v1::PaginationResponse&>(::api::v1::_PaginationResponse_default_instance_);
}
inline const ::api::v1::PaginationResponse& ListCameraEventResponse::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core.v1.ListCameraEventResponse.pagination)
  return _internal_pagination();
}
inline void ListCameraEventResponse::unsafe_arena_set_allocated_pagination(::api::v1::PaginationResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core.v1.ListCameraEventResponse.pagination)
}
inline ::api::v1::PaginationResponse* ListCameraEventResponse::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::api::v1::PaginationResponse* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::api::v1::PaginationResponse* ListCameraEventResponse::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core.v1.ListCameraEventResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::api::v1::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::api::v1::PaginationResponse* ListCameraEventResponse::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::api::v1::PaginationResponse>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(p);
  }
  return _impl_.pagination_;
}
inline ::api::v1::PaginationResponse* ListCameraEventResponse::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::api::v1::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:core.v1.ListCameraEventResponse.pagination)
  return _msg;
}
inline void ListCameraEventResponse::set_allocated_pagination(::api::v1::PaginationResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::api::v1::PaginationResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:core.v1.ListCameraEventResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace core


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_core_2fv1_2fcamera_5fevent_2eproto_2epb_2eh
