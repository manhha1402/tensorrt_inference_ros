// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core/v1/check_in_out.proto

#include "core/v1/check_in_out.pb.h"
#include "core/v1/check_in_out.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core {
namespace v1 {

static const char* CheckInOutService_method_names[] = {
  "/core.v1.CheckInOutService/Autocomplete",
  "/core.v1.CheckInOutService/Create",
  "/core.v1.CheckInOutService/Get",
  "/core.v1.CheckInOutService/List",
  "/core.v1.CheckInOutService/Update",
  "/core.v1.CheckInOutService/SoftDelete",
  "/core.v1.CheckInOutService/Delete",
};

std::unique_ptr< CheckInOutService::Stub> CheckInOutService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CheckInOutService::Stub> stub(new CheckInOutService::Stub(channel, options));
  return stub;
}

CheckInOutService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Autocomplete_(CheckInOutService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(CheckInOutService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(CheckInOutService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(CheckInOutService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(CheckInOutService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftDelete_(CheckInOutService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(CheckInOutService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CheckInOutService::Stub::Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::api::v1::AutocompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Autocomplete_, context, request, response);
}

void CheckInOutService::Stub::async::Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Autocomplete_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::Autocomplete(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Autocomplete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>* CheckInOutService::Stub::PrepareAsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::AutocompleteResponse, ::api::v1::AutocompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Autocomplete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::AutocompleteResponse>* CheckInOutService::Stub::AsyncAutocompleteRaw(::grpc::ClientContext* context, const ::api::v1::AutocompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAutocompleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::Create(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::core::v1::CheckInOut* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void CheckInOutService::Stub::async::Create(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::Create(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::CheckInOut, ::core::v1::SaveCheckInOutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::core::v1::CheckInOut* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::GetRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void CheckInOutService::Stub::async::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::CheckInOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::GetRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::Get(::grpc::ClientContext* context, const ::api::v1::GetRequest* request, ::core::v1::CheckInOut* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::CheckInOut, ::api::v1::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::api::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::core::v1::ListCheckInOutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::SelectRequest, ::core::v1::ListCheckInOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void CheckInOutService::Stub::async::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListCheckInOutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::SelectRequest, ::core::v1::ListCheckInOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::List(::grpc::ClientContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListCheckInOutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::ListCheckInOutResponse>* CheckInOutService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::ListCheckInOutResponse, ::api::v1::SelectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::ListCheckInOutResponse>* CheckInOutService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::api::v1::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::Update(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::core::v1::CheckInOut* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void CheckInOutService::Stub::async::Update(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::Update(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core::v1::CheckInOut, ::core::v1::SaveCheckInOutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core::v1::CheckInOut>* CheckInOutService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::core::v1::SaveCheckInOutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SoftDelete_, context, request, response);
}

void CheckInOutService::Stub::async::SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftDelete_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::SoftDelete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* CheckInOutService::Stub::PrepareAsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::DeleteResponse, ::api::v1::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SoftDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* CheckInOutService::Stub::AsyncSoftDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSoftDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CheckInOutService::Stub::Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::api::v1::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void CheckInOutService::Stub::async::Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void CheckInOutService::Stub::async::Delete(::grpc::ClientContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* CheckInOutService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::DeleteResponse, ::api::v1::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::DeleteResponse>* CheckInOutService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::api::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

CheckInOutService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::api::v1::AutocompleteRequest, ::api::v1::AutocompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::AutocompleteRequest* req,
             ::api::v1::AutocompleteResponse* resp) {
               return service->Autocomplete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::v1::SaveCheckInOutRequest* req,
             ::core::v1::CheckInOut* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::api::v1::GetRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::GetRequest* req,
             ::core::v1::CheckInOut* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::api::v1::SelectRequest, ::core::v1::ListCheckInOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::SelectRequest* req,
             ::core::v1::ListCheckInOutResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::core::v1::SaveCheckInOutRequest, ::core::v1::CheckInOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core::v1::SaveCheckInOutRequest* req,
             ::core::v1::CheckInOut* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::DeleteRequest* req,
             ::api::v1::DeleteResponse* resp) {
               return service->SoftDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CheckInOutService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CheckInOutService::Service, ::api::v1::DeleteRequest, ::api::v1::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CheckInOutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::DeleteRequest* req,
             ::api::v1::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

CheckInOutService::Service::~Service() {
}

::grpc::Status CheckInOutService::Service::Autocomplete(::grpc::ServerContext* context, const ::api::v1::AutocompleteRequest* request, ::api::v1::AutocompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::Create(::grpc::ServerContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::Get(::grpc::ServerContext* context, const ::api::v1::GetRequest* request, ::core::v1::CheckInOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::List(::grpc::ServerContext* context, const ::api::v1::SelectRequest* request, ::core::v1::ListCheckInOutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::Update(::grpc::ServerContext* context, const ::core::v1::SaveCheckInOutRequest* request, ::core::v1::CheckInOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::SoftDelete(::grpc::ServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CheckInOutService::Service::Delete(::grpc::ServerContext* context, const ::api::v1::DeleteRequest* request, ::api::v1::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core
}  // namespace v1

